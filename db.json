{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/title_logo.jpg","path":"title_logo.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/title_logo.png","path":"title_logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/actor.jpg","path":"images/actor.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"source/book/index.md","path":"book/index.md","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/2024-1-6姥山岛.md","hash":"472e989b672b930cfa27ded4fa2f5307b9ec61ce","modified":1720195622156},{"_id":"source/_data/friends.json","hash":"ddc5a0fb40aa57ff4cf623804fbe120863c8d25f","modified":1705563511934},{"_id":"source/_posts/2024-1-21城隍庙.md","hash":"467148b6a0685b5ac560e20785ed699e4e62bd64","modified":1720195617211},{"_id":"source/_posts/2024-2-15东至县城.md","hash":"058d17303c0b7559e162c5a1c6a989d5ab27d844","modified":1720195606839},{"_id":"source/_posts/FOC学习笔记.md","hash":"4ec669869088b358cf5d321216fbc8573ff41de2","modified":1720195602094},{"_id":"source/_posts/2024-1-25红星路互勉.md","hash":"161a025862ba62a76718ffb390e72fe457cc6a67","modified":1720195612350},{"_id":"source/_posts/Linux嵌入式2-GPIO编程.md","hash":"af8ee7901175d6f1312a5e7f11487fa23c903e03","modified":1720195587652},{"_id":"source/_posts/Linux嵌入式5-FrameBuffer应用编程.md","hash":"f8837c646447dd13fa6297efbf8a3086d053b959","modified":1720195568231},{"_id":"source/_posts/FOC硬件日记.md","hash":"98c4f7c5badb347dfef16dd1a040f73a6683271b","modified":1720195597296},{"_id":"source/_posts/Linux嵌入式1-基础知识.md","hash":"51973ba1bca5f0f5b4c79a5bbe7ae8311bb2e762","modified":1720195592610},{"_id":"source/_posts/Linux嵌入式3-输入设备.md","hash":"7490fd8abbdb2f15b8cb1f85f99d40bced807b59","modified":1720195582690},{"_id":"source/_posts/工作日志.md","hash":"ace23fc981b95cf1cdfeb21c2ec4570d4dbf432e","modified":1720195523827},{"_id":"source/_posts/Linux嵌入式4-tslib库函数.md","hash":"3a86717c0169e7c266066a3f14b308bb2a9c0410","modified":1720195577708},{"_id":"source/book/index.md","hash":"48a05f4bdf85e6bc05b1ff3f7a71423c484f21e2","modified":1720273708978},{"_id":"source/friends/index.md","hash":"c7b3545fa14eb0ae501ba192d999dc4dab2265c3","modified":1705563085284},{"_id":"source/categories/index.md","hash":"e15fe045b92e67f412ee8ab5537c3887865b1ebb","modified":1720193855703},{"_id":"source/contact/index.md","hash":"bb2e8fad46ee5d7b6db946be444a20e9a775015f","modified":1705562712446},{"_id":"source/tags/index.md","hash":"32cda6a4bda9b32c67fcb67ddba78c292240cf55","modified":1720192303244},{"_id":"source/_posts/虫子移动问题.md","hash":"1e27874095e1bc6b767e4788c5c36f7879917bff","modified":1720195553616},{"_id":"source/about/index.md","hash":"bbe237767ea96b84cd261639d0e59fad59c87cd3","modified":1720194366546},{"_id":"source/_posts/嵌入式Linux6-UART串口.md","hash":"97c75cd66781e728eafb461f3227c674a45c9944","modified":1720195562836},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1647847126000},{"_id":"themes/pure/_config.yml","hash":"67c5b6dc71fd4f02e797e7d9a6b063a265839851","modified":1720200957706},{"_id":"themes/pure/README.cn.md","hash":"ddf15a1feb7a2630210aae0528df3504fca23b5e","modified":1647847126000},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1647847126000},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1720194757542},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1720194754391},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1647847126000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1720194755824},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1720194752188},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1647847126000},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1647847126000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1647847126000},{"_id":"themes/pure/layout/archive.ejs","hash":"0e9e67a82202ca3971be59579744d43ec6696bbf","modified":1647847126000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1647847126000},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1647847126000},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1647847126000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1647847126000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1647847126000},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1647847126000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1647847126000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1647847126000},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1647847126000},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1647847126000},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1647847126000},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1647847126000},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1647847126000},{"_id":"themes/pure/source/title_logo.jpg","hash":"717407db7c849a9a110b67e26b258933a5d97573","modified":1720196336973},{"_id":"themes/pure/source/title_logo.png","hash":"0bd1b68d94e57cfd09f1b575343d77fe43a25947","modified":1720196565145},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1647847126000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1647847126000},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1647847126000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1647847126000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1647847126000},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1647847126000},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1647847126000},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1647847126000},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1647847126000},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1647847126000},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"1081974f182e8e1ce452d701b8f6575b6dc45b0c","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"3464682ae0359ba23034ac40e8153699c37fb7be","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1647847126000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1647847126000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1647847126000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"c792537723b59f437967262c9575a20fac02e911","modified":1647847126000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"2f3790257d6ad07fdad2043b27950842c9011daa","modified":1647847126000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1647847126000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"fa9e2041c4a6e03f566545db1385c5ae1a80f879","modified":1647847126000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1647847126000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1647847126000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"572ccda02d603534ea829e32c4f7904f55fcf0cc","modified":1720195157631},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1647847126000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1647847126000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1647847126000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1647847126000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1647847126000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1647847126000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1647847126000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1647847126000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1647847126000},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1647847126000},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1647847126000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1647847126000},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1647847126000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1647847126000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1647847126000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"32f0ac36fa68d8786506957338e552661f2f809c","modified":1647847126000},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1647847126000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1647847126000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1647847126000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1647847126000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1647847126000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1647847126000},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1647847126000},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1647847126000},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1647847126000},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1647847126000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1647847126000},{"_id":"themes/pure/source/images/actor.jpg","hash":"db3d9c1d827336540e933ec807777e9e91fbae69","modified":1720195216081},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1647847126000},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"0a99c99992fb1e97bf5a57e05179f5680d69dcc8","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"fcbe3695ae9b164a4a2d27a66a6827dcf3ee76f1","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1647847126000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1647847126000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1647847126000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"de4c43d3056825c14283fe426b8cc677dea59617","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1647847126000},{"_id":"themes/pure/layout/_script/_repository/gitee.ejs","hash":"0e1ecabe809f149ebe3ce3ac393f6e6155dd6780","modified":1647847126000},{"_id":"themes/pure/layout/_script/_repository/github.ejs","hash":"a4762135de6816c85156e85886f50fb32b0adc89","modified":1647847126000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1647847126000},{"_id":"themes/pure/layout/_script/_repository/legacy.ejs","hash":"b5e5c666e89550abb5004e35c7ef165c6edab62d","modified":1647847126000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1647847126000},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1647847126000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1647847126000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1647847126000},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1647847126000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1647847126000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1647847126000},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1647847126000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1647847126000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1647847126000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1647847126000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1647847126000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1647847126000},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1647847126000},{"_id":"themes/pure/source/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1647847126000},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1647847126000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1647847126000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1647847126000},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1647847126000},{"_id":"public/atom.xml","hash":"b5647ca348ba7f541e4a844614eea66ae66044eb","modified":1720258165783},{"_id":"public/baidusitemap.xml","hash":"3cc9ff5dfebd05698f518897b48055092038e111","modified":1720258165783},{"_id":"public/content.json","hash":"a0632f99b9387f813242f695286c94fd4eec4a55","modified":1720273713427},{"_id":"public/sitemap.xml","hash":"3b460e9fe5444eae1bb3cabb978984a317424736","modified":1720273030306},{"_id":"public/sitemap.txt","hash":"43d753374ca112afcbe382ef20efe1354e8b4074","modified":1720273030306},{"_id":"public/search.xml","hash":"061537c74c2c42f36048e3921d276b44cae729a2","modified":1720258165783},{"_id":"public/book/index.html","hash":"536ad7fb5955bab1f93128ebd4d881d248b173ca","modified":1720273713427},{"_id":"public/friends/index.html","hash":"7a711ae56f4d16bec72e9a438df88971bc0f6065","modified":1720258165783},{"_id":"public/contact/index.html","hash":"b9b6da99c1f299bebb5fb354bd572e367f43c5a0","modified":1720258165783},{"_id":"public/tags/index.html","hash":"9a9792f2fabf1bd454c61f5a5dc41120ab0bb830","modified":1720258165783},{"_id":"public/categories/摄影日记/index.html","hash":"b85bbdd6d7507dd33c87e9b6a49d6932c95b0d5b","modified":1720258165783},{"_id":"public/categories/FOC学习/index.html","hash":"b3c7e45731a5a703a31e366a6fbfd76eec25a8d2","modified":1720258165783},{"_id":"public/categories/Linux嵌入式学习/index.html","hash":"da00c7bb4dbad14eb6fd3fe73d2e44b8d19f346c","modified":1720258165783},{"_id":"public/categories/工作日志/index.html","hash":"b66c75037816faac6bf39356db5acfb1fab72ad4","modified":1720258165783},{"_id":"public/categories/算法/index.html","hash":"78d6a6911541d481001f91483c3005ae1aca5492","modified":1720258165783},{"_id":"public/archives/page/2/index.html","hash":"a142f6538f3508baf4cd612fa71f5c558529db9f","modified":1720258165783},{"_id":"public/archives/2024/page/2/index.html","hash":"155f0b4bf82e67e5236be7b3a5a6ba893c8fb5a2","modified":1720258165783},{"_id":"public/archives/2024/01/page/2/index.html","hash":"92d741f1696705aa41fd0a634d9100c8b2b9285f","modified":1720258165783},{"_id":"public/archives/2024/02/index.html","hash":"a0e6e5b7feb001565dbc30917372ec1ef1b74b71","modified":1720258165783},{"_id":"public/archives/2024/07/index.html","hash":"5399b65dfa4a178ba0a8fbefb85d4fe06ab0ca1b","modified":1720258165783},{"_id":"public/about/index.html","hash":"d764e72c8886631bd0f93360d614f08b299d02b0","modified":1720258165783},{"_id":"public/categories/index.html","hash":"c36a9d63e7d44429fff1f3c16fc27f077ade1c2b","modified":1720258165783},{"_id":"public/2024/07/05/工作日志/index.html","hash":"a8173f95bb6c251b0a1449d9716f46b307e5f59a","modified":1720258165783},{"_id":"public/2024/02/15/2024-2-15东至县城/index.html","hash":"cb7654e07bffacadb677bed17ecb156546ba56ff","modified":1720258165783},{"_id":"public/2024/02/06/嵌入式Linux6-UART串口/index.html","hash":"90dcd2d0dc7f6fccac6efe68fe47e64ca04d7ccc","modified":1720258165783},{"_id":"public/2024/01/31/Linux嵌入式5-FrameBuffer应用编程/index.html","hash":"61876ff268bf042fb2a746e9f0424e2680ab9a62","modified":1720258165783},{"_id":"public/2024/01/29/2024-1-25红星路互勉/index.html","hash":"5892d79c45ed011bb48d033b61fc047b414c982b","modified":1720258165783},{"_id":"public/2024/01/21/2024-1-21城隍庙/index.html","hash":"5cc467b885d065a0ac14571dbab1e3e1b9ae032d","modified":1720258165783},{"_id":"public/2024/01/20/FOC硬件日记/index.html","hash":"f1cffcd8907c22e944c3796f2ac055666bd07cb3","modified":1720258165783},{"_id":"public/2024/01/18/Linux嵌入式4-tslib库函数/index.html","hash":"67fbe55c7665c8796f21413c08343c59f1caf562","modified":1720258165783},{"_id":"public/2024/01/16/虫子移动问题/index.html","hash":"84b70c44f3ee41efd507a7c98b988d1fbb156e3a","modified":1720258165783},{"_id":"public/2024/01/14/Linux嵌入式3-输入设备/index.html","hash":"a6ad2b0667ccff06363fd643e1e42f9606f9fa32","modified":1720258165783},{"_id":"public/2024/01/14/Linux嵌入式2-GPIO编程/index.html","hash":"7c2d8943e51e5f9c177319f9de12100c539c9695","modified":1720258165783},{"_id":"public/2024/01/14/Linux嵌入式1-基础知识/index.html","hash":"771144a85c7a97163bb9677a6a2fd6257f72b273","modified":1720258165783},{"_id":"public/2024/01/13/2024-1-6姥山岛/index.html","hash":"1a6f17aebe065f30db5aebd4a42e870ed236da00","modified":1720258165783},{"_id":"public/2024/01/13/FOC学习笔记/index.html","hash":"74cfbaac60f9673b1c0a8ab17684bbcfaea2a14a","modified":1720258165783},{"_id":"public/archives/index.html","hash":"0a298cbe39551a01cdca25147eec9309a92ba69a","modified":1720258165783},{"_id":"public/archives/2024/index.html","hash":"278fee07e2ca0905d4b10a5a122f9c1227d97238","modified":1720258165783},{"_id":"public/archives/2024/01/index.html","hash":"d18c30a1a86536e44cb2b59b8afbdbdea17c04d7","modified":1720258165783},{"_id":"public/index.html","hash":"0257fcc447b8fbab9953684006116558409212ac","modified":1720258165783},{"_id":"public/page/2/index.html","hash":"e4243e8717c8c67b6c72383235726771e42d00d3","modified":1720258165783},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1720258165783},{"_id":"public/title_logo.jpg","hash":"717407db7c849a9a110b67e26b258933a5d97573","modified":1720258165783},{"_id":"public/title_logo.png","hash":"0bd1b68d94e57cfd09f1b575343d77fe43a25947","modified":1720258165783},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1720258165783},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1720258165783},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1720258165783},{"_id":"public/images/actor.jpg","hash":"db3d9c1d827336540e933ec807777e9e91fbae69","modified":1720258165783},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1720258165783},{"_id":"public/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1720258165783},{"_id":"public/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1720258165783},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1720258165783},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1720258165783},{"_id":"public/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1720258165783},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1720258165783},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1720258165783},{"_id":"public/live2dw/assets/haruto.model.json","hash":"76f915f7edbd9c47df0ca041dddb151c0c93a2bf","modified":1720258165783},{"_id":"public/live2dw/assets/haruto.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"d130dd1d194f05b3eb5391289b0339999e37c3a6","modified":1720258165783},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1720258165783},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1720258165783},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1720258165783},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1720258165783},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1720258165783},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1720258165783},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1720258165783},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1720258165783},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1720258165783},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1720258165783},{"_id":"public/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1720258165783},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1720258165783},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1720258165783},{"_id":"public/live2dw/assets/moc/haruto.2048/texture_00.png","hash":"62b970aa1480a1c18bdc4e74e297f2a1b34ca9fa","modified":1720258165783},{"_id":"public/live2dw/assets/moc/haruto.moc","hash":"57bec0b245b49ea941d61ba3dee671f20441afae","modified":1720258165783},{"_id":"public/book/index.md","hash":"ba88ccfd283794ca6f1e166b1a049d925187be9a","modified":1720273003946}],"Category":[{"name":"摄影日记","_id":"cly9xaoj0000404vr62lmg4rn"},{"name":"FOC学习","_id":"cly9xaoj6000k04vr8aowaypc"},{"name":"Linux嵌入式学习","_id":"cly9xaoj7000p04vr2f6jeorv"},{"name":"工作日志","_id":"cly9xaoja001404vr3nu6hr99"},{"name":"算法","_id":"cly9xaojb001704vr5m4tc7f7"}],"Data":[{"_id":"friends","data":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}],"Page":[{"title":"关于我","date":"2024-01-14T13:55:32.000Z","_content":"\n---\n\n\n## 我的故事\n\n你听说过我的故事？\n\n\n\n> “我的计划是一直自由 直到陪伴胜过我独活”\n\n*注：这是我的座右铭。*\n\n---\n\n**联系我：**\n\n- 邮箱：wujing.ahtcm.gmail.com\n- GitHub：[ActorJing](https://github.com/ActorJing)\n- bilibili：[迪斯尼海滩空想家](https://space.bilibili.com/489550935?spm_id_from=333.1007.0.0)\n\n---\n\n**项目展示：**\n\n| 项目名称 | 描述            |\n| -------- | --------------- |\n| 项目1    | 项目1的简短描述 |\n| 项目2    | 项目2的简短描述 |\n\n---\n\n**教育经历：**\n\n- 硕士，计算机技术，合肥工业大学，2022\n- 学士，医学信息工程，安徽中医药大学，2018\n\n---\n\n**技能列表：**\n\n- 单片机开发51、STM32、NXP、TC264；嵌入式Linux、I.MX6ULL\n- PID控制、模糊控制、FOC控制\n- Altium Designer、立创eda\n\n---\n\n**个人兴趣：**\n\n- 骑行\n- 摄影\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2024-01-14 21:55:32\n---\n\n---\n\n\n## 我的故事\n\n你听说过我的故事？\n\n\n\n> “我的计划是一直自由 直到陪伴胜过我独活”\n\n*注：这是我的座右铭。*\n\n---\n\n**联系我：**\n\n- 邮箱：wujing.ahtcm.gmail.com\n- GitHub：[ActorJing](https://github.com/ActorJing)\n- bilibili：[迪斯尼海滩空想家](https://space.bilibili.com/489550935?spm_id_from=333.1007.0.0)\n\n---\n\n**项目展示：**\n\n| 项目名称 | 描述            |\n| -------- | --------------- |\n| 项目1    | 项目1的简短描述 |\n| 项目2    | 项目2的简短描述 |\n\n---\n\n**教育经历：**\n\n- 硕士，计算机技术，合肥工业大学，2022\n- 学士，医学信息工程，安徽中医药大学，2018\n\n---\n\n**技能列表：**\n\n- 单片机开发51、STM32、NXP、TC264；嵌入式Linux、I.MX6ULL\n- PID控制、模糊控制、FOC控制\n- Altium Designer、立创eda\n\n---\n\n**个人兴趣：**\n\n- 骑行\n- 摄影\n","updated":"2024-07-05T15:46:06.546Z","path":"about/index.html","comments":1,"layout":"page","_id":"cly9xaoiu000004vrae6qc1qk","content":"<hr>\n<h2 id=\"我的故事\"><a href=\"#我的故事\" class=\"headerlink\" title=\"我的故事\"></a>我的故事</h2><p>你听说过我的故事？</p>\n<blockquote>\n<p>“我的计划是一直自由 直到陪伴胜过我独活”</p>\n</blockquote>\n<p><em>注：这是我的座右铭。</em></p>\n<hr>\n<p><strong>联系我：</strong></p>\n<ul>\n<li>邮箱：wujing.ahtcm.gmail.com</li>\n<li>GitHub：<a href=\"https://github.com/ActorJing\">ActorJing</a></li>\n<li>bilibili：<a href=\"https://space.bilibili.com/489550935?spm_id_from=333.1007.0.0\">迪斯尼海滩空想家</a></li>\n</ul>\n<hr>\n<p><strong>项目展示：</strong></p>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>项目1</td>\n<td>项目1的简短描述</td>\n</tr>\n<tr>\n<td>项目2</td>\n<td>项目2的简短描述</td>\n</tr>\n</tbody></table>\n<hr>\n<p><strong>教育经历：</strong></p>\n<ul>\n<li>硕士，计算机技术，合肥工业大学，2022</li>\n<li>学士，医学信息工程，安徽中医药大学，2018</li>\n</ul>\n<hr>\n<p><strong>技能列表：</strong></p>\n<ul>\n<li>单片机开发51、STM32、NXP、TC264；嵌入式Linux、I.MX6ULL</li>\n<li>PID控制、模糊控制、FOC控制</li>\n<li>Altium Designer、立创eda</li>\n</ul>\n<hr>\n<p><strong>个人兴趣：</strong></p>\n<ul>\n<li>骑行</li>\n<li>摄影</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"我的故事\"><a href=\"#我的故事\" class=\"headerlink\" title=\"我的故事\"></a>我的故事</h2><p>你听说过我的故事？</p>\n<blockquote>\n<p>“我的计划是一直自由 直到陪伴胜过我独活”</p>\n</blockquote>\n<p><em>注：这是我的座右铭。</em></p>\n<hr>\n<p><strong>联系我：</strong></p>\n<ul>\n<li>邮箱：wujing.ahtcm.gmail.com</li>\n<li>GitHub：<a href=\"https://github.com/ActorJing\">ActorJing</a></li>\n<li>bilibili：<a href=\"https://space.bilibili.com/489550935?spm_id_from=333.1007.0.0\">迪斯尼海滩空想家</a></li>\n</ul>\n<hr>\n<p><strong>项目展示：</strong></p>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>项目1</td>\n<td>项目1的简短描述</td>\n</tr>\n<tr>\n<td>项目2</td>\n<td>项目2的简短描述</td>\n</tr>\n</tbody></table>\n<hr>\n<p><strong>教育经历：</strong></p>\n<ul>\n<li>硕士，计算机技术，合肥工业大学，2022</li>\n<li>学士，医学信息工程，安徽中医药大学，2018</li>\n</ul>\n<hr>\n<p><strong>技能列表：</strong></p>\n<ul>\n<li>单片机开发51、STM32、NXP、TC264；嵌入式Linux、I.MX6ULL</li>\n<li>PID控制、模糊控制、FOC控制</li>\n<li>Altium Designer、立创eda</li>\n</ul>\n<hr>\n<p><strong>个人兴趣：</strong></p>\n<ul>\n<li>骑行</li>\n<li>摄影</li>\n</ul>\n"},{"title":"书单","date":"2024-07-05T06:07:09.000Z","_content":"\n# [大语言模型](https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/LLMBook.pdf)\n\n# [Linux驱动](https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/【正点原子】I.MX6U嵌入式Linux驱动开发指南V1.6.pdf)\n","source":"book/index.md","raw":"---\ntitle: 书单\ndate: 2024-07-5 14:07:09\n---\n\n# [大语言模型](https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/LLMBook.pdf)\n\n# [Linux驱动](https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/【正点原子】I.MX6U嵌入式Linux驱动开发指南V1.6.pdf)\n","updated":"2024-07-06T13:48:28.978Z","path":"book/index.html","_id":"cly9xaoiy000204vr65t96g31","comments":1,"layout":"page","content":"<h1 id=\"大语言模型\"><a href=\"#大语言模型\" class=\"headerlink\" title=\"大语言模型\"></a><a href=\"https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/LLMBook.pdf\">大语言模型</a></h1><h1 id=\"Linux驱动\"><a href=\"#Linux驱动\" class=\"headerlink\" title=\"Linux驱动\"></a><a href=\"https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E3%80%90%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90%E3%80%91I.MX6U%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97V1.6.pdf\">Linux驱动</a></h1>","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"大语言模型\"><a href=\"#大语言模型\" class=\"headerlink\" title=\"大语言模型\"></a><a href=\"https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/LLMBook.pdf\">大语言模型</a></h1><h1 id=\"Linux驱动\"><a href=\"#Linux驱动\" class=\"headerlink\" title=\"Linux驱动\"></a><a href=\"https://wujingebook.netlify.app/web/viewer.html?file=https://wujingebook.netlify.app/ebook/%E3%80%90%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90%E3%80%91I.MX6U%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97V1.6.pdf\">Linux驱动</a></h1>"},{"title":"friends","date":"2024-01-18T07:31:09.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2024-01-18 15:31:09\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2024-01-18T07:31:25.284Z","path":"friends/index.html","comments":1,"_id":"cly9xaoj0000504vrd5dp530k","content":"","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":""},{"title":"分类","date":"2024-01-14T13:51:15.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-01-14 21:51:15\ntype: \"categories\"\nlayout: categories\n---\n","updated":"2024-07-05T15:37:35.703Z","path":"categories/index.html","comments":1,"_id":"cly9xaoj1000704vr8k8t15xj","content":"","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":""},{"title":"contact","date":"2024-01-18T07:24:41.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2024-01-18 15:24:41\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2024-01-18T07:25:12.446Z","path":"contact/index.html","comments":1,"_id":"cly9xaoj2000904vr38yc8src","content":"","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":""},{"title":"tags","date":"2024-07-05T15:11:33.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-07-05 23:11:33\nlayout: tags\n---\n","updated":"2024-07-05T15:11:43.244Z","path":"tags/index.html","comments":1,"_id":"cly9xaoj3000c04vrhyar5tc6","content":"","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":""}],"Post":[{"title":"2024-1-25红星路互勉","date":"2024-01-29T07:21:49.000Z","toc":true,"_content":"\n2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样\n\n![微信图片_20240129152330](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152330.jpg)\n\n![微信图片_20240129152455](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152455.jpg)\n\n![微信图片_20240129152501](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152501.jpg)\n\n![微信图片_20240129152508](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152508.jpg)\n\n![微信图片_20240129152514](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152514.jpg)\n\n![微信图片_20240129152521](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152521.jpg)\n\n![微信图片_20240129152526](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152526.jpg)\n\n![微信图片_20240129152535](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152535.jpg)\n","source":"_posts/2024-1-25红星路互勉.md","raw":"---\ntitle: 2024-1-25红星路互勉\ndate: 2024-01-29 15:21:49\ntags: \ncategories: 摄影日记\ntoc: true\n---\n\n2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样\n\n![微信图片_20240129152330](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152330.jpg)\n\n![微信图片_20240129152455](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152455.jpg)\n\n![微信图片_20240129152501](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152501.jpg)\n\n![微信图片_20240129152508](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152508.jpg)\n\n![微信图片_20240129152514](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152514.jpg)\n\n![微信图片_20240129152521](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152521.jpg)\n\n![微信图片_20240129152526](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152526.jpg)\n\n![微信图片_20240129152535](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/微信图片_20240129152535.jpg)\n","slug":"2024-1-25红星路互勉","published":1,"updated":"2024-07-05T16:06:52.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoiw000104vr8xg50l45","content":"<p>2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152330.jpg\" alt=\"微信图片_20240129152330\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152455.jpg\" alt=\"微信图片_20240129152455\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152501.jpg\" alt=\"微信图片_20240129152501\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152508.jpg\" alt=\"微信图片_20240129152508\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152514.jpg\" alt=\"微信图片_20240129152514\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152521.jpg\" alt=\"微信图片_20240129152521\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152526.jpg\" alt=\"微信图片_20240129152526\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152535.jpg\" alt=\"微信图片_20240129152535\"></p>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<p>2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152330.jpg\" alt=\"微信图片_20240129152330\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152455.jpg\" alt=\"微信图片_20240129152455\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152501.jpg\" alt=\"微信图片_20240129152501\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152508.jpg\" alt=\"微信图片_20240129152508\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152514.jpg\" alt=\"微信图片_20240129152514\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152521.jpg\" alt=\"微信图片_20240129152521\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152526.jpg\" alt=\"微信图片_20240129152526\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152535.jpg\" alt=\"微信图片_20240129152535\"></p>\n"},{"title":"2024-1-21城隍庙","date":"2024-01-21T14:34:44.000Z","toc":true,"_content":"\n### 城隍庙左咪咪右修勾\n\n---\n\n![DSC_4726-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4726-1.jpg)\n\n![DSC_4735-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4735-1.jpg)\n\n![DSC_4678-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4678-1.jpg)\n\n![DSC_4730-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4730-1.jpg)\n\n![DSC_4669-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4669-1.jpg)\n\n![DSC_4696-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4696-1.jpg)\n","source":"_posts/2024-1-21城隍庙.md","raw":"---\ntitle: 2024-1-21城隍庙\ndate: 2024-01-21 22:34:44\ntags:\ncategories: 摄影日记\ntoc: true\n---\n\n### 城隍庙左咪咪右修勾\n\n---\n\n![DSC_4726-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4726-1.jpg)\n\n![DSC_4735-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4735-1.jpg)\n\n![DSC_4678-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4678-1.jpg)\n\n![DSC_4730-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4730-1.jpg)\n\n![DSC_4669-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4669-1.jpg)\n\n![DSC_4696-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4696-1.jpg)\n","slug":"2024-1-21城隍庙","published":1,"updated":"2024-07-05T16:06:57.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoiz000304vr3lggb8iq","content":"<h3 id=\"城隍庙左咪咪右修勾\"><a href=\"#城隍庙左咪咪右修勾\" class=\"headerlink\" title=\"城隍庙左咪咪右修勾\"></a>城隍庙左咪咪右修勾</h3><hr>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4726-1.jpg\" alt=\"DSC_4726-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4735-1.jpg\" alt=\"DSC_4735-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4678-1.jpg\" alt=\"DSC_4678-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4730-1.jpg\" alt=\"DSC_4730-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4669-1.jpg\" alt=\"DSC_4669-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4696-1.jpg\" alt=\"DSC_4696-1\"></p>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h3 id=\"城隍庙左咪咪右修勾\"><a href=\"#城隍庙左咪咪右修勾\" class=\"headerlink\" title=\"城隍庙左咪咪右修勾\"></a>城隍庙左咪咪右修勾</h3><hr>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4726-1.jpg\" alt=\"DSC_4726-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4735-1.jpg\" alt=\"DSC_4735-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4678-1.jpg\" alt=\"DSC_4678-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4730-1.jpg\" alt=\"DSC_4730-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4669-1.jpg\" alt=\"DSC_4669-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4696-1.jpg\" alt=\"DSC_4696-1\"></p>\n"},{"title":"2024.1.6姥山岛","date":"2024-01-13T06:31:41.000Z","toc":true,"_content":"\n![DSC_4170-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4170-1.jpg)\n\n![DSC_4492-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4492-1.jpg)\n\n![DSC_4067-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4067-1.jpg)\n","source":"_posts/2024-1-6姥山岛.md","raw":"---\ntitle: 2024.1.6姥山岛\ndate: 2024-01-13 14:31:41\ntags:\ncategories: 摄影日记\ntoc: true\n---\n\n![DSC_4170-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4170-1.jpg)\n\n![DSC_4492-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4492-1.jpg)\n\n![DSC_4067-1](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4067-1.jpg)\n","slug":"2024-1-6姥山岛","published":1,"updated":"2024-07-05T16:07:02.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj1000604vr4dnq7z99","content":"<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4170-1.jpg\" alt=\"DSC_4170-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4492-1.jpg\" alt=\"DSC_4492-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4067-1.jpg\" alt=\"DSC_4067-1\"></p>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4170-1.jpg\" alt=\"DSC_4170-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4492-1.jpg\" alt=\"DSC_4492-1\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4067-1.jpg\" alt=\"DSC_4067-1\"></p>\n"},{"title":"FOC硬件日记（正在更新）","date":"2024-01-20T15:33:48.000Z","toc":true,"_content":"\n# 1.20\n\n硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（考虑小电流drv8313方案，只支持2A电流，仍然需要加mos驱动，考虑成本选择FD6288Q）。考虑加入电流环，电流检测采用INA199A1DCKR。下图为三相逆变电路及电流检测：\n\n![image-20240120234842699](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120234842699.png)\n\n存在验证的问题：\n\n问题1：FD6288官方手册外围电路中需要增加自举电阻，参考开源方案并没有加入自举电阻，\n\n问题2：电流检测放在半桥的下桥接地，理论上放在哪儿无影响\n\n问题3：电流检测压差采用分压电阻得到1.65V，参考STM32F103C的FOC方案设计，C系列无VREF\n\n---\n\n单片机选型使用STM32F103ZET6（理论上做6路FOC电机都没问题，大炮打蚊子），最初选型考虑STM32G和STM32F4系列，最终由于价格和学习基础理论，采用ZET6（主要因为手头有剩的）。单片机VREF采用3.3V，可能会出现精度问题，暂不考虑。电源设计如下：\n\n![image-20240120235458613](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120235458613.png)\n\n电路中5V仅作为FD6288Q芯片供电，为了电路简单，使用AMS1117（手头有剩的），MCU和其他电路的3.3V区分，分别使用两个RT9013稳压。完整电路还包括显示，串口，交互按键，暂未完成。\n\n# 1.22\n\n参考柠檬FOC项目，又看到开源博主说FD6288的最低供电为12V，但是看芯片手册输入电压为4~24V，原STC无感电路设计采用5V，电机高速长时间运行时，ams1117处于温热状态，考虑更换为buck电路：\n\n![image-20240122230156017](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240122230156017.png)\n\nFD6288Q仍然使用5V供电。\n\n# 1.24\n\n完成原理图设计和PCB大致布局，完善USB串口，交互按键和LED指示灯。完整原理图如下：\n\n![image-20240124210149669](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210149669.png)\n\n![image-20240124210213483](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210213483.png)\n\n电机接口考虑使用铜皮开窗，使用香蕉头和电机连接，或直接焊接。\n","source":"_posts/FOC硬件日记.md","raw":"---\ntitle: FOC硬件日记（正在更新）\ndate: 2024-01-20 23:33:48\ntags: \ncategories: FOC学习\ntoc: true\n---\n\n# 1.20\n\n硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（考虑小电流drv8313方案，只支持2A电流，仍然需要加mos驱动，考虑成本选择FD6288Q）。考虑加入电流环，电流检测采用INA199A1DCKR。下图为三相逆变电路及电流检测：\n\n![image-20240120234842699](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120234842699.png)\n\n存在验证的问题：\n\n问题1：FD6288官方手册外围电路中需要增加自举电阻，参考开源方案并没有加入自举电阻，\n\n问题2：电流检测放在半桥的下桥接地，理论上放在哪儿无影响\n\n问题3：电流检测压差采用分压电阻得到1.65V，参考STM32F103C的FOC方案设计，C系列无VREF\n\n---\n\n单片机选型使用STM32F103ZET6（理论上做6路FOC电机都没问题，大炮打蚊子），最初选型考虑STM32G和STM32F4系列，最终由于价格和学习基础理论，采用ZET6（主要因为手头有剩的）。单片机VREF采用3.3V，可能会出现精度问题，暂不考虑。电源设计如下：\n\n![image-20240120235458613](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120235458613.png)\n\n电路中5V仅作为FD6288Q芯片供电，为了电路简单，使用AMS1117（手头有剩的），MCU和其他电路的3.3V区分，分别使用两个RT9013稳压。完整电路还包括显示，串口，交互按键，暂未完成。\n\n# 1.22\n\n参考柠檬FOC项目，又看到开源博主说FD6288的最低供电为12V，但是看芯片手册输入电压为4~24V，原STC无感电路设计采用5V，电机高速长时间运行时，ams1117处于温热状态，考虑更换为buck电路：\n\n![image-20240122230156017](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240122230156017.png)\n\nFD6288Q仍然使用5V供电。\n\n# 1.24\n\n完成原理图设计和PCB大致布局，完善USB串口，交互按键和LED指示灯。完整原理图如下：\n\n![image-20240124210149669](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210149669.png)\n\n![image-20240124210213483](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210213483.png)\n\n电机接口考虑使用铜皮开窗，使用香蕉头和电机连接，或直接焊接。\n","slug":"FOC硬件日记","published":1,"updated":"2024-07-05T16:06:37.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj1000804vr33ed34so","content":"<h1 id=\"1-20\"><a href=\"#1-20\" class=\"headerlink\" title=\"1.20\"></a>1.20</h1><p>硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（考虑小电流drv8313方案，只支持2A电流，仍然需要加mos驱动，考虑成本选择FD6288Q）。考虑加入电流环，电流检测采用INA199A1DCKR。下图为三相逆变电路及电流检测：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120234842699.png\" alt=\"image-20240120234842699\"></p>\n<p>存在验证的问题：</p>\n<p>问题1：FD6288官方手册外围电路中需要增加自举电阻，参考开源方案并没有加入自举电阻，</p>\n<p>问题2：电流检测放在半桥的下桥接地，理论上放在哪儿无影响</p>\n<p>问题3：电流检测压差采用分压电阻得到1.65V，参考STM32F103C的FOC方案设计，C系列无VREF</p>\n<hr>\n<p>单片机选型使用STM32F103ZET6（理论上做6路FOC电机都没问题，大炮打蚊子），最初选型考虑STM32G和STM32F4系列，最终由于价格和学习基础理论，采用ZET6（主要因为手头有剩的）。单片机VREF采用3.3V，可能会出现精度问题，暂不考虑。电源设计如下：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120235458613.png\" alt=\"image-20240120235458613\"></p>\n<p>电路中5V仅作为FD6288Q芯片供电，为了电路简单，使用AMS1117（手头有剩的），MCU和其他电路的3.3V区分，分别使用两个RT9013稳压。完整电路还包括显示，串口，交互按键，暂未完成。</p>\n<h1 id=\"1-22\"><a href=\"#1-22\" class=\"headerlink\" title=\"1.22\"></a>1.22</h1><p>参考柠檬FOC项目，又看到开源博主说FD6288的最低供电为12V，但是看芯片手册输入电压为4~24V，原STC无感电路设计采用5V，电机高速长时间运行时，ams1117处于温热状态，考虑更换为buck电路：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240122230156017.png\" alt=\"image-20240122230156017\"></p>\n<p>FD6288Q仍然使用5V供电。</p>\n<h1 id=\"1-24\"><a href=\"#1-24\" class=\"headerlink\" title=\"1.24\"></a>1.24</h1><p>完成原理图设计和PCB大致布局，完善USB串口，交互按键和LED指示灯。完整原理图如下：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210149669.png\" alt=\"image-20240124210149669\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210213483.png\" alt=\"image-20240124210213483\"></p>\n<p>电机接口考虑使用铜皮开窗，使用香蕉头和电机连接，或直接焊接。</p>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"1-20\"><a href=\"#1-20\" class=\"headerlink\" title=\"1.20\"></a>1.20</h1><p>硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（考虑小电流drv8313方案，只支持2A电流，仍然需要加mos驱动，考虑成本选择FD6288Q）。考虑加入电流环，电流检测采用INA199A1DCKR。下图为三相逆变电路及电流检测：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120234842699.png\" alt=\"image-20240120234842699\"></p>\n<p>存在验证的问题：</p>\n<p>问题1：FD6288官方手册外围电路中需要增加自举电阻，参考开源方案并没有加入自举电阻，</p>\n<p>问题2：电流检测放在半桥的下桥接地，理论上放在哪儿无影响</p>\n<p>问题3：电流检测压差采用分压电阻得到1.65V，参考STM32F103C的FOC方案设计，C系列无VREF</p>\n<hr>\n<p>单片机选型使用STM32F103ZET6（理论上做6路FOC电机都没问题，大炮打蚊子），最初选型考虑STM32G和STM32F4系列，最终由于价格和学习基础理论，采用ZET6（主要因为手头有剩的）。单片机VREF采用3.3V，可能会出现精度问题，暂不考虑。电源设计如下：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120235458613.png\" alt=\"image-20240120235458613\"></p>\n<p>电路中5V仅作为FD6288Q芯片供电，为了电路简单，使用AMS1117（手头有剩的），MCU和其他电路的3.3V区分，分别使用两个RT9013稳压。完整电路还包括显示，串口，交互按键，暂未完成。</p>\n<h1 id=\"1-22\"><a href=\"#1-22\" class=\"headerlink\" title=\"1.22\"></a>1.22</h1><p>参考柠檬FOC项目，又看到开源博主说FD6288的最低供电为12V，但是看芯片手册输入电压为4~24V，原STC无感电路设计采用5V，电机高速长时间运行时，ams1117处于温热状态，考虑更换为buck电路：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240122230156017.png\" alt=\"image-20240122230156017\"></p>\n<p>FD6288Q仍然使用5V供电。</p>\n<h1 id=\"1-24\"><a href=\"#1-24\" class=\"headerlink\" title=\"1.24\"></a>1.24</h1><p>完成原理图设计和PCB大致布局，完善USB串口，交互按键和LED指示灯。完整原理图如下：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210149669.png\" alt=\"image-20240124210149669\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210213483.png\" alt=\"image-20240124210213483\"></p>\n<p>电机接口考虑使用铜皮开窗，使用香蕉头和电机连接，或直接焊接。</p>\n"},{"title":"Linux嵌入式1-启动开发环境","date":"2024-01-14T03:16:38.000Z","toc":true,"_content":"\n# 应用开发环境搭建：\n\n开发板移植uboot：完成网络移植\n\n服务器安装nfs和tftp\n\nwindows、服务器、开发板需要处在同一网段，使用虚拟需要添加网卡开启桥接模式，***关闭防火墙***\n\n挂载zImage和dtb之前先使用nfs和tftp测试\n\n完成配置后 uboot在emmc中，zImage和dtb使用tftp挂载，根文件系统使用nfs挂载\n\n最后验证交叉编译工具\n\n\n\n安装nfs过程出现的问题，挂载失败，检查是服务器nfs版本为4，uboot只支持2（原文链接：https://blog.csdn.net/qq_42212668/article/details/125250873）\n\n![image-20231007210103881](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231007210103881.png)\n\n## 配置过程中的常用命令：\n\n~~~shell\nsetenv ipaddr 192.168.1.50\nsetenv ethaddr b8:ae:1d:01:00:00\nsetenv gatewayip 192.168.1.1\nsetenv netmask 255.255.255.0\nsetenv serverip 192.168.1.253\nsaveenv\n\nnfs启动文件系统：\nsetenv bootargs 'console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.1.107:/home/wujing/linux/nfs/alientrootfs,proto=tcp rw ip=192.168.1.50:192.168.1.107:192.168.1.1:255.255.255.0::eth0:off'\n\ntftp挂载\nsetenv bootcmd 'tftp 80800000 zImage; tftp 83000000 imx6ull-14x14-emmc-4.3-800x480-c.dtb; bootz 80800000 - 83000000'\n~~~\n\n\n\n# 应用开发环境启动：\n\n启动Ubuntu，mobaX连接开发板，检查Ubuntu的IP地址和开发板uboot中设置的tftp服务器地址是否一致，不一致使用以下命令修改：\n\n```shell\nsetenv serverip 192.168.1.253\n```\n\n![image-20240114122139754](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114122139754.png)\n\n**检查虚拟机网络设置，VMnet1为net模式，用来虚拟机上网，VMnet0为桥接模式，用来连接开发板挂载。**\n\n检查无误后在uboot中输入boot启动\n\n\n\nnfs挂载根文件系统目录 ：/home/wujing/linux/nfs/alientrootfs\n\n应用程序源码存放目录：/home/wujing/Desktop/alitenk-test\n\n\n\n常用命令：\n\n```uboot\nprintenv #查看环境变量\nboot #启动linux\n```\n\n使能Ubuntu环境变量\n\n```shell\nsource /opt/fsl-imx-x11/4.1.15-2.1.0/environment-setup-cortexa7hf-neon-poky-linux-gnueabi\n```\n\n\n\n","source":"_posts/Linux嵌入式1-基础知识.md","raw":"---\ntitle: Linux嵌入式1-启动开发环境\ndate: 2024-01-14 11:16:38\ntags:\ncategories: Linux嵌入式学习\ntoc: true\n---\n\n# 应用开发环境搭建：\n\n开发板移植uboot：完成网络移植\n\n服务器安装nfs和tftp\n\nwindows、服务器、开发板需要处在同一网段，使用虚拟需要添加网卡开启桥接模式，***关闭防火墙***\n\n挂载zImage和dtb之前先使用nfs和tftp测试\n\n完成配置后 uboot在emmc中，zImage和dtb使用tftp挂载，根文件系统使用nfs挂载\n\n最后验证交叉编译工具\n\n\n\n安装nfs过程出现的问题，挂载失败，检查是服务器nfs版本为4，uboot只支持2（原文链接：https://blog.csdn.net/qq_42212668/article/details/125250873）\n\n![image-20231007210103881](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231007210103881.png)\n\n## 配置过程中的常用命令：\n\n~~~shell\nsetenv ipaddr 192.168.1.50\nsetenv ethaddr b8:ae:1d:01:00:00\nsetenv gatewayip 192.168.1.1\nsetenv netmask 255.255.255.0\nsetenv serverip 192.168.1.253\nsaveenv\n\nnfs启动文件系统：\nsetenv bootargs 'console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.1.107:/home/wujing/linux/nfs/alientrootfs,proto=tcp rw ip=192.168.1.50:192.168.1.107:192.168.1.1:255.255.255.0::eth0:off'\n\ntftp挂载\nsetenv bootcmd 'tftp 80800000 zImage; tftp 83000000 imx6ull-14x14-emmc-4.3-800x480-c.dtb; bootz 80800000 - 83000000'\n~~~\n\n\n\n# 应用开发环境启动：\n\n启动Ubuntu，mobaX连接开发板，检查Ubuntu的IP地址和开发板uboot中设置的tftp服务器地址是否一致，不一致使用以下命令修改：\n\n```shell\nsetenv serverip 192.168.1.253\n```\n\n![image-20240114122139754](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114122139754.png)\n\n**检查虚拟机网络设置，VMnet1为net模式，用来虚拟机上网，VMnet0为桥接模式，用来连接开发板挂载。**\n\n检查无误后在uboot中输入boot启动\n\n\n\nnfs挂载根文件系统目录 ：/home/wujing/linux/nfs/alientrootfs\n\n应用程序源码存放目录：/home/wujing/Desktop/alitenk-test\n\n\n\n常用命令：\n\n```uboot\nprintenv #查看环境变量\nboot #启动linux\n```\n\n使能Ubuntu环境变量\n\n```shell\nsource /opt/fsl-imx-x11/4.1.15-2.1.0/environment-setup-cortexa7hf-neon-poky-linux-gnueabi\n```\n\n\n\n","slug":"Linux嵌入式1-基础知识","published":1,"updated":"2024-07-05T16:06:32.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj2000a04vrckik1fq4","content":"<h1 id=\"应用开发环境搭建：\"><a href=\"#应用开发环境搭建：\" class=\"headerlink\" title=\"应用开发环境搭建：\"></a>应用开发环境搭建：</h1><p>开发板移植uboot：完成网络移植</p>\n<p>服务器安装nfs和tftp</p>\n<p>windows、服务器、开发板需要处在同一网段，使用虚拟需要添加网卡开启桥接模式，<em><strong>关闭防火墙</strong></em></p>\n<p>挂载zImage和dtb之前先使用nfs和tftp测试</p>\n<p>完成配置后 uboot在emmc中，zImage和dtb使用tftp挂载，根文件系统使用nfs挂载</p>\n<p>最后验证交叉编译工具</p>\n<p>安装nfs过程出现的问题，挂载失败，检查是服务器nfs版本为4，uboot只支持2（原文链接：<a href=\"https://blog.csdn.net/qq_42212668/article/details/125250873%EF%BC%89\">https://blog.csdn.net/qq_42212668/article/details/125250873）</a></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231007210103881.png\" alt=\"image-20231007210103881\"></p>\n<h2 id=\"配置过程中的常用命令：\"><a href=\"#配置过程中的常用命令：\" class=\"headerlink\" title=\"配置过程中的常用命令：\"></a>配置过程中的常用命令：</h2><pre class=\" language-shell\"><code class=\"language-shell\">setenv ipaddr 192.168.1.50\nsetenv ethaddr b8:ae:1d:01:00:00\nsetenv gatewayip 192.168.1.1\nsetenv netmask 255.255.255.0\nsetenv serverip 192.168.1.253\nsaveenv\n\nnfs启动文件系统：\nsetenv bootargs 'console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.1.107:/home/wujing/linux/nfs/alientrootfs,proto=tcp rw ip=192.168.1.50:192.168.1.107:192.168.1.1:255.255.255.0::eth0:off'\n\ntftp挂载\nsetenv bootcmd 'tftp 80800000 zImage; tftp 83000000 imx6ull-14x14-emmc-4.3-800x480-c.dtb; bootz 80800000 - 83000000'\n</code></pre>\n<h1 id=\"应用开发环境启动：\"><a href=\"#应用开发环境启动：\" class=\"headerlink\" title=\"应用开发环境启动：\"></a>应用开发环境启动：</h1><p>启动Ubuntu，mobaX连接开发板，检查Ubuntu的IP地址和开发板uboot中设置的tftp服务器地址是否一致，不一致使用以下命令修改：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">setenv serverip 192.168.1.253\n</code></pre>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114122139754.png\" alt=\"image-20240114122139754\"></p>\n<p><strong>检查虚拟机网络设置，VMnet1为net模式，用来虚拟机上网，VMnet0为桥接模式，用来连接开发板挂载。</strong></p>\n<p>检查无误后在uboot中输入boot启动</p>\n<p>nfs挂载根文件系统目录 ：&#x2F;home&#x2F;wujing&#x2F;linux&#x2F;nfs&#x2F;alientrootfs</p>\n<p>应用程序源码存放目录：&#x2F;home&#x2F;wujing&#x2F;Desktop&#x2F;alitenk-test</p>\n<p>常用命令：</p>\n<pre class=\" language-uboot\"><code class=\"language-uboot\">printenv #查看环境变量\nboot #启动linux\n</code></pre>\n<p>使能Ubuntu环境变量</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">source /opt/fsl-imx-x11/4.1.15-2.1.0/environment-setup-cortexa7hf-neon-poky-linux-gnueabi\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"应用开发环境搭建：\"><a href=\"#应用开发环境搭建：\" class=\"headerlink\" title=\"应用开发环境搭建：\"></a>应用开发环境搭建：</h1><p>开发板移植uboot：完成网络移植</p>\n<p>服务器安装nfs和tftp</p>\n<p>windows、服务器、开发板需要处在同一网段，使用虚拟需要添加网卡开启桥接模式，<em><strong>关闭防火墙</strong></em></p>\n<p>挂载zImage和dtb之前先使用nfs和tftp测试</p>\n<p>完成配置后 uboot在emmc中，zImage和dtb使用tftp挂载，根文件系统使用nfs挂载</p>\n<p>最后验证交叉编译工具</p>\n<p>安装nfs过程出现的问题，挂载失败，检查是服务器nfs版本为4，uboot只支持2（原文链接：<a href=\"https://blog.csdn.net/qq_42212668/article/details/125250873%EF%BC%89\">https://blog.csdn.net/qq_42212668/article/details/125250873）</a></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231007210103881.png\" alt=\"image-20231007210103881\"></p>\n<h2 id=\"配置过程中的常用命令：\"><a href=\"#配置过程中的常用命令：\" class=\"headerlink\" title=\"配置过程中的常用命令：\"></a>配置过程中的常用命令：</h2><pre><code class=\"shell\">setenv ipaddr 192.168.1.50\nsetenv ethaddr b8:ae:1d:01:00:00\nsetenv gatewayip 192.168.1.1\nsetenv netmask 255.255.255.0\nsetenv serverip 192.168.1.253\nsaveenv\n\nnfs启动文件系统：\nsetenv bootargs &#39;console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.1.107:/home/wujing/linux/nfs/alientrootfs,proto=tcp rw ip=192.168.1.50:192.168.1.107:192.168.1.1:255.255.255.0::eth0:off&#39;\n\ntftp挂载\nsetenv bootcmd &#39;tftp 80800000 zImage; tftp 83000000 imx6ull-14x14-emmc-4.3-800x480-c.dtb; bootz 80800000 - 83000000&#39;\n</code></pre>\n<h1 id=\"应用开发环境启动：\"><a href=\"#应用开发环境启动：\" class=\"headerlink\" title=\"应用开发环境启动：\"></a>应用开发环境启动：</h1><p>启动Ubuntu，mobaX连接开发板，检查Ubuntu的IP地址和开发板uboot中设置的tftp服务器地址是否一致，不一致使用以下命令修改：</p>\n<pre><code class=\"shell\">setenv serverip 192.168.1.253\n</code></pre>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114122139754.png\" alt=\"image-20240114122139754\"></p>\n<p><strong>检查虚拟机网络设置，VMnet1为net模式，用来虚拟机上网，VMnet0为桥接模式，用来连接开发板挂载。</strong></p>\n<p>检查无误后在uboot中输入boot启动</p>\n<p>nfs挂载根文件系统目录 ：&#x2F;home&#x2F;wujing&#x2F;linux&#x2F;nfs&#x2F;alientrootfs</p>\n<p>应用程序源码存放目录：&#x2F;home&#x2F;wujing&#x2F;Desktop&#x2F;alitenk-test</p>\n<p>常用命令：</p>\n<pre><code class=\"uboot\">printenv #查看环境变量\nboot #启动linux\n</code></pre>\n<p>使能Ubuntu环境变量</p>\n<pre><code class=\"shell\">source /opt/fsl-imx-x11/4.1.15-2.1.0/environment-setup-cortexa7hf-neon-poky-linux-gnueabi\n</code></pre>\n"},{"title":"2024-2-15东至县城","date":"2024-02-15T02:41:49.000Z","toc":true,"_content":"\n![DSC_5401](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5401.jpg)\n\n![DSC_5355](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5355.jpg)\n\n![DSC_5372](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5372.jpg)\n\n![DSC_5347](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5347.jpg)\n\n![DSC_5335](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5335.jpg)\n\n![DSC_5345](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5345.jpg)\n","source":"_posts/2024-2-15东至县城.md","raw":"---\ntitle: 2024-2-15东至县城\ndate: 2024-02-15 10:41:49\ntags:\ncategories: 摄影日记\ntoc: true\n---\n\n![DSC_5401](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5401.jpg)\n\n![DSC_5355](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5355.jpg)\n\n![DSC_5372](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5372.jpg)\n\n![DSC_5347](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5347.jpg)\n\n![DSC_5335](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5335.jpg)\n\n![DSC_5345](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5345.jpg)\n","slug":"2024-2-15东至县城","published":1,"updated":"2024-07-05T16:06:46.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj4000d04vrekvh5w4b","content":"<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5401.jpg\" alt=\"DSC_5401\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5355.jpg\" alt=\"DSC_5355\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5372.jpg\" alt=\"DSC_5372\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5347.jpg\" alt=\"DSC_5347\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5335.jpg\" alt=\"DSC_5335\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5345.jpg\" alt=\"DSC_5345\"></p>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5401.jpg\" alt=\"DSC_5401\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5355.jpg\" alt=\"DSC_5355\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5372.jpg\" alt=\"DSC_5372\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5347.jpg\" alt=\"DSC_5347\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5335.jpg\" alt=\"DSC_5335\"></p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5345.jpg\" alt=\"DSC_5345\"></p>\n"},{"title":"FOC学习笔记","date":"2024-01-13T06:07:09.000Z","toc":true,"_content":"\n# 无刷电机驱动原理\n\nFOC矢量控制\n\n# Park变换\n\n","source":"_posts/FOC学习笔记.md","raw":"---\ntitle: FOC学习笔记\ndate: 2024-01-13 14:07:09\ntags: \ncategories: FOC学习\ntoc: true\n---\n\n# 无刷电机驱动原理\n\nFOC矢量控制\n\n# Park变换\n\n","slug":"FOC学习笔记","published":1,"updated":"2024-07-05T16:06:42.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj4000e04vrg69vhf1m","content":"<h1 id=\"无刷电机驱动原理\"><a href=\"#无刷电机驱动原理\" class=\"headerlink\" title=\"无刷电机驱动原理\"></a>无刷电机驱动原理</h1><p>FOC矢量控制</p>\n<h1 id=\"Park变换\"><a href=\"#Park变换\" class=\"headerlink\" title=\"Park变换\"></a>Park变换</h1>","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"无刷电机驱动原理\"><a href=\"#无刷电机驱动原理\" class=\"headerlink\" title=\"无刷电机驱动原理\"></a>无刷电机驱动原理</h1><p>FOC矢量控制</p>\n<h1 id=\"Park变换\"><a href=\"#Park变换\" class=\"headerlink\" title=\"Park变换\"></a>Park变换</h1>"},{"title":"Linux嵌入式2-GPIO编程","date":"2024-01-14T04:42:33.000Z","toc":true,"_content":"\n### 头文件说明\n\n```c\n<sys/types.h>：该头文件定义了一些基本的系统数据类型，如size_t、time_t等。\n<sys/stat.h>：该头文件定义了一些关于文件状态的函数和宏，如stat()、S_IRUSR等。\n<fcntl.h>：该头文件定义了一些文件控制操作的函数和常量，如open()、O_RDONLY等。\n<unistd.h>：该头文件定义了一些系统调用函数，如read()、write()等。\n```\n\n\n\n### 函数说明\n\n```c\nint access(const char *pathname, int mode);\n/*\nmode 是要检查的权限模式。常用的权限模式有以下几种：\n\nF_OK：用于检查文件或目录是否存在。\nR_OK：用于检查文件或目录是否可读。\nW_OK：用于检查文件或目录是否可写。\nX_OK：用于检查文件或目录是否可执行。\n存在返回0，不存在返回-1\n*/   \n    \nlen = strlen(argv[1]);\n        if(len != write(fd,argv[1],len)){\n\n        }\n/*\nwrite函数向文件写入数据，写入argv[1]字符串，后面接写入的字节数，成功返回写入的字节数\n*/\n```\n\n## 一、GPIO应用编程\n\n### 1、基础属性：\n\ngpio设备目录在/sys/class/gpio中：\n\n![image-20231015142048558](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142048558.png)\n\ngpiochip0~128分别对应i.max6ull的五组gpio1~5，export用来导出指定编号的gpio，加入需要导出GPIO4_IO20，首先需要确定GPIO的编号，GPIO4对应gpiochip96，编号为94+20=114\n\n执行导出命令为echo 94 > export\n\n以导出GPIO0_IO1为例：执行echo 1 > export，会生成一个gpio1的文件夹，里面描述了gpio1的相关信息：\n\n![image-20231015142724436](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142724436.png)\n\n```c\ndirction: IO的方向可以设置为out 和 in\nactive_low: 电平逻辑状态，默认为0，此时1为高电平 0为低电平\nvalue： 电平状态\nedge: 中断触发：none rising falling both分别表示无触发、上升沿、下降沿、边沿触发\n```\n\n### 2、gpio_config函数\n\n```c\n/*\n\tpath：gpioX路径\t/sys/class/gpio/gpio1\n\tattr：需要修改的属性 direction\n\tvalue：修改的具体值\tout\n*/\nint gpio_config(const char *path, const char *attr, const char *val){\n    int fd;\n    int len;\n    char file_path[100];\n    // 拼接字符串\n    sprintf(file_path,\"%s/%s\", path, attr);\n    // 打开文件\n    if (0 > (fd = open(file_path, O_WRONLY)))\n    {\n        perror(\"open gpio error\");\n        close(fd);\n        return -1;\n    }\n    // 向文件写入指定长度的数据\n    len = strlen(val);\n    if (len != write(fd, val, len))\n    {\n        perror(\"write info error\");\n        close(fd);\n        return -1;\n    }\n    close(fd);\n    fprintf(stderr,\"write success!\\n\");\n    return 0;\n}\n// main函数：\n// 判断输入的gpioX是否存在，不存在需要通过写export文件导出IO\nsprintf(gpio_path,\"/sys/class/gpio/gpio%s\",argv[1]);\nif (access(gpio_path,F_OK))\n{\n    int fd;\n    int len;\n    if (0 > (fd = open(\"/sys/class/gpio/export\",O_WRONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n    len = strlen(argv[1]);\n    if(len != write(fd,argv[1],len)){\n        perror(\"write error\");\n        close(fd);\n        exit(-1);\n    }\n    close(fd);\n}\nif(gpio_config(gpio_path,\"direction\", \"in\")){\n    fprintf(stderr,\"write direction error\\n\");\n    exit(-1);\n}\nif(gpio_config(gpio_path,\"active_low\", \"0\")){\n    fprintf(stderr,\"write active_low error\\n\");\n    exit(-1);\n}\nif(gpio_config(gpio_path,\"value\", argv[2])){\n    fprintf(stderr,\"write value error\\n\");\n    exit(-1);\n}\n```\n\n### 3、poll()函数\n\n```c\n// 使用poll()函数实现非阻塞式中断触发\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    // 创建pollfd结构体，描述文件就绪状态\n    struct pollfd pfd;\n    char val;\n    int ret;\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n    sprintf(gpio_path,\"/sys/class/gpio/gpio%s\",argv[1]);\n    if (access(gpio_path,F_OK))\n    {\n        int fd;\n        int len;\n        if (0 > (fd = open(\"/sys/class/gpio/export\",O_WRONLY)))\n        {\n            perror(\"open export error\");\n            exit(-1);\n        }\n        len = strlen(argv[1]);\n        if(len != write(fd,argv[1],len)){\n            perror(\"write error\");\n            close(fd);\n            exit(-1);\n        }\n        close(fd);\n    }\n\n    if(gpio_config(gpio_path,\"direction\", \"in\")){\n        fprintf(stderr,\"write direction error\\n\");\n        exit(-1);\n    }\n    if(gpio_config(gpio_path,\"active_low\", \"0\")){\n        fprintf(stderr,\"write active_low error\\n\");\n        exit(-1);\n    }\n    // 配置为边沿触发\n    if(gpio_config(gpio_path,\"edge\", \"both\")){\n        fprintf(stderr,\"write edge error\\n\");\n        exit(-1);\n    }\n    // 打开IO状态value文件，文件描述符保存在pfd.fd\n    sprintf(file_path,\"%s/%s\", gpio_path, \"value\");\n    if (0 > (pfd.fd = open(file_path,O_RDONLY)))\n    {\n        perror(\"open pfd.fd error\");\n        exit(-1);\n    }\n    \n    pfd.events = POLLPRI;// 只关心高优先级数据可读 中断 只有高优先级才会触发文件转换为就绪态\n    read(pfd.fd, &val, 1);// 读取一次清除状态\n    //轮询读取\n    for (;;)\n    {\n        // 监听pfd文件状态，内部有一个文件描述符 超时时间-1\n        ret = poll(&pfd, 1, -1);\n        if (0 > ret) {\n            perror(\"poll error\");\n            exit(-1);\n        }\n        else if(0 == ret){\n            fprintf(stderr,\"poll time out\");\n            exit(-1);\n        }\n\t\t// 事件触发\n        if (pfd.revents & POLLPRI)\n        {\n            // 因为之前读取过文件，需要移动指针到0\n            if(0 > lseek(pfd.fd, 0, SEEK_SET)){\n                perror(\"lseek error\");\n                exit(-1);\n            }\n\t\t\t// 读取文件\n            if (0 > read(pfd.fd, &val, 1))\n            {\n                perror(\"read pfd.fd error\");\n                exit(-1);\n            }\n            printf(\"get interupt <value=%c>\\n\", val);\n\n        }\n        \n    }\n    \n    exit(0);\n}\n```\n\n","source":"_posts/Linux嵌入式2-GPIO编程.md","raw":"---\ntitle: Linux嵌入式2-GPIO编程\ndate: 2024-01-14 12:42:33\ntags:\ncategories: Linux嵌入式学习\ntoc: true\n---\n\n### 头文件说明\n\n```c\n<sys/types.h>：该头文件定义了一些基本的系统数据类型，如size_t、time_t等。\n<sys/stat.h>：该头文件定义了一些关于文件状态的函数和宏，如stat()、S_IRUSR等。\n<fcntl.h>：该头文件定义了一些文件控制操作的函数和常量，如open()、O_RDONLY等。\n<unistd.h>：该头文件定义了一些系统调用函数，如read()、write()等。\n```\n\n\n\n### 函数说明\n\n```c\nint access(const char *pathname, int mode);\n/*\nmode 是要检查的权限模式。常用的权限模式有以下几种：\n\nF_OK：用于检查文件或目录是否存在。\nR_OK：用于检查文件或目录是否可读。\nW_OK：用于检查文件或目录是否可写。\nX_OK：用于检查文件或目录是否可执行。\n存在返回0，不存在返回-1\n*/   \n    \nlen = strlen(argv[1]);\n        if(len != write(fd,argv[1],len)){\n\n        }\n/*\nwrite函数向文件写入数据，写入argv[1]字符串，后面接写入的字节数，成功返回写入的字节数\n*/\n```\n\n## 一、GPIO应用编程\n\n### 1、基础属性：\n\ngpio设备目录在/sys/class/gpio中：\n\n![image-20231015142048558](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142048558.png)\n\ngpiochip0~128分别对应i.max6ull的五组gpio1~5，export用来导出指定编号的gpio，加入需要导出GPIO4_IO20，首先需要确定GPIO的编号，GPIO4对应gpiochip96，编号为94+20=114\n\n执行导出命令为echo 94 > export\n\n以导出GPIO0_IO1为例：执行echo 1 > export，会生成一个gpio1的文件夹，里面描述了gpio1的相关信息：\n\n![image-20231015142724436](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142724436.png)\n\n```c\ndirction: IO的方向可以设置为out 和 in\nactive_low: 电平逻辑状态，默认为0，此时1为高电平 0为低电平\nvalue： 电平状态\nedge: 中断触发：none rising falling both分别表示无触发、上升沿、下降沿、边沿触发\n```\n\n### 2、gpio_config函数\n\n```c\n/*\n\tpath：gpioX路径\t/sys/class/gpio/gpio1\n\tattr：需要修改的属性 direction\n\tvalue：修改的具体值\tout\n*/\nint gpio_config(const char *path, const char *attr, const char *val){\n    int fd;\n    int len;\n    char file_path[100];\n    // 拼接字符串\n    sprintf(file_path,\"%s/%s\", path, attr);\n    // 打开文件\n    if (0 > (fd = open(file_path, O_WRONLY)))\n    {\n        perror(\"open gpio error\");\n        close(fd);\n        return -1;\n    }\n    // 向文件写入指定长度的数据\n    len = strlen(val);\n    if (len != write(fd, val, len))\n    {\n        perror(\"write info error\");\n        close(fd);\n        return -1;\n    }\n    close(fd);\n    fprintf(stderr,\"write success!\\n\");\n    return 0;\n}\n// main函数：\n// 判断输入的gpioX是否存在，不存在需要通过写export文件导出IO\nsprintf(gpio_path,\"/sys/class/gpio/gpio%s\",argv[1]);\nif (access(gpio_path,F_OK))\n{\n    int fd;\n    int len;\n    if (0 > (fd = open(\"/sys/class/gpio/export\",O_WRONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n    len = strlen(argv[1]);\n    if(len != write(fd,argv[1],len)){\n        perror(\"write error\");\n        close(fd);\n        exit(-1);\n    }\n    close(fd);\n}\nif(gpio_config(gpio_path,\"direction\", \"in\")){\n    fprintf(stderr,\"write direction error\\n\");\n    exit(-1);\n}\nif(gpio_config(gpio_path,\"active_low\", \"0\")){\n    fprintf(stderr,\"write active_low error\\n\");\n    exit(-1);\n}\nif(gpio_config(gpio_path,\"value\", argv[2])){\n    fprintf(stderr,\"write value error\\n\");\n    exit(-1);\n}\n```\n\n### 3、poll()函数\n\n```c\n// 使用poll()函数实现非阻塞式中断触发\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    // 创建pollfd结构体，描述文件就绪状态\n    struct pollfd pfd;\n    char val;\n    int ret;\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n    sprintf(gpio_path,\"/sys/class/gpio/gpio%s\",argv[1]);\n    if (access(gpio_path,F_OK))\n    {\n        int fd;\n        int len;\n        if (0 > (fd = open(\"/sys/class/gpio/export\",O_WRONLY)))\n        {\n            perror(\"open export error\");\n            exit(-1);\n        }\n        len = strlen(argv[1]);\n        if(len != write(fd,argv[1],len)){\n            perror(\"write error\");\n            close(fd);\n            exit(-1);\n        }\n        close(fd);\n    }\n\n    if(gpio_config(gpio_path,\"direction\", \"in\")){\n        fprintf(stderr,\"write direction error\\n\");\n        exit(-1);\n    }\n    if(gpio_config(gpio_path,\"active_low\", \"0\")){\n        fprintf(stderr,\"write active_low error\\n\");\n        exit(-1);\n    }\n    // 配置为边沿触发\n    if(gpio_config(gpio_path,\"edge\", \"both\")){\n        fprintf(stderr,\"write edge error\\n\");\n        exit(-1);\n    }\n    // 打开IO状态value文件，文件描述符保存在pfd.fd\n    sprintf(file_path,\"%s/%s\", gpio_path, \"value\");\n    if (0 > (pfd.fd = open(file_path,O_RDONLY)))\n    {\n        perror(\"open pfd.fd error\");\n        exit(-1);\n    }\n    \n    pfd.events = POLLPRI;// 只关心高优先级数据可读 中断 只有高优先级才会触发文件转换为就绪态\n    read(pfd.fd, &val, 1);// 读取一次清除状态\n    //轮询读取\n    for (;;)\n    {\n        // 监听pfd文件状态，内部有一个文件描述符 超时时间-1\n        ret = poll(&pfd, 1, -1);\n        if (0 > ret) {\n            perror(\"poll error\");\n            exit(-1);\n        }\n        else if(0 == ret){\n            fprintf(stderr,\"poll time out\");\n            exit(-1);\n        }\n\t\t// 事件触发\n        if (pfd.revents & POLLPRI)\n        {\n            // 因为之前读取过文件，需要移动指针到0\n            if(0 > lseek(pfd.fd, 0, SEEK_SET)){\n                perror(\"lseek error\");\n                exit(-1);\n            }\n\t\t\t// 读取文件\n            if (0 > read(pfd.fd, &val, 1))\n            {\n                perror(\"read pfd.fd error\");\n                exit(-1);\n            }\n            printf(\"get interupt <value=%c>\\n\", val);\n\n        }\n        \n    }\n    \n    exit(0);\n}\n```\n\n","slug":"Linux嵌入式2-GPIO编程","published":1,"updated":"2024-07-05T16:06:27.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj5000h04vr5ghg08q4","content":"<h3 id=\"头文件说明\"><a href=\"#头文件说明\" class=\"headerlink\" title=\"头文件说明\"></a>头文件说明</h3><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token operator\">&lt;</span>sys<span class=\"token operator\">/</span>types<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>：该头文件定义了一些基本的系统数据类型，如size_t、time_t等。\n<span class=\"token operator\">&lt;</span>sys<span class=\"token operator\">/</span>stat<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>：该头文件定义了一些关于文件状态的函数和宏，如<span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、S_IRUSR等。\n<span class=\"token operator\">&lt;</span>fcntl<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>：该头文件定义了一些文件控制操作的函数和常量，如<span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、O_RDONLY等。\n<span class=\"token operator\">&lt;</span>unistd<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span>：该头文件定义了一些系统调用函数，如<span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、<span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>等。\n</code></pre>\n<h3 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h3><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">access</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pathname<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\nmode 是要检查的权限模式。常用的权限模式有以下几种：\n\nF_OK：用于检查文件或目录是否存在。\nR_OK：用于检查文件或目录是否可读。\nW_OK：用于检查文件或目录是否可写。\nX_OK：用于检查文件或目录是否可执行。\n存在返回0，不存在返回-1\n*/</span>   \n    \nlen <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">!=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\nwrite函数向文件写入数据，写入argv[1]字符串，后面接写入的字节数，成功返回写入的字节数\n*/</span>\n</code></pre>\n<h2 id=\"一、GPIO应用编程\"><a href=\"#一、GPIO应用编程\" class=\"headerlink\" title=\"一、GPIO应用编程\"></a>一、GPIO应用编程</h2><h3 id=\"1、基础属性：\"><a href=\"#1、基础属性：\" class=\"headerlink\" title=\"1、基础属性：\"></a>1、基础属性：</h3><p>gpio设备目录在&#x2F;sys&#x2F;class&#x2F;gpio中：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142048558.png\" alt=\"image-20231015142048558\"></p>\n<p>gpiochip0<del>128分别对应i.max6ull的五组gpio1</del>5，export用来导出指定编号的gpio，加入需要导出GPIO4_IO20，首先需要确定GPIO的编号，GPIO4对应gpiochip96，编号为94+20&#x3D;114</p>\n<p>执行导出命令为echo 94 &gt; export</p>\n<p>以导出GPIO0_IO1为例：执行echo 1 &gt; export，会生成一个gpio1的文件夹，里面描述了gpio1的相关信息：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142724436.png\" alt=\"image-20231015142724436\"></p>\n<pre class=\" language-c\"><code class=\"language-c\">dirction<span class=\"token punctuation\">:</span> IO的方向可以设置为out 和 in\nactive_low<span class=\"token punctuation\">:</span> 电平逻辑状态，默认为<span class=\"token number\">0</span>，此时<span class=\"token number\">1</span>为高电平 <span class=\"token number\">0</span>为低电平\nvalue： 电平状态\nedge<span class=\"token punctuation\">:</span> 中断触发：none rising falling both分别表示无触发、上升沿、下降沿、边沿触发\n</code></pre>\n<h3 id=\"2、gpio-config函数\"><a href=\"#2、gpio-config函数\" class=\"headerlink\" title=\"2、gpio_config函数\"></a>2、gpio_config函数</h3><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">/*\n    path：gpioX路径\t/sys/class/gpio/gpio1\n    attr：需要修改的属性 direction\n    value：修改的具体值\tout\n*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">gpio_config</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>attr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> file_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 拼接字符串</span>\n    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"%s/%s\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 打开文件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> O_WRONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open gpio error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 向文件写入指定长度的数据</span>\n    len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">!=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write info error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"write success!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// main函数：</span>\n<span class=\"token comment\" spellcheck=\"true\">// 判断输入的gpioX是否存在，不存在需要通过写export文件导出IO</span>\n<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"/sys/class/gpio/gpio%s\"</span><span class=\"token punctuation\">,</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span>F_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sys/class/gpio/export\"</span><span class=\"token punctuation\">,</span>O_WRONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open export error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">!=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gpio_config</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"direction\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"write direction error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gpio_config</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"active_low\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"write active_low error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gpio_config</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"write value error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"3、poll-函数\"><a href=\"#3、poll-函数\" class=\"headerlink\" title=\"3、poll()函数\"></a>3、poll()函数</h3><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">// 使用poll()函数实现非阻塞式中断触发</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> gpio_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> file_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建pollfd结构体，描述文件就绪状态</span>\n    <span class=\"token keyword\">struct</span> pollfd pfd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> argc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"usage:%s &lt;gpio> &lt;value>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"/sys/class/gpio/gpio%s\"</span><span class=\"token punctuation\">,</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">access</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span>F_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sys/class/gpio/export\"</span><span class=\"token punctuation\">,</span>O_WRONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open export error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">!=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"write error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gpio_config</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"direction\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"in\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"write direction error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gpio_config</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"active_low\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"write active_low error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 配置为边沿触发</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gpio_config</span><span class=\"token punctuation\">(</span>gpio_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"edge\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"both\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"write edge error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 打开IO状态value文件，文件描述符保存在pfd.fd</span>\n    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"%s/%s\"</span><span class=\"token punctuation\">,</span> gpio_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>pfd<span class=\"token punctuation\">.</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open pfd.fd error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    pfd<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> POLLPRI<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 只关心高优先级数据可读 中断 只有高优先级才会触发文件转换为就绪态</span>\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>pfd<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 读取一次清除状态</span>\n    <span class=\"token comment\" spellcheck=\"true\">//轮询读取</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 监听pfd文件状态，内部有一个文件描述符 超时时间-1</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pfd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> ret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"poll error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"poll time out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 事件触发</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pfd<span class=\"token punctuation\">.</span>revents <span class=\"token operator\">&amp;</span> POLLPRI<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 因为之前读取过文件，需要移动指针到0</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">lseek</span><span class=\"token punctuation\">(</span>pfd<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> SEEK_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lseek error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 读取文件</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>pfd<span class=\"token punctuation\">.</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read pfd.fd error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get interupt &lt;value=%c>\\n\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h3 id=\"头文件说明\"><a href=\"#头文件说明\" class=\"headerlink\" title=\"头文件说明\"></a>头文件说明</h3><pre><code class=\"c\">&lt;sys/types.h&gt;：该头文件定义了一些基本的系统数据类型，如size_t、time_t等。\n&lt;sys/stat.h&gt;：该头文件定义了一些关于文件状态的函数和宏，如stat()、S_IRUSR等。\n&lt;fcntl.h&gt;：该头文件定义了一些文件控制操作的函数和常量，如open()、O_RDONLY等。\n&lt;unistd.h&gt;：该头文件定义了一些系统调用函数，如read()、write()等。\n</code></pre>\n<h3 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h3><pre><code class=\"c\">int access(const char *pathname, int mode);\n/*\nmode 是要检查的权限模式。常用的权限模式有以下几种：\n\nF_OK：用于检查文件或目录是否存在。\nR_OK：用于检查文件或目录是否可读。\nW_OK：用于检查文件或目录是否可写。\nX_OK：用于检查文件或目录是否可执行。\n存在返回0，不存在返回-1\n*/   \n    \nlen = strlen(argv[1]);\n        if(len != write(fd,argv[1],len))&#123;\n\n        &#125;\n/*\nwrite函数向文件写入数据，写入argv[1]字符串，后面接写入的字节数，成功返回写入的字节数\n*/\n</code></pre>\n<h2 id=\"一、GPIO应用编程\"><a href=\"#一、GPIO应用编程\" class=\"headerlink\" title=\"一、GPIO应用编程\"></a>一、GPIO应用编程</h2><h3 id=\"1、基础属性：\"><a href=\"#1、基础属性：\" class=\"headerlink\" title=\"1、基础属性：\"></a>1、基础属性：</h3><p>gpio设备目录在&#x2F;sys&#x2F;class&#x2F;gpio中：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142048558.png\" alt=\"image-20231015142048558\"></p>\n<p>gpiochip0<del>128分别对应i.max6ull的五组gpio1</del>5，export用来导出指定编号的gpio，加入需要导出GPIO4_IO20，首先需要确定GPIO的编号，GPIO4对应gpiochip96，编号为94+20&#x3D;114</p>\n<p>执行导出命令为echo 94 &gt; export</p>\n<p>以导出GPIO0_IO1为例：执行echo 1 &gt; export，会生成一个gpio1的文件夹，里面描述了gpio1的相关信息：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142724436.png\" alt=\"image-20231015142724436\"></p>\n<pre><code class=\"c\">dirction: IO的方向可以设置为out 和 in\nactive_low: 电平逻辑状态，默认为0，此时1为高电平 0为低电平\nvalue： 电平状态\nedge: 中断触发：none rising falling both分别表示无触发、上升沿、下降沿、边沿触发\n</code></pre>\n<h3 id=\"2、gpio-config函数\"><a href=\"#2、gpio-config函数\" class=\"headerlink\" title=\"2、gpio_config函数\"></a>2、gpio_config函数</h3><pre><code class=\"c\">/*\n    path：gpioX路径\t/sys/class/gpio/gpio1\n    attr：需要修改的属性 direction\n    value：修改的具体值\tout\n*/\nint gpio_config(const char *path, const char *attr, const char *val)&#123;\n    int fd;\n    int len;\n    char file_path[100];\n    // 拼接字符串\n    sprintf(file_path,&quot;%s/%s&quot;, path, attr);\n    // 打开文件\n    if (0 &gt; (fd = open(file_path, O_WRONLY)))\n    &#123;\n        perror(&quot;open gpio error&quot;);\n        close(fd);\n        return -1;\n    &#125;\n    // 向文件写入指定长度的数据\n    len = strlen(val);\n    if (len != write(fd, val, len))\n    &#123;\n        perror(&quot;write info error&quot;);\n        close(fd);\n        return -1;\n    &#125;\n    close(fd);\n    fprintf(stderr,&quot;write success!\\n&quot;);\n    return 0;\n&#125;\n// main函数：\n// 判断输入的gpioX是否存在，不存在需要通过写export文件导出IO\nsprintf(gpio_path,&quot;/sys/class/gpio/gpio%s&quot;,argv[1]);\nif (access(gpio_path,F_OK))\n&#123;\n    int fd;\n    int len;\n    if (0 &gt; (fd = open(&quot;/sys/class/gpio/export&quot;,O_WRONLY)))\n    &#123;\n        perror(&quot;open export error&quot;);\n        exit(-1);\n    &#125;\n    len = strlen(argv[1]);\n    if(len != write(fd,argv[1],len))&#123;\n        perror(&quot;write error&quot;);\n        close(fd);\n        exit(-1);\n    &#125;\n    close(fd);\n&#125;\nif(gpio_config(gpio_path,&quot;direction&quot;, &quot;in&quot;))&#123;\n    fprintf(stderr,&quot;write direction error\\n&quot;);\n    exit(-1);\n&#125;\nif(gpio_config(gpio_path,&quot;active_low&quot;, &quot;0&quot;))&#123;\n    fprintf(stderr,&quot;write active_low error\\n&quot;);\n    exit(-1);\n&#125;\nif(gpio_config(gpio_path,&quot;value&quot;, argv[2]))&#123;\n    fprintf(stderr,&quot;write value error\\n&quot;);\n    exit(-1);\n&#125;\n</code></pre>\n<h3 id=\"3、poll-函数\"><a href=\"#3、poll-函数\" class=\"headerlink\" title=\"3、poll()函数\"></a>3、poll()函数</h3><pre><code class=\"c\">// 使用poll()函数实现非阻塞式中断触发\nint main(int argc, char *argv[])&#123;\n    char gpio_path[100];\n    char file_path[100];\n    // 创建pollfd结构体，描述文件就绪状态\n    struct pollfd pfd;\n    char val;\n    int ret;\n    if (2 != argc)\n    &#123;\n        fprintf(stderr,&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\\n&quot;, argv[0]);\n        exit(-1);\n    &#125;\n    sprintf(gpio_path,&quot;/sys/class/gpio/gpio%s&quot;,argv[1]);\n    if (access(gpio_path,F_OK))\n    &#123;\n        int fd;\n        int len;\n        if (0 &gt; (fd = open(&quot;/sys/class/gpio/export&quot;,O_WRONLY)))\n        &#123;\n            perror(&quot;open export error&quot;);\n            exit(-1);\n        &#125;\n        len = strlen(argv[1]);\n        if(len != write(fd,argv[1],len))&#123;\n            perror(&quot;write error&quot;);\n            close(fd);\n            exit(-1);\n        &#125;\n        close(fd);\n    &#125;\n\n    if(gpio_config(gpio_path,&quot;direction&quot;, &quot;in&quot;))&#123;\n        fprintf(stderr,&quot;write direction error\\n&quot;);\n        exit(-1);\n    &#125;\n    if(gpio_config(gpio_path,&quot;active_low&quot;, &quot;0&quot;))&#123;\n        fprintf(stderr,&quot;write active_low error\\n&quot;);\n        exit(-1);\n    &#125;\n    // 配置为边沿触发\n    if(gpio_config(gpio_path,&quot;edge&quot;, &quot;both&quot;))&#123;\n        fprintf(stderr,&quot;write edge error\\n&quot;);\n        exit(-1);\n    &#125;\n    // 打开IO状态value文件，文件描述符保存在pfd.fd\n    sprintf(file_path,&quot;%s/%s&quot;, gpio_path, &quot;value&quot;);\n    if (0 &gt; (pfd.fd = open(file_path,O_RDONLY)))\n    &#123;\n        perror(&quot;open pfd.fd error&quot;);\n        exit(-1);\n    &#125;\n    \n    pfd.events = POLLPRI;// 只关心高优先级数据可读 中断 只有高优先级才会触发文件转换为就绪态\n    read(pfd.fd, &amp;val, 1);// 读取一次清除状态\n    //轮询读取\n    for (;;)\n    &#123;\n        // 监听pfd文件状态，内部有一个文件描述符 超时时间-1\n        ret = poll(&amp;pfd, 1, -1);\n        if (0 &gt; ret) &#123;\n            perror(&quot;poll error&quot;);\n            exit(-1);\n        &#125;\n        else if(0 == ret)&#123;\n            fprintf(stderr,&quot;poll time out&quot;);\n            exit(-1);\n        &#125;\n        // 事件触发\n        if (pfd.revents &amp; POLLPRI)\n        &#123;\n            // 因为之前读取过文件，需要移动指针到0\n            if(0 &gt; lseek(pfd.fd, 0, SEEK_SET))&#123;\n                perror(&quot;lseek error&quot;);\n                exit(-1);\n            &#125;\n            // 读取文件\n            if (0 &gt; read(pfd.fd, &amp;val, 1))\n            &#123;\n                perror(&quot;read pfd.fd error&quot;);\n                exit(-1);\n            &#125;\n            printf(&quot;get interupt &lt;value=%c&gt;\\n&quot;, val);\n\n        &#125;\n        \n    &#125;\n    \n    exit(0);\n&#125;\n</code></pre>\n"},{"title":"Linux嵌入式5-FrameBuffer应用编程","date":"2024-01-31T03:49:08.000Z","toc":true,"_content":"\n# FrameBuffer应用编程\n\n## 1、内存映射\n\n用户程序操作文件的一般方式为调用系统库函数（open，read，write），库函数的流程为拷贝用户数据空间，到内核空间，获取文件句柄，返回用户空间，操作文件时，使用句柄到内核空间找到文件进行修改，每一次操作都是如此。用户空间和内核空间的机制导致数据传输速度不能最大，于是采用**内存映射**的方式。\n\n用户程序可以直接访问内存，内存映射是在内存中申请空间对应物理文件，修改内存的数据会自动同步到物理文件，注意这个同步不是及时的，仍由内核调用，使用open这种库函数也不是及时同步，都是由内核调用同步，内存映射返回的是一个指针，可以直接访问和修改内容。\n\n## 2、LCD应用编程流程\n\n- 打开/dev/fdX设备文件\n- 使用ioctl函数读取LCD参数信息\n- 使用存储映射的方式将屏幕显示缓冲区映射到用户空间\n- 直接读写显示缓冲区进行绘图和显示\n- 完成显示后关闭存储映射，关闭设备文件\n\n## 3、属性结构体介绍\n\n```c\n//显示设备的可变参数参数-一般表示显示屏显示大小，不变参数一般指硬件属性，比如缓冲区宽度\nstruct fb_var_screeninfo {\n\t__u32 xres;\t\t\t/* visible resolution\t\t*/\n\t__u32 yres;\n\t__u32 xres_virtual;\t\t/* virtual resolution\t\t*/\n\t__u32 yres_virtual;\n\t__u32 xoffset;\t\t\t/* offset from virtual to visible */\n\t__u32 yoffset;\t\t\t/* resolution\t\t\t*/\n\n\t__u32 bits_per_pixel;\t\t/* guess what\t\t\t*/\n\t__u32 grayscale;\t\t/* 0 = color, 1 = grayscale,\t*/\n\t\t\t\t\t/* >1 = FOURCC\t\t\t*/\n\tstruct fb_bitfield red;\t\t/* bitfield in fb mem if true color, */\n\tstruct fb_bitfield green;\t/* else only length is significant */\n\tstruct fb_bitfield blue;\n\tstruct fb_bitfield transp;\t/* transparency\t\t\t*/\t\n\n\t__u32 nonstd;\t\t\t/* != 0 Non standard pixel format */\n\n\t__u32 activate;\t\t\t/* see FB_ACTIVATE_*\t\t*/\n\n\t__u32 height;\t\t\t/* height of picture in mm    */\n\t__u32 width;\t\t\t/* width of picture in mm     */\n\n\t__u32 accel_flags;\t\t/* (OBSOLETE) see fb_info.flags */\n\n\t/* Timing: All values in pixclocks, except pixclock (of course) */\n\t__u32 pixclock;\t\t\t/* pixel clock in ps (pico seconds) */\n\t__u32 left_margin;\t\t/* time from sync to picture\t*/\n\t__u32 right_margin;\t\t/* time from picture to sync\t*/\n\t__u32 upper_margin;\t\t/* time from sync to picture\t*/\n\t__u32 lower_margin;\n\t__u32 hsync_len;\t\t/* length of horizontal sync\t*/\n\t__u32 vsync_len;\t\t/* length of vertical sync\t*/\n\t__u32 sync;\t\t\t/* see FB_SYNC_*\t\t*/\n\t__u32 vmode;\t\t\t/* see FB_VMODE_*\t\t*/\n\t__u32 rotate;\t\t\t/* angle we rotate counter clockwise */\n\t__u32 colorspace;\t\t/* colorspace for FOURCC-based modes */\n\t__u32 reserved[4];\t\t/* Reserved for future compatibility */\n};\n//显示设备的固定参数\nstruct fb_fix_screeninfo {\n\tchar id[16];\t\t\t/* identification string eg \"TT Builtin\" */\n\tunsigned long smem_start;\t/* Start of frame buffer mem */\n\t\t\t\t\t/* (physical address) */\n\t__u32 smem_len;\t\t\t/* Length of frame buffer mem */\n\t__u32 type;\t\t\t/* see FB_TYPE_*\t\t*/\n\t__u32 type_aux;\t\t\t/* Interleave for interleaved Planes */\n\t__u32 visual;\t\t\t/* see FB_VISUAL_*\t\t*/ \n\t__u16 xpanstep;\t\t\t/* zero if no hardware panning  */\n\t__u16 ypanstep;\t\t\t/* zero if no hardware panning  */\n\t__u16 ywrapstep;\t\t/* zero if no hardware ywrap    */\n\t__u32 line_length;\t\t/* length of a line in bytes    */\n\tunsigned long mmio_start;\t/* Start of Memory Mapped I/O   */\n\t\t\t\t\t/* (physical address) */\n\t__u32 mmio_len;\t\t\t/* Length of Memory Mapped I/O  */\n\t__u32 accel;\t\t\t/* Indicate to driver which\t*/\n\t\t\t\t\t/*  specific chip/card we have\t*/\n\t__u16 capabilities;\t\t/* see FB_CAP_*\t\t\t*/\n\t__u16 reserved[2];\t\t/* Reserved for future compatibility */\n};\n//读取参数结构体\nioctl(fd, FBIOGET_VSCREENINFO, &fb_var);\nioctl(fd, FBIOGET_FSCREENINFO, &fb_fix);\n```\n\n## 4、存储映射\n\n```c\n#include <sys/mman.h>\nvoid *mmap (void *__addr, size_t __len, int __prot,\n\t\t   int __flags, int __fd, __off_t __offset) __THROW;)\n//地址自动分配，传入NULL，在存储映射中遇到一个问题，显示屏的line_length和显示宽度width不一样，显示屏line_length由硬件缓冲区大小决定，申请内存时，空间大小应该为line_length*height，而不是width*height\nscreen_base = mmap(NULL, screen_size, PROT_WRITE, MAP_SHARED, fd, 0);\n//关闭存储映射\nmunmap(screen_base, screen_size);\n```\n\n## 5、显示效果\n\n```c\n//颜色标准转换\n#define argb8888_to_rgb565(color) ({ \\\n    unsigned int temp = (color);\\\n    ((temp & 0xF80000UL) >> 8) | \\\n    ((temp & 0xFC00UL) >> 5) | \\\n    ((temp & 0xF8UL) >> 3); \\\n})\n```\n\n![8118a23003076a7df800a48e2338f7d](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/8118a23003076a7df800a48e2338f7d.jpg)\n\n## 6、程序源码\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n#include <sys/mman.h>\n#include <linux/fb.h>\n\n#define argb8888_to_rgb565(color) ({ \\\n    unsigned int temp = (color);\\\n    ((temp & 0xF80000UL) >> 8) | \\\n    ((temp & 0xFC00UL) >> 5) | \\\n    ((temp & 0xF8UL) >> 3); \\\n})\n\nstatic int width;\nstatic int height;\nstatic unsigned short *screen_base = NULL;\n// 打点\nstatic void lcd_draw_point(unsigned int x, unsigned int y, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    if(x>=width)\n        x = width-1;\n    if(y>=height)\n        y = height-1;\n    screen_base[y*width +x] = rgb565_color;\n}\n// 画线\nstatic void lcd_draw_line(unsigned int x, unsigned int y, int dir, unsigned int length, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    unsigned int end;\n    unsigned long temp;\n    if(x>=width)\n        x = width-1;\n    if(y>=height)\n        y = height-1;\n\n    temp = y*width +x;\n\n    if (dir){\n        end = x + length -1;\n        if(end>=width)\n            end = width-1;\n        for(; x<=end; x++, temp++)\n            screen_base[temp] = rgb565_color;\n    }\n    else{\n        end = y + length -1;\n        if(end>=height)\n            end = height-1;\n        for(; y<end; y++, temp+=width)\n            screen_base[temp] = rgb565_color;\n    }\n    \n}\n// 画矩形\nstatic void lcd_draw_rectangle(unsigned int start_x, unsigned int end_x, unsigned int start_y, unsigned int end_y, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    int x_len = end_x - start_x + 1;\n    int y_len = end_y - start_y - 1;\n\n    lcd_draw_line(start_x, start_y, 1, x_len, color);\n    lcd_draw_line(start_x, end_y, 1, x_len, color);\n    lcd_draw_line(start_x, start_y+1, 0, y_len, color);\n    lcd_draw_line(end_x, start_y+1, 0, y_len, color);\n}\n//区域填充\nstatic void lcd_fill(unsigned int start_x, unsigned int end_x, unsigned int start_y, unsigned int end_y, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    int x_len = end_x - start_x + 1;\n    for(; start_y<=end_y; start_y++)\n        lcd_draw_line(start_x, start_y, 1, x_len, color);\n}\n\nint main(int argc, char *argv[]){\n\n    struct fb_fix_screeninfo fix_info;\n    struct fb_var_screeninfo var_info;\n    unsigned int screen_size;\n    int fd;\n\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <event>\\n\", argv[0]);\n        exit(-1);\n    }\n\n    if (0 > (fd = open(argv[1],O_RDWR)))\n    {\n        perror(\"open error\");\n        exit(-1);\n    }\n\n    if(0 > ioctl(fd, FBIOGET_VSCREENINFO, &var_info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    } \n    if(0 > ioctl(fd, FBIOGET_FSCREENINFO, &fix_info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n    screen_size = fix_info.line_length * var_info.yres;\n    width = var_info.xres;\n    height = var_info.yres;\n    printf(\"frame config x:%d, y:%d\\n\", var_info.xres, var_info.yres);\n    printf(\"frame config size:%d\\n\", fix_info.line_length);\n\n    screen_base = mmap(NULL, screen_size, PROT_WRITE, MAP_SHARED, fd, 0);\n\n    if(MAP_FAILED == (void *)screen_base){\n        perror(\"mmap error\");\n        close(fd);\n        exit(EXIT_FAILURE);\n    }\n    /* 画正方形方块 */\n    int w = height * 0.25;//方块的宽度为 1/4 屏幕高度\n    lcd_fill(0, width-1, 0, height-1, 0x0); //清屏（屏幕显示黑色）\n    lcd_fill(0, w, 0, w, 0xFF0000); //红色方块\n    lcd_fill(width-w, width-1, 0, w, 0xFF00); //绿色方块\n    lcd_fill(0, w, height-w, height-1, 0xFF); //蓝色方块\n    lcd_fill(width-w, width-1, height-w, height-1, 0xFFFF00);//黄色方块\n    /* 画线: 十字交叉线 */\n    lcd_draw_line(0, height * 0.5, 1, width, 0xFFFFFF);//白色线\n    lcd_draw_line(width * 0.5, 0, 0, height, 0xFFFFFF);//白色线\n    /* 画矩形 */\n    unsigned int s_x, s_y, e_x, e_y;\n    s_x = 0.25 * width;\n    s_y = w;\n    e_x = width - s_x;\n    e_y = height - s_y;\n    for ( ; (s_x <= e_x) && (s_y <= e_y);\n    s_x+=5, s_y+=5, e_x-=5, e_y-=5)\n    lcd_draw_rectangle(s_x, e_x, s_y, e_y, 0xFFFFFF);\n\n    printf(\"frame draw over1\\n\");\n    munmap(screen_base, screen_size);\n    close(fd);\n\n    exit(0);\n}\n```\n\n","source":"_posts/Linux嵌入式5-FrameBuffer应用编程.md","raw":"---\ntitle: Linux嵌入式5-FrameBuffer应用编程\ndate: 2024-01-31 11:49:08\ntags:\ncategories: Linux嵌入式学习\ntoc: true\n---\n\n# FrameBuffer应用编程\n\n## 1、内存映射\n\n用户程序操作文件的一般方式为调用系统库函数（open，read，write），库函数的流程为拷贝用户数据空间，到内核空间，获取文件句柄，返回用户空间，操作文件时，使用句柄到内核空间找到文件进行修改，每一次操作都是如此。用户空间和内核空间的机制导致数据传输速度不能最大，于是采用**内存映射**的方式。\n\n用户程序可以直接访问内存，内存映射是在内存中申请空间对应物理文件，修改内存的数据会自动同步到物理文件，注意这个同步不是及时的，仍由内核调用，使用open这种库函数也不是及时同步，都是由内核调用同步，内存映射返回的是一个指针，可以直接访问和修改内容。\n\n## 2、LCD应用编程流程\n\n- 打开/dev/fdX设备文件\n- 使用ioctl函数读取LCD参数信息\n- 使用存储映射的方式将屏幕显示缓冲区映射到用户空间\n- 直接读写显示缓冲区进行绘图和显示\n- 完成显示后关闭存储映射，关闭设备文件\n\n## 3、属性结构体介绍\n\n```c\n//显示设备的可变参数参数-一般表示显示屏显示大小，不变参数一般指硬件属性，比如缓冲区宽度\nstruct fb_var_screeninfo {\n\t__u32 xres;\t\t\t/* visible resolution\t\t*/\n\t__u32 yres;\n\t__u32 xres_virtual;\t\t/* virtual resolution\t\t*/\n\t__u32 yres_virtual;\n\t__u32 xoffset;\t\t\t/* offset from virtual to visible */\n\t__u32 yoffset;\t\t\t/* resolution\t\t\t*/\n\n\t__u32 bits_per_pixel;\t\t/* guess what\t\t\t*/\n\t__u32 grayscale;\t\t/* 0 = color, 1 = grayscale,\t*/\n\t\t\t\t\t/* >1 = FOURCC\t\t\t*/\n\tstruct fb_bitfield red;\t\t/* bitfield in fb mem if true color, */\n\tstruct fb_bitfield green;\t/* else only length is significant */\n\tstruct fb_bitfield blue;\n\tstruct fb_bitfield transp;\t/* transparency\t\t\t*/\t\n\n\t__u32 nonstd;\t\t\t/* != 0 Non standard pixel format */\n\n\t__u32 activate;\t\t\t/* see FB_ACTIVATE_*\t\t*/\n\n\t__u32 height;\t\t\t/* height of picture in mm    */\n\t__u32 width;\t\t\t/* width of picture in mm     */\n\n\t__u32 accel_flags;\t\t/* (OBSOLETE) see fb_info.flags */\n\n\t/* Timing: All values in pixclocks, except pixclock (of course) */\n\t__u32 pixclock;\t\t\t/* pixel clock in ps (pico seconds) */\n\t__u32 left_margin;\t\t/* time from sync to picture\t*/\n\t__u32 right_margin;\t\t/* time from picture to sync\t*/\n\t__u32 upper_margin;\t\t/* time from sync to picture\t*/\n\t__u32 lower_margin;\n\t__u32 hsync_len;\t\t/* length of horizontal sync\t*/\n\t__u32 vsync_len;\t\t/* length of vertical sync\t*/\n\t__u32 sync;\t\t\t/* see FB_SYNC_*\t\t*/\n\t__u32 vmode;\t\t\t/* see FB_VMODE_*\t\t*/\n\t__u32 rotate;\t\t\t/* angle we rotate counter clockwise */\n\t__u32 colorspace;\t\t/* colorspace for FOURCC-based modes */\n\t__u32 reserved[4];\t\t/* Reserved for future compatibility */\n};\n//显示设备的固定参数\nstruct fb_fix_screeninfo {\n\tchar id[16];\t\t\t/* identification string eg \"TT Builtin\" */\n\tunsigned long smem_start;\t/* Start of frame buffer mem */\n\t\t\t\t\t/* (physical address) */\n\t__u32 smem_len;\t\t\t/* Length of frame buffer mem */\n\t__u32 type;\t\t\t/* see FB_TYPE_*\t\t*/\n\t__u32 type_aux;\t\t\t/* Interleave for interleaved Planes */\n\t__u32 visual;\t\t\t/* see FB_VISUAL_*\t\t*/ \n\t__u16 xpanstep;\t\t\t/* zero if no hardware panning  */\n\t__u16 ypanstep;\t\t\t/* zero if no hardware panning  */\n\t__u16 ywrapstep;\t\t/* zero if no hardware ywrap    */\n\t__u32 line_length;\t\t/* length of a line in bytes    */\n\tunsigned long mmio_start;\t/* Start of Memory Mapped I/O   */\n\t\t\t\t\t/* (physical address) */\n\t__u32 mmio_len;\t\t\t/* Length of Memory Mapped I/O  */\n\t__u32 accel;\t\t\t/* Indicate to driver which\t*/\n\t\t\t\t\t/*  specific chip/card we have\t*/\n\t__u16 capabilities;\t\t/* see FB_CAP_*\t\t\t*/\n\t__u16 reserved[2];\t\t/* Reserved for future compatibility */\n};\n//读取参数结构体\nioctl(fd, FBIOGET_VSCREENINFO, &fb_var);\nioctl(fd, FBIOGET_FSCREENINFO, &fb_fix);\n```\n\n## 4、存储映射\n\n```c\n#include <sys/mman.h>\nvoid *mmap (void *__addr, size_t __len, int __prot,\n\t\t   int __flags, int __fd, __off_t __offset) __THROW;)\n//地址自动分配，传入NULL，在存储映射中遇到一个问题，显示屏的line_length和显示宽度width不一样，显示屏line_length由硬件缓冲区大小决定，申请内存时，空间大小应该为line_length*height，而不是width*height\nscreen_base = mmap(NULL, screen_size, PROT_WRITE, MAP_SHARED, fd, 0);\n//关闭存储映射\nmunmap(screen_base, screen_size);\n```\n\n## 5、显示效果\n\n```c\n//颜色标准转换\n#define argb8888_to_rgb565(color) ({ \\\n    unsigned int temp = (color);\\\n    ((temp & 0xF80000UL) >> 8) | \\\n    ((temp & 0xFC00UL) >> 5) | \\\n    ((temp & 0xF8UL) >> 3); \\\n})\n```\n\n![8118a23003076a7df800a48e2338f7d](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/8118a23003076a7df800a48e2338f7d.jpg)\n\n## 6、程序源码\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n#include <sys/mman.h>\n#include <linux/fb.h>\n\n#define argb8888_to_rgb565(color) ({ \\\n    unsigned int temp = (color);\\\n    ((temp & 0xF80000UL) >> 8) | \\\n    ((temp & 0xFC00UL) >> 5) | \\\n    ((temp & 0xF8UL) >> 3); \\\n})\n\nstatic int width;\nstatic int height;\nstatic unsigned short *screen_base = NULL;\n// 打点\nstatic void lcd_draw_point(unsigned int x, unsigned int y, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    if(x>=width)\n        x = width-1;\n    if(y>=height)\n        y = height-1;\n    screen_base[y*width +x] = rgb565_color;\n}\n// 画线\nstatic void lcd_draw_line(unsigned int x, unsigned int y, int dir, unsigned int length, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    unsigned int end;\n    unsigned long temp;\n    if(x>=width)\n        x = width-1;\n    if(y>=height)\n        y = height-1;\n\n    temp = y*width +x;\n\n    if (dir){\n        end = x + length -1;\n        if(end>=width)\n            end = width-1;\n        for(; x<=end; x++, temp++)\n            screen_base[temp] = rgb565_color;\n    }\n    else{\n        end = y + length -1;\n        if(end>=height)\n            end = height-1;\n        for(; y<end; y++, temp+=width)\n            screen_base[temp] = rgb565_color;\n    }\n    \n}\n// 画矩形\nstatic void lcd_draw_rectangle(unsigned int start_x, unsigned int end_x, unsigned int start_y, unsigned int end_y, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    int x_len = end_x - start_x + 1;\n    int y_len = end_y - start_y - 1;\n\n    lcd_draw_line(start_x, start_y, 1, x_len, color);\n    lcd_draw_line(start_x, end_y, 1, x_len, color);\n    lcd_draw_line(start_x, start_y+1, 0, y_len, color);\n    lcd_draw_line(end_x, start_y+1, 0, y_len, color);\n}\n//区域填充\nstatic void lcd_fill(unsigned int start_x, unsigned int end_x, unsigned int start_y, unsigned int end_y, unsigned int color){\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    int x_len = end_x - start_x + 1;\n    for(; start_y<=end_y; start_y++)\n        lcd_draw_line(start_x, start_y, 1, x_len, color);\n}\n\nint main(int argc, char *argv[]){\n\n    struct fb_fix_screeninfo fix_info;\n    struct fb_var_screeninfo var_info;\n    unsigned int screen_size;\n    int fd;\n\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <event>\\n\", argv[0]);\n        exit(-1);\n    }\n\n    if (0 > (fd = open(argv[1],O_RDWR)))\n    {\n        perror(\"open error\");\n        exit(-1);\n    }\n\n    if(0 > ioctl(fd, FBIOGET_VSCREENINFO, &var_info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    } \n    if(0 > ioctl(fd, FBIOGET_FSCREENINFO, &fix_info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n    screen_size = fix_info.line_length * var_info.yres;\n    width = var_info.xres;\n    height = var_info.yres;\n    printf(\"frame config x:%d, y:%d\\n\", var_info.xres, var_info.yres);\n    printf(\"frame config size:%d\\n\", fix_info.line_length);\n\n    screen_base = mmap(NULL, screen_size, PROT_WRITE, MAP_SHARED, fd, 0);\n\n    if(MAP_FAILED == (void *)screen_base){\n        perror(\"mmap error\");\n        close(fd);\n        exit(EXIT_FAILURE);\n    }\n    /* 画正方形方块 */\n    int w = height * 0.25;//方块的宽度为 1/4 屏幕高度\n    lcd_fill(0, width-1, 0, height-1, 0x0); //清屏（屏幕显示黑色）\n    lcd_fill(0, w, 0, w, 0xFF0000); //红色方块\n    lcd_fill(width-w, width-1, 0, w, 0xFF00); //绿色方块\n    lcd_fill(0, w, height-w, height-1, 0xFF); //蓝色方块\n    lcd_fill(width-w, width-1, height-w, height-1, 0xFFFF00);//黄色方块\n    /* 画线: 十字交叉线 */\n    lcd_draw_line(0, height * 0.5, 1, width, 0xFFFFFF);//白色线\n    lcd_draw_line(width * 0.5, 0, 0, height, 0xFFFFFF);//白色线\n    /* 画矩形 */\n    unsigned int s_x, s_y, e_x, e_y;\n    s_x = 0.25 * width;\n    s_y = w;\n    e_x = width - s_x;\n    e_y = height - s_y;\n    for ( ; (s_x <= e_x) && (s_y <= e_y);\n    s_x+=5, s_y+=5, e_x-=5, e_y-=5)\n    lcd_draw_rectangle(s_x, e_x, s_y, e_y, 0xFFFFFF);\n\n    printf(\"frame draw over1\\n\");\n    munmap(screen_base, screen_size);\n    close(fd);\n\n    exit(0);\n}\n```\n\n","slug":"Linux嵌入式5-FrameBuffer应用编程","published":1,"updated":"2024-07-05T16:06:08.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj6000i04vr1xli4tqv","content":"<h1 id=\"FrameBuffer应用编程\"><a href=\"#FrameBuffer应用编程\" class=\"headerlink\" title=\"FrameBuffer应用编程\"></a>FrameBuffer应用编程</h1><h2 id=\"1、内存映射\"><a href=\"#1、内存映射\" class=\"headerlink\" title=\"1、内存映射\"></a>1、内存映射</h2><p>用户程序操作文件的一般方式为调用系统库函数（open，read，write），库函数的流程为拷贝用户数据空间，到内核空间，获取文件句柄，返回用户空间，操作文件时，使用句柄到内核空间找到文件进行修改，每一次操作都是如此。用户空间和内核空间的机制导致数据传输速度不能最大，于是采用<strong>内存映射</strong>的方式。</p>\n<p>用户程序可以直接访问内存，内存映射是在内存中申请空间对应物理文件，修改内存的数据会自动同步到物理文件，注意这个同步不是及时的，仍由内核调用，使用open这种库函数也不是及时同步，都是由内核调用同步，内存映射返回的是一个指针，可以直接访问和修改内容。</p>\n<h2 id=\"2、LCD应用编程流程\"><a href=\"#2、LCD应用编程流程\" class=\"headerlink\" title=\"2、LCD应用编程流程\"></a>2、LCD应用编程流程</h2><ul>\n<li>打开&#x2F;dev&#x2F;fdX设备文件</li>\n<li>使用ioctl函数读取LCD参数信息</li>\n<li>使用存储映射的方式将屏幕显示缓冲区映射到用户空间</li>\n<li>直接读写显示缓冲区进行绘图和显示</li>\n<li>完成显示后关闭存储映射，关闭设备文件</li>\n</ul>\n<h2 id=\"3、属性结构体介绍\"><a href=\"#3、属性结构体介绍\" class=\"headerlink\" title=\"3、属性结构体介绍\"></a>3、属性结构体介绍</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//显示设备的可变参数参数-一般表示显示屏显示大小，不变参数一般指硬件属性，比如缓冲区宽度</span>\n<span class=\"token keyword\">struct</span> fb_var_screeninfo <span class=\"token punctuation\">{</span>\n    __u32 xres<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* visible resolution\t\t*/</span>\n    __u32 yres<span class=\"token punctuation\">;</span>\n    __u32 xres_virtual<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* virtual resolution\t\t*/</span>\n    __u32 yres_virtual<span class=\"token punctuation\">;</span>\n    __u32 xoffset<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* offset from virtual to visible */</span>\n    __u32 yoffset<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* resolution\t\t\t*/</span>\n\n    __u32 bits_per_pixel<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* guess what\t\t\t*/</span>\n    __u32 grayscale<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* 0 = color, 1 = grayscale,\t*/</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/* >1 = FOURCC\t\t\t*/</span>\n    <span class=\"token keyword\">struct</span> fb_bitfield red<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* bitfield in fb mem if true color, */</span>\n    <span class=\"token keyword\">struct</span> fb_bitfield green<span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">/* else only length is significant */</span>\n    <span class=\"token keyword\">struct</span> fb_bitfield blue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> fb_bitfield transp<span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">/* transparency\t\t\t*/</span>\t\n\n    __u32 nonstd<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* != 0 Non standard pixel format */</span>\n\n    __u32 activate<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* see FB_ACTIVATE_*\t\t*/</span>\n\n    __u32 height<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* height of picture in mm    */</span>\n    __u32 width<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* width of picture in mm     */</span>\n\n    __u32 accel_flags<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* (OBSOLETE) see fb_info.flags */</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/* Timing: All values in pixclocks, except pixclock (of course) */</span>\n    __u32 pixclock<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* pixel clock in ps (pico seconds) */</span>\n    __u32 left_margin<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* time from sync to picture\t*/</span>\n    __u32 right_margin<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* time from picture to sync\t*/</span>\n    __u32 upper_margin<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* time from sync to picture\t*/</span>\n    __u32 lower_margin<span class=\"token punctuation\">;</span>\n    __u32 hsync_len<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* length of horizontal sync\t*/</span>\n    __u32 vsync_len<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* length of vertical sync\t*/</span>\n    __u32 sync<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* see FB_SYNC_*\t\t*/</span>\n    __u32 vmode<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* see FB_VMODE_*\t\t*/</span>\n    __u32 rotate<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* angle we rotate counter clockwise */</span>\n    __u32 colorspace<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* colorspace for FOURCC-based modes */</span>\n    __u32 reserved<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* Reserved for future compatibility */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//显示设备的固定参数</span>\n<span class=\"token keyword\">struct</span> fb_fix_screeninfo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> id<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* identification string eg \"TT Builtin\" */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> smem_start<span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">/* Start of frame buffer mem */</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/* (physical address) */</span>\n    __u32 smem_len<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* Length of frame buffer mem */</span>\n    __u32 type<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* see FB_TYPE_*\t\t*/</span>\n    __u32 type_aux<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* Interleave for interleaved Planes */</span>\n    __u32 visual<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* see FB_VISUAL_*\t\t*/</span> \n    __u16 xpanstep<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* zero if no hardware panning  */</span>\n    __u16 ypanstep<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* zero if no hardware panning  */</span>\n    __u16 ywrapstep<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* zero if no hardware ywrap    */</span>\n    __u32 line_length<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* length of a line in bytes    */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> mmio_start<span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">/* Start of Memory Mapped I/O   */</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/* (physical address) */</span>\n    __u32 mmio_len<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* Length of Memory Mapped I/O  */</span>\n    __u32 accel<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* Indicate to driver which\t*/</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/*  specific chip/card we have\t*/</span>\n    __u16 capabilities<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* see FB_CAP_*\t\t\t*/</span>\n    __u16 reserved<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* Reserved for future compatibility */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//读取参数结构体</span>\n<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> FBIOGET_VSCREENINFO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fb_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> FBIOGET_FSCREENINFO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fb_fix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"4、存储映射\"><a href=\"#4、存储映射\" class=\"headerlink\" title=\"4、存储映射\"></a>4、存储映射</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">mmap</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>__addr<span class=\"token punctuation\">,</span> size_t __len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __prot<span class=\"token punctuation\">,</span>\n           <span class=\"token keyword\">int</span> __flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __fd<span class=\"token punctuation\">,</span> __off_t __offset<span class=\"token punctuation\">)</span> __THROW<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//地址自动分配，传入NULL，在存储映射中遇到一个问题，显示屏的line_length和显示宽度width不一样，显示屏line_length由硬件缓冲区大小决定，申请内存时，空间大小应该为line_length*height，而不是width*height</span>\nscreen_base <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> screen_size<span class=\"token punctuation\">,</span> PROT_WRITE<span class=\"token punctuation\">,</span> MAP_SHARED<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//关闭存储映射</span>\n<span class=\"token function\">munmap</span><span class=\"token punctuation\">(</span>screen_base<span class=\"token punctuation\">,</span> screen_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"5、显示效果\"><a href=\"#5、显示效果\" class=\"headerlink\" title=\"5、显示效果\"></a>5、显示效果</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//颜色标准转换</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> argb8888_to_rgb565(color) ({ \\\n    unsigned int temp = (color);\\\n    ((temp &amp; 0xF80000UL) >> 8) | \\\n    ((temp &amp; 0xFC00UL) >> 5) | \\\n    ((temp &amp; 0xF8UL) >> 3); \\\n})</span>\n</code></pre>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/8118a23003076a7df800a48e2338f7d.jpg\" alt=\"8118a23003076a7df800a48e2338f7d\"></p>\n<h2 id=\"6、程序源码\"><a href=\"#6、程序源码\" class=\"headerlink\" title=\"6、程序源码\"></a>6、程序源码</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/input.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/fb.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> argb8888_to_rgb565(color) ({ \\\n    unsigned int temp = (color);\\\n    ((temp &amp; 0xF80000UL) >> 8) | \\\n    ((temp &amp; 0xFC00UL) >> 5) | \\\n    ((temp &amp; 0xF8UL) >> 3); \\\n})</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span>screen_base <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 打点</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lcd_draw_point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> rgb565_color <span class=\"token operator\">=</span> <span class=\"token function\">argb8888_to_rgb565</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">>=</span>width<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> width<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">>=</span>height<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> height<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n    screen_base<span class=\"token punctuation\">[</span>y<span class=\"token operator\">*</span>width <span class=\"token operator\">+</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rgb565_color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// 画线</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> rgb565_color <span class=\"token operator\">=</span> <span class=\"token function\">argb8888_to_rgb565</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">>=</span>width<span class=\"token punctuation\">)</span>\n        x <span class=\"token operator\">=</span> width<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">>=</span>height<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> height<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n\n    temp <span class=\"token operator\">=</span> y<span class=\"token operator\">*</span>width <span class=\"token operator\">+</span>x<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        end <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">>=</span>width<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> width<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> temp<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            screen_base<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rgb565_color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        end <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">>=</span>height<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> height<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">&lt;</span>end<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> temp<span class=\"token operator\">+</span><span class=\"token operator\">=</span>width<span class=\"token punctuation\">)</span>\n            screen_base<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rgb565_color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// 画矩形</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lcd_draw_rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> start_x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> end_x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> start_y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> end_y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> rgb565_color <span class=\"token operator\">=</span> <span class=\"token function\">argb8888_to_rgb565</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x_len <span class=\"token operator\">=</span> end_x <span class=\"token operator\">-</span> start_x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> y_len <span class=\"token operator\">=</span> end_y <span class=\"token operator\">-</span> start_y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x_len<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span> end_y<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x_len<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y_len<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span>end_x<span class=\"token punctuation\">,</span> start_y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y_len<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//区域填充</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lcd_fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> start_x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> end_x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> start_y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> end_y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> rgb565_color <span class=\"token operator\">=</span> <span class=\"token function\">argb8888_to_rgb565</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x_len <span class=\"token operator\">=</span> end_x <span class=\"token operator\">-</span> start_x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> start_y<span class=\"token operator\">&lt;=</span>end_y<span class=\"token punctuation\">;</span> start_y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span>start_x<span class=\"token punctuation\">,</span> start_y<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x_len<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">struct</span> fb_fix_screeninfo fix_info<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> fb_var_screeninfo var_info<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> screen_size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> argc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"usage:%s &lt;event>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>O_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> FBIOGET_VSCREENINFO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>var_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> FBIOGET_FSCREENINFO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fix_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    screen_size <span class=\"token operator\">=</span> fix_info<span class=\"token punctuation\">.</span>line_length <span class=\"token operator\">*</span> var_info<span class=\"token punctuation\">.</span>yres<span class=\"token punctuation\">;</span>\n    width <span class=\"token operator\">=</span> var_info<span class=\"token punctuation\">.</span>xres<span class=\"token punctuation\">;</span>\n    height <span class=\"token operator\">=</span> var_info<span class=\"token punctuation\">.</span>yres<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frame config x:%d, y:%d\\n\"</span><span class=\"token punctuation\">,</span> var_info<span class=\"token punctuation\">.</span>xres<span class=\"token punctuation\">,</span> var_info<span class=\"token punctuation\">.</span>yres<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frame config size:%d\\n\"</span><span class=\"token punctuation\">,</span> fix_info<span class=\"token punctuation\">.</span>line_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    screen_base <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> screen_size<span class=\"token punctuation\">,</span> PROT_WRITE<span class=\"token punctuation\">,</span> MAP_SHARED<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>MAP_FAILED <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>screen_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmap error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* 画正方形方块 */</span>\n    <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//方块的宽度为 1/4 屏幕高度</span>\n    <span class=\"token function\">lcd_fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//清屏（屏幕显示黑色）</span>\n    <span class=\"token function\">lcd_fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//红色方块</span>\n    <span class=\"token function\">lcd_fill</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">-</span>w<span class=\"token punctuation\">,</span> width<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//绿色方块</span>\n    <span class=\"token function\">lcd_fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span>w<span class=\"token punctuation\">,</span> height<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//蓝色方块</span>\n    <span class=\"token function\">lcd_fill</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">-</span>w<span class=\"token punctuation\">,</span> width<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">-</span>w<span class=\"token punctuation\">,</span> height<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFFF00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//黄色方块</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* 画线: 十字交叉线 */</span>\n    <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//白色线</span>\n    <span class=\"token function\">lcd_draw_line</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//白色线</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* 画矩形 */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> s_x<span class=\"token punctuation\">,</span> s_y<span class=\"token punctuation\">,</span> e_x<span class=\"token punctuation\">,</span> e_y<span class=\"token punctuation\">;</span>\n    s_x <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span> <span class=\"token operator\">*</span> width<span class=\"token punctuation\">;</span>\n    s_y <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n    e_x <span class=\"token operator\">=</span> width <span class=\"token operator\">-</span> s_x<span class=\"token punctuation\">;</span>\n    e_y <span class=\"token operator\">=</span> height <span class=\"token operator\">-</span> s_y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>s_x <span class=\"token operator\">&lt;=</span> e_x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s_y <span class=\"token operator\">&lt;=</span> e_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s_x<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> s_y<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> e_x<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> e_y<span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">lcd_draw_rectangle</span><span class=\"token punctuation\">(</span>s_x<span class=\"token punctuation\">,</span> e_x<span class=\"token punctuation\">,</span> s_y<span class=\"token punctuation\">,</span> e_y<span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frame draw over1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">munmap</span><span class=\"token punctuation\">(</span>screen_base<span class=\"token punctuation\">,</span> screen_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"FrameBuffer应用编程\"><a href=\"#FrameBuffer应用编程\" class=\"headerlink\" title=\"FrameBuffer应用编程\"></a>FrameBuffer应用编程</h1><h2 id=\"1、内存映射\"><a href=\"#1、内存映射\" class=\"headerlink\" title=\"1、内存映射\"></a>1、内存映射</h2><p>用户程序操作文件的一般方式为调用系统库函数（open，read，write），库函数的流程为拷贝用户数据空间，到内核空间，获取文件句柄，返回用户空间，操作文件时，使用句柄到内核空间找到文件进行修改，每一次操作都是如此。用户空间和内核空间的机制导致数据传输速度不能最大，于是采用<strong>内存映射</strong>的方式。</p>\n<p>用户程序可以直接访问内存，内存映射是在内存中申请空间对应物理文件，修改内存的数据会自动同步到物理文件，注意这个同步不是及时的，仍由内核调用，使用open这种库函数也不是及时同步，都是由内核调用同步，内存映射返回的是一个指针，可以直接访问和修改内容。</p>\n<h2 id=\"2、LCD应用编程流程\"><a href=\"#2、LCD应用编程流程\" class=\"headerlink\" title=\"2、LCD应用编程流程\"></a>2、LCD应用编程流程</h2><ul>\n<li>打开&#x2F;dev&#x2F;fdX设备文件</li>\n<li>使用ioctl函数读取LCD参数信息</li>\n<li>使用存储映射的方式将屏幕显示缓冲区映射到用户空间</li>\n<li>直接读写显示缓冲区进行绘图和显示</li>\n<li>完成显示后关闭存储映射，关闭设备文件</li>\n</ul>\n<h2 id=\"3、属性结构体介绍\"><a href=\"#3、属性结构体介绍\" class=\"headerlink\" title=\"3、属性结构体介绍\"></a>3、属性结构体介绍</h2><pre><code class=\"c\">//显示设备的可变参数参数-一般表示显示屏显示大小，不变参数一般指硬件属性，比如缓冲区宽度\nstruct fb_var_screeninfo &#123;\n    __u32 xres;\t\t\t/* visible resolution\t\t*/\n    __u32 yres;\n    __u32 xres_virtual;\t\t/* virtual resolution\t\t*/\n    __u32 yres_virtual;\n    __u32 xoffset;\t\t\t/* offset from virtual to visible */\n    __u32 yoffset;\t\t\t/* resolution\t\t\t*/\n\n    __u32 bits_per_pixel;\t\t/* guess what\t\t\t*/\n    __u32 grayscale;\t\t/* 0 = color, 1 = grayscale,\t*/\n                    /* &gt;1 = FOURCC\t\t\t*/\n    struct fb_bitfield red;\t\t/* bitfield in fb mem if true color, */\n    struct fb_bitfield green;\t/* else only length is significant */\n    struct fb_bitfield blue;\n    struct fb_bitfield transp;\t/* transparency\t\t\t*/\t\n\n    __u32 nonstd;\t\t\t/* != 0 Non standard pixel format */\n\n    __u32 activate;\t\t\t/* see FB_ACTIVATE_*\t\t*/\n\n    __u32 height;\t\t\t/* height of picture in mm    */\n    __u32 width;\t\t\t/* width of picture in mm     */\n\n    __u32 accel_flags;\t\t/* (OBSOLETE) see fb_info.flags */\n\n    /* Timing: All values in pixclocks, except pixclock (of course) */\n    __u32 pixclock;\t\t\t/* pixel clock in ps (pico seconds) */\n    __u32 left_margin;\t\t/* time from sync to picture\t*/\n    __u32 right_margin;\t\t/* time from picture to sync\t*/\n    __u32 upper_margin;\t\t/* time from sync to picture\t*/\n    __u32 lower_margin;\n    __u32 hsync_len;\t\t/* length of horizontal sync\t*/\n    __u32 vsync_len;\t\t/* length of vertical sync\t*/\n    __u32 sync;\t\t\t/* see FB_SYNC_*\t\t*/\n    __u32 vmode;\t\t\t/* see FB_VMODE_*\t\t*/\n    __u32 rotate;\t\t\t/* angle we rotate counter clockwise */\n    __u32 colorspace;\t\t/* colorspace for FOURCC-based modes */\n    __u32 reserved[4];\t\t/* Reserved for future compatibility */\n&#125;;\n//显示设备的固定参数\nstruct fb_fix_screeninfo &#123;\n    char id[16];\t\t\t/* identification string eg &quot;TT Builtin&quot; */\n    unsigned long smem_start;\t/* Start of frame buffer mem */\n                    /* (physical address) */\n    __u32 smem_len;\t\t\t/* Length of frame buffer mem */\n    __u32 type;\t\t\t/* see FB_TYPE_*\t\t*/\n    __u32 type_aux;\t\t\t/* Interleave for interleaved Planes */\n    __u32 visual;\t\t\t/* see FB_VISUAL_*\t\t*/ \n    __u16 xpanstep;\t\t\t/* zero if no hardware panning  */\n    __u16 ypanstep;\t\t\t/* zero if no hardware panning  */\n    __u16 ywrapstep;\t\t/* zero if no hardware ywrap    */\n    __u32 line_length;\t\t/* length of a line in bytes    */\n    unsigned long mmio_start;\t/* Start of Memory Mapped I/O   */\n                    /* (physical address) */\n    __u32 mmio_len;\t\t\t/* Length of Memory Mapped I/O  */\n    __u32 accel;\t\t\t/* Indicate to driver which\t*/\n                    /*  specific chip/card we have\t*/\n    __u16 capabilities;\t\t/* see FB_CAP_*\t\t\t*/\n    __u16 reserved[2];\t\t/* Reserved for future compatibility */\n&#125;;\n//读取参数结构体\nioctl(fd, FBIOGET_VSCREENINFO, &amp;fb_var);\nioctl(fd, FBIOGET_FSCREENINFO, &amp;fb_fix);\n</code></pre>\n<h2 id=\"4、存储映射\"><a href=\"#4、存储映射\" class=\"headerlink\" title=\"4、存储映射\"></a>4、存储映射</h2><pre><code class=\"c\">#include &lt;sys/mman.h&gt;\nvoid *mmap (void *__addr, size_t __len, int __prot,\n           int __flags, int __fd, __off_t __offset) __THROW;)\n//地址自动分配，传入NULL，在存储映射中遇到一个问题，显示屏的line_length和显示宽度width不一样，显示屏line_length由硬件缓冲区大小决定，申请内存时，空间大小应该为line_length*height，而不是width*height\nscreen_base = mmap(NULL, screen_size, PROT_WRITE, MAP_SHARED, fd, 0);\n//关闭存储映射\nmunmap(screen_base, screen_size);\n</code></pre>\n<h2 id=\"5、显示效果\"><a href=\"#5、显示效果\" class=\"headerlink\" title=\"5、显示效果\"></a>5、显示效果</h2><pre><code class=\"c\">//颜色标准转换\n#define argb8888_to_rgb565(color) (&#123; \\\n    unsigned int temp = (color);\\\n    ((temp &amp; 0xF80000UL) &gt;&gt; 8) | \\\n    ((temp &amp; 0xFC00UL) &gt;&gt; 5) | \\\n    ((temp &amp; 0xF8UL) &gt;&gt; 3); \\\n&#125;)\n</code></pre>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/8118a23003076a7df800a48e2338f7d.jpg\" alt=\"8118a23003076a7df800a48e2338f7d\"></p>\n<h2 id=\"6、程序源码\"><a href=\"#6、程序源码\" class=\"headerlink\" title=\"6、程序源码\"></a>6、程序源码</h2><pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;poll.h&gt;\n#include &lt;linux/input.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;linux/fb.h&gt;\n\n#define argb8888_to_rgb565(color) (&#123; \\\n    unsigned int temp = (color);\\\n    ((temp &amp; 0xF80000UL) &gt;&gt; 8) | \\\n    ((temp &amp; 0xFC00UL) &gt;&gt; 5) | \\\n    ((temp &amp; 0xF8UL) &gt;&gt; 3); \\\n&#125;)\n\nstatic int width;\nstatic int height;\nstatic unsigned short *screen_base = NULL;\n// 打点\nstatic void lcd_draw_point(unsigned int x, unsigned int y, unsigned int color)&#123;\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    if(x&gt;=width)\n        x = width-1;\n    if(y&gt;=height)\n        y = height-1;\n    screen_base[y*width +x] = rgb565_color;\n&#125;\n// 画线\nstatic void lcd_draw_line(unsigned int x, unsigned int y, int dir, unsigned int length, unsigned int color)&#123;\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    unsigned int end;\n    unsigned long temp;\n    if(x&gt;=width)\n        x = width-1;\n    if(y&gt;=height)\n        y = height-1;\n\n    temp = y*width +x;\n\n    if (dir)&#123;\n        end = x + length -1;\n        if(end&gt;=width)\n            end = width-1;\n        for(; x&lt;=end; x++, temp++)\n            screen_base[temp] = rgb565_color;\n    &#125;\n    else&#123;\n        end = y + length -1;\n        if(end&gt;=height)\n            end = height-1;\n        for(; y&lt;end; y++, temp+=width)\n            screen_base[temp] = rgb565_color;\n    &#125;\n    \n&#125;\n// 画矩形\nstatic void lcd_draw_rectangle(unsigned int start_x, unsigned int end_x, unsigned int start_y, unsigned int end_y, unsigned int color)&#123;\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    int x_len = end_x - start_x + 1;\n    int y_len = end_y - start_y - 1;\n\n    lcd_draw_line(start_x, start_y, 1, x_len, color);\n    lcd_draw_line(start_x, end_y, 1, x_len, color);\n    lcd_draw_line(start_x, start_y+1, 0, y_len, color);\n    lcd_draw_line(end_x, start_y+1, 0, y_len, color);\n&#125;\n//区域填充\nstatic void lcd_fill(unsigned int start_x, unsigned int end_x, unsigned int start_y, unsigned int end_y, unsigned int color)&#123;\n    unsigned short rgb565_color = argb8888_to_rgb565(color);\n    int x_len = end_x - start_x + 1;\n    for(; start_y&lt;=end_y; start_y++)\n        lcd_draw_line(start_x, start_y, 1, x_len, color);\n&#125;\n\nint main(int argc, char *argv[])&#123;\n\n    struct fb_fix_screeninfo fix_info;\n    struct fb_var_screeninfo var_info;\n    unsigned int screen_size;\n    int fd;\n\n    if (2 != argc)\n    &#123;\n        fprintf(stderr,&quot;usage:%s &lt;event&gt;\\n&quot;, argv[0]);\n        exit(-1);\n    &#125;\n\n    if (0 &gt; (fd = open(argv[1],O_RDWR)))\n    &#123;\n        perror(&quot;open error&quot;);\n        exit(-1);\n    &#125;\n\n    if(0 &gt; ioctl(fd, FBIOGET_VSCREENINFO, &amp;var_info))&#123;\n        perror(&quot;ioctl error&quot;);\n        exit(-1);\n    &#125; \n    if(0 &gt; ioctl(fd, FBIOGET_FSCREENINFO, &amp;fix_info))&#123;\n        perror(&quot;ioctl error&quot;);\n        exit(-1);\n    &#125;\n    screen_size = fix_info.line_length * var_info.yres;\n    width = var_info.xres;\n    height = var_info.yres;\n    printf(&quot;frame config x:%d, y:%d\\n&quot;, var_info.xres, var_info.yres);\n    printf(&quot;frame config size:%d\\n&quot;, fix_info.line_length);\n\n    screen_base = mmap(NULL, screen_size, PROT_WRITE, MAP_SHARED, fd, 0);\n\n    if(MAP_FAILED == (void *)screen_base)&#123;\n        perror(&quot;mmap error&quot;);\n        close(fd);\n        exit(EXIT_FAILURE);\n    &#125;\n    /* 画正方形方块 */\n    int w = height * 0.25;//方块的宽度为 1/4 屏幕高度\n    lcd_fill(0, width-1, 0, height-1, 0x0); //清屏（屏幕显示黑色）\n    lcd_fill(0, w, 0, w, 0xFF0000); //红色方块\n    lcd_fill(width-w, width-1, 0, w, 0xFF00); //绿色方块\n    lcd_fill(0, w, height-w, height-1, 0xFF); //蓝色方块\n    lcd_fill(width-w, width-1, height-w, height-1, 0xFFFF00);//黄色方块\n    /* 画线: 十字交叉线 */\n    lcd_draw_line(0, height * 0.5, 1, width, 0xFFFFFF);//白色线\n    lcd_draw_line(width * 0.5, 0, 0, height, 0xFFFFFF);//白色线\n    /* 画矩形 */\n    unsigned int s_x, s_y, e_x, e_y;\n    s_x = 0.25 * width;\n    s_y = w;\n    e_x = width - s_x;\n    e_y = height - s_y;\n    for ( ; (s_x &lt;= e_x) &amp;&amp; (s_y &lt;= e_y);\n    s_x+=5, s_y+=5, e_x-=5, e_y-=5)\n    lcd_draw_rectangle(s_x, e_x, s_y, e_y, 0xFFFFFF);\n\n    printf(&quot;frame draw over1\\n&quot;);\n    munmap(screen_base, screen_size);\n    close(fd);\n\n    exit(0);\n&#125;\n</code></pre>\n"},{"title":"Linux嵌入式3-输入设备","date":"2024-01-14T11:04:22.000Z","toc":true,"_content":"\n# 1、输入类设备描述\n\n设备文件路径：/dev/input/event\n\n查看设备事件命令：cat /proc/bus/input/devices\n\n![image-20240114204650594](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114204650594.png)\n\n# 2、linux内核描述\n\n### 输入设备描述事件\n\n查看事件描述符在\"**input-event-codes.h**\"文件中，已经在linux/input.h中包含\n\n```c\nstruct input_event {\n#if (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) && !defined(__KERNEL__)\n\tstruct timeval time;\n#define input_event_sec time.tv_sec\n#define input_event_usec time.tv_usec\n#else\n\t__kernel_ulong_t __sec;\n#if defined(__sparc__) && defined(__arch64__)\n\tunsigned int __usec;\n\tunsigned int __pad;\n#else\n\t__kernel_ulong_t __usec;\n#endif\n#define input_event_sec  __sec\n#define input_event_usec __usec\n#endif\n\t__u16 type;\n\t__u16 code;\n\t__s32 value;\n};\n/*\n timeval 为事件上报时间\n type 为事件类型\n code 为具体事件\n value 为事件的值\n 例如键盘按键KEY0按下时，type表示触发按键，code表示KEY0，value表示按下还是松开\n*/\n```\n\n**数据同步：**\n\n同步事件***EV_SYN***用于实现同步操作、告知接收者本轮上报的数据已经完整，例如触摸屏幕一次操作需要上报x轴坐标，y轴坐标、触摸点信息等，此时就需要同步事件。同步事件的type类型如下：\n\n```c\n#define SYN_REPORT 0\n#define SYN_CONFIG 1\n#define SYN_MT_REPORT 2\n#define SYN_DROPPED 3\n#define SYN_MAX 0xf\n#define SYN_CNT (SYN_MAX+1)\n```\n\n**所有的事件上报完成后都需要再上报一个同步事件，一般是SYN_REPORT，value为0。**\n\n# 3、读取开发板上报事件\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n// /dev/input/event2\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    struct input_event in_ev = {0};\n    struct pollfd pfd;\n    char val;\n    int fd;\n    //效验传参   ./exe /dev/input/event2\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n    //打开事件\n    if (0 > (fd = open(argv[1],O_RDONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n    //循环阻塞时读取上报事件\n    for (;;)\n    {\n        /* code */\n        if (sizeof(struct input_event) != read(fd, &in_ev, sizeof(struct input_event)))\n        {\n            /* code */\n            perror(\"read error!\");\n            exit(-1);\n        }\n        printf(\"type: %d code: %d value: %d\\n\",in_ev.type, in_ev.code, in_ev.value);\n        \n    }\n    exit(0);\n}\n```\n\n# 4、触摸屏上报事件分析\n\n![image-20240114212415740](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114212415740.png)\n\n按下触摸屏后触发绝对位移事件EV_ABS（type=3）中的ABS_MT_TRACKING_ID（code=57）事件，value为78，表示有一个新的触点被创建，value为-1时表示触点松开，触点的ID为78，53和54分别表示x坐标和y坐标。\n\n获取触摸屏信息  需要使用一个开放函数：ioctl（input/output control）\n\n```c\nint ioctl(int fd, unsigned long request, ...);\n/*\n fd 是文件描述符，表示要控制的设备。\n request 是控制命令，通常是一个宏，定义了要执行的特定操作。\n 可选的参数 ... 取决于特定的 ioctl 命令，可能包含输入参数、输出参数或者不需要参数。\n*/\n//查询触摸屏触点信息，存放在info中\nstruct input_absinfo info;\nif(0 > ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n/* 常用来处理陀螺仪数据\nstruct input_absinfo {\n\t__s32 value;\n\t__s32 minimum;\n\t__s32 maximum;\n\t__s32 fuzz;\n\t__s32 flat;\n\t__s32 resolution;\n};\n*/\n```\n\n获取触摸点程序源码：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n// /dev/input/event2\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    struct input_absinfo info;\n    struct pollfd pfd;\n    int max_slots;\n    int fd;\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n    if (0 > (fd = open(argv[1],O_RDONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n    if(0 > ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n    max_slots = info.maximum - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n    exit(0);\n}\n```\n\n# 5、单点触摸测试\n\n参考多点触摸实验\n\n# 6、多点触摸测试\n\n多点实验中，触摸点信息上报流程：\n\n![image-20240118215126784](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215126784.png)\n\n```\n第一个触摸点直接上报ABS_MT_TRACKING_ID，ID只需知道是否为0，-1，大于0即可，具体编号不需要关心\n出现第二个触摸点时，先上报ABS_MT_SLOT槽位信息，再上报坐标信息，最后上报ABS_MT_TRACKING_ID\n如果另一个触摸点发生移动时，先上传ABS_MT_SLOT，再上传坐标信息，相同触摸点移动不上报ABS_MT_SLOT\n```\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n// 多点触摸实验\n// /dev/input/event1\n//每个触摸点信息，valid为1时表示触摸点状态更新\nstruct ts_mt\n{\n    int x;\n    int y;\n    int id; // 表示触摸屏的唯一ID ABS_MT_TRACKING_ID\n    int valid;\n};\n//缓存记录坐标，等待上报同步事件后再将坐标写在ts_mt结构体数组返回\nstruct tp_xy\n{\n    int x;\n    int y;\n};\n/* 读取一次同步事件的触摸点坐标\nfd: 时间句柄\nmax_slots： 最大触摸点数\nmt: ts_mt数组指针\n*/\nstatic int ts_read(const int fd, const int max_slots, struct ts_mt *mt)\n{\n    //上报事件\n    struct input_event in_ev;\n    static int slot = 0;\n    static struct tp_xy xy[12] = {0};\n    int i;\n    //清空ts_mt数组指针内容\n    memset(mt, 0x0, max_slots*sizeof(struct ts_mt));\n    // 设置id为-2，不为0表示触摸点按下，-1表示触摸点松开\n    for (i = 0; i < max_slots; i++)\n        mt[i].id = -2;\n\n    for (;;)\n    {\n        if(sizeof(struct input_event) != read(fd, &in_ev, sizeof(struct input_event))){\n            perror(\"read error\");\n            return -1;\n        }\n        switch (in_ev.type)\n        {\n            // 判断绝对位移事件\n            case EV_ABS:\n                switch (in_ev.code)\n                {\n                        // 触摸点槽位 code=47\n                    case ABS_MT_SLOT:\n                        slot = in_ev.value;\n                        break;\n                        // X轴坐标 code=53\n                    case ABS_MT_POSITION_X:\n                        xy[slot].x = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                        // y轴坐标 code=54\n                    case ABS_MT_POSITION_Y:\n                        xy[slot].y = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                        // 触摸点ID code=57 等于0表示移动事件\n                    case ABS_MT_TRACKING_ID:\n                        mt[slot].id = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                }\n                break;\n            // 判断同步事件\n            case EV_SYN:\n                if(SYN_REPORT==in_ev.code){\n                    //将记录的坐标更新到mt中\n                    for (size_t i = 0; i < max_slots; i++)\n                    {\n                        mt[i].x = xy[i].x;\n                        mt[i].y = xy[i].y;\n                    }\n                }\n                return 0;\n        }\n    }\n}\n\n\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    struct input_absinfo info;\n    struct ts_mt *mt = NULL;\n    struct pollfd pfd;\n    int max_slots;\n    int fd;\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n\n    if (0 > (fd = open(argv[1],O_RDONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n\n    if(0 > ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n\t//创建长度为max_slots的触摸点信息数组\n    mt = calloc(max_slots, sizeof(struct ts_mt));\n    for (; ; )\n    {\n        if(0>ts_read(fd, max_slots, mt))\n            break;\n        for (size_t i = 0; i < max_slots; i++)\n        {\n            //判断第i个触摸点的状态是否发生改变\n            if (mt[i].valid)\n            {\n                if (0<=mt[i].id)\n                    printf(\"slot<%d>, 按下(%d, %d)\\n\", i, mt[i].x, mt[i].y);\n                else if(-1==mt[i].id)\n                    printf(\"slot<%d>, 松开\\n\", i);\n                else\n                    printf(\"slot<%d>, 移动(%d, %d)\\n\", i, mt[i].x, mt[i].y);\n                \n            }\n            \n        }\n        \n    }\n    close(fd);\n    free(mt);\n    exit(EXIT_FAILURE);\n    \n    exit(0);\n}\n```\n\n","source":"_posts/Linux嵌入式3-输入设备.md","raw":"---\ntitle: Linux嵌入式3-输入设备\ndate: 2024-01-14 19:04:22\ntags:\ncategories: Linux嵌入式学习\ntoc: true\n---\n\n# 1、输入类设备描述\n\n设备文件路径：/dev/input/event\n\n查看设备事件命令：cat /proc/bus/input/devices\n\n![image-20240114204650594](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114204650594.png)\n\n# 2、linux内核描述\n\n### 输入设备描述事件\n\n查看事件描述符在\"**input-event-codes.h**\"文件中，已经在linux/input.h中包含\n\n```c\nstruct input_event {\n#if (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) && !defined(__KERNEL__)\n\tstruct timeval time;\n#define input_event_sec time.tv_sec\n#define input_event_usec time.tv_usec\n#else\n\t__kernel_ulong_t __sec;\n#if defined(__sparc__) && defined(__arch64__)\n\tunsigned int __usec;\n\tunsigned int __pad;\n#else\n\t__kernel_ulong_t __usec;\n#endif\n#define input_event_sec  __sec\n#define input_event_usec __usec\n#endif\n\t__u16 type;\n\t__u16 code;\n\t__s32 value;\n};\n/*\n timeval 为事件上报时间\n type 为事件类型\n code 为具体事件\n value 为事件的值\n 例如键盘按键KEY0按下时，type表示触发按键，code表示KEY0，value表示按下还是松开\n*/\n```\n\n**数据同步：**\n\n同步事件***EV_SYN***用于实现同步操作、告知接收者本轮上报的数据已经完整，例如触摸屏幕一次操作需要上报x轴坐标，y轴坐标、触摸点信息等，此时就需要同步事件。同步事件的type类型如下：\n\n```c\n#define SYN_REPORT 0\n#define SYN_CONFIG 1\n#define SYN_MT_REPORT 2\n#define SYN_DROPPED 3\n#define SYN_MAX 0xf\n#define SYN_CNT (SYN_MAX+1)\n```\n\n**所有的事件上报完成后都需要再上报一个同步事件，一般是SYN_REPORT，value为0。**\n\n# 3、读取开发板上报事件\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n// /dev/input/event2\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    struct input_event in_ev = {0};\n    struct pollfd pfd;\n    char val;\n    int fd;\n    //效验传参   ./exe /dev/input/event2\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n    //打开事件\n    if (0 > (fd = open(argv[1],O_RDONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n    //循环阻塞时读取上报事件\n    for (;;)\n    {\n        /* code */\n        if (sizeof(struct input_event) != read(fd, &in_ev, sizeof(struct input_event)))\n        {\n            /* code */\n            perror(\"read error!\");\n            exit(-1);\n        }\n        printf(\"type: %d code: %d value: %d\\n\",in_ev.type, in_ev.code, in_ev.value);\n        \n    }\n    exit(0);\n}\n```\n\n# 4、触摸屏上报事件分析\n\n![image-20240114212415740](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114212415740.png)\n\n按下触摸屏后触发绝对位移事件EV_ABS（type=3）中的ABS_MT_TRACKING_ID（code=57）事件，value为78，表示有一个新的触点被创建，value为-1时表示触点松开，触点的ID为78，53和54分别表示x坐标和y坐标。\n\n获取触摸屏信息  需要使用一个开放函数：ioctl（input/output control）\n\n```c\nint ioctl(int fd, unsigned long request, ...);\n/*\n fd 是文件描述符，表示要控制的设备。\n request 是控制命令，通常是一个宏，定义了要执行的特定操作。\n 可选的参数 ... 取决于特定的 ioctl 命令，可能包含输入参数、输出参数或者不需要参数。\n*/\n//查询触摸屏触点信息，存放在info中\nstruct input_absinfo info;\nif(0 > ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n/* 常用来处理陀螺仪数据\nstruct input_absinfo {\n\t__s32 value;\n\t__s32 minimum;\n\t__s32 maximum;\n\t__s32 fuzz;\n\t__s32 flat;\n\t__s32 resolution;\n};\n*/\n```\n\n获取触摸点程序源码：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n// /dev/input/event2\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    struct input_absinfo info;\n    struct pollfd pfd;\n    int max_slots;\n    int fd;\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n    if (0 > (fd = open(argv[1],O_RDONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n    if(0 > ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n    max_slots = info.maximum - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n    exit(0);\n}\n```\n\n# 5、单点触摸测试\n\n参考多点触摸实验\n\n# 6、多点触摸测试\n\n多点实验中，触摸点信息上报流程：\n\n![image-20240118215126784](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215126784.png)\n\n```\n第一个触摸点直接上报ABS_MT_TRACKING_ID，ID只需知道是否为0，-1，大于0即可，具体编号不需要关心\n出现第二个触摸点时，先上报ABS_MT_SLOT槽位信息，再上报坐标信息，最后上报ABS_MT_TRACKING_ID\n如果另一个触摸点发生移动时，先上传ABS_MT_SLOT，再上传坐标信息，相同触摸点移动不上报ABS_MT_SLOT\n```\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n// 多点触摸实验\n// /dev/input/event1\n//每个触摸点信息，valid为1时表示触摸点状态更新\nstruct ts_mt\n{\n    int x;\n    int y;\n    int id; // 表示触摸屏的唯一ID ABS_MT_TRACKING_ID\n    int valid;\n};\n//缓存记录坐标，等待上报同步事件后再将坐标写在ts_mt结构体数组返回\nstruct tp_xy\n{\n    int x;\n    int y;\n};\n/* 读取一次同步事件的触摸点坐标\nfd: 时间句柄\nmax_slots： 最大触摸点数\nmt: ts_mt数组指针\n*/\nstatic int ts_read(const int fd, const int max_slots, struct ts_mt *mt)\n{\n    //上报事件\n    struct input_event in_ev;\n    static int slot = 0;\n    static struct tp_xy xy[12] = {0};\n    int i;\n    //清空ts_mt数组指针内容\n    memset(mt, 0x0, max_slots*sizeof(struct ts_mt));\n    // 设置id为-2，不为0表示触摸点按下，-1表示触摸点松开\n    for (i = 0; i < max_slots; i++)\n        mt[i].id = -2;\n\n    for (;;)\n    {\n        if(sizeof(struct input_event) != read(fd, &in_ev, sizeof(struct input_event))){\n            perror(\"read error\");\n            return -1;\n        }\n        switch (in_ev.type)\n        {\n            // 判断绝对位移事件\n            case EV_ABS:\n                switch (in_ev.code)\n                {\n                        // 触摸点槽位 code=47\n                    case ABS_MT_SLOT:\n                        slot = in_ev.value;\n                        break;\n                        // X轴坐标 code=53\n                    case ABS_MT_POSITION_X:\n                        xy[slot].x = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                        // y轴坐标 code=54\n                    case ABS_MT_POSITION_Y:\n                        xy[slot].y = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                        // 触摸点ID code=57 等于0表示移动事件\n                    case ABS_MT_TRACKING_ID:\n                        mt[slot].id = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                }\n                break;\n            // 判断同步事件\n            case EV_SYN:\n                if(SYN_REPORT==in_ev.code){\n                    //将记录的坐标更新到mt中\n                    for (size_t i = 0; i < max_slots; i++)\n                    {\n                        mt[i].x = xy[i].x;\n                        mt[i].y = xy[i].y;\n                    }\n                }\n                return 0;\n        }\n    }\n}\n\n\nint main(int argc, char *argv[]){\n    char gpio_path[100];\n    char file_path[100];\n    struct input_absinfo info;\n    struct ts_mt *mt = NULL;\n    struct pollfd pfd;\n    int max_slots;\n    int fd;\n    if (2 != argc)\n    {\n        fprintf(stderr,\"usage:%s <gpio> <value>\\n\", argv[0]);\n        exit(-1);\n    }\n\n    if (0 > (fd = open(argv[1],O_RDONLY)))\n    {\n        perror(\"open export error\");\n        exit(-1);\n    }\n\n    if(0 > ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n\t//创建长度为max_slots的触摸点信息数组\n    mt = calloc(max_slots, sizeof(struct ts_mt));\n    for (; ; )\n    {\n        if(0>ts_read(fd, max_slots, mt))\n            break;\n        for (size_t i = 0; i < max_slots; i++)\n        {\n            //判断第i个触摸点的状态是否发生改变\n            if (mt[i].valid)\n            {\n                if (0<=mt[i].id)\n                    printf(\"slot<%d>, 按下(%d, %d)\\n\", i, mt[i].x, mt[i].y);\n                else if(-1==mt[i].id)\n                    printf(\"slot<%d>, 松开\\n\", i);\n                else\n                    printf(\"slot<%d>, 移动(%d, %d)\\n\", i, mt[i].x, mt[i].y);\n                \n            }\n            \n        }\n        \n    }\n    close(fd);\n    free(mt);\n    exit(EXIT_FAILURE);\n    \n    exit(0);\n}\n```\n\n","slug":"Linux嵌入式3-输入设备","published":1,"updated":"2024-07-05T16:06:22.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj6000l04vreoy61dl3","content":"<h1 id=\"1、输入类设备描述\"><a href=\"#1、输入类设备描述\" class=\"headerlink\" title=\"1、输入类设备描述\"></a>1、输入类设备描述</h1><p>设备文件路径：&#x2F;dev&#x2F;input&#x2F;event</p>\n<p>查看设备事件命令：cat &#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114204650594.png\" alt=\"image-20240114204650594\"></p>\n<h1 id=\"2、linux内核描述\"><a href=\"#2、linux内核描述\" class=\"headerlink\" title=\"2、linux内核描述\"></a>2、linux内核描述</h1><h3 id=\"输入设备描述事件\"><a href=\"#输入设备描述事件\" class=\"headerlink\" title=\"输入设备描述事件\"></a>输入设备描述事件</h3><p>查看事件描述符在”<strong>input-event-codes.h</strong>“文件中，已经在linux&#x2F;input.h中包含</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> input_event <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) &amp;&amp; !defined(__KERNEL__)</span>\n    <span class=\"token keyword\">struct</span> timeval time<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> input_event_sec time.tv_sec</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> input_event_usec time.tv_usec</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n    __kernel_ulong_t __sec<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(__sparc__) &amp;&amp; defined(__arch64__)</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __usec<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> __pad<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n    __kernel_ulong_t __usec<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> input_event_sec  __sec</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> input_event_usec __usec</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n    __u16 type<span class=\"token punctuation\">;</span>\n    __u16 code<span class=\"token punctuation\">;</span>\n    __s32 value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n timeval 为事件上报时间\n type 为事件类型\n code 为具体事件\n value 为事件的值\n 例如键盘按键KEY0按下时，type表示触发按键，code表示KEY0，value表示按下还是松开\n*/</span>\n</code></pre>\n<p><strong>数据同步：</strong></p>\n<p>同步事件<em><strong>EV_SYN</strong></em>用于实现同步操作、告知接收者本轮上报的数据已经完整，例如触摸屏幕一次操作需要上报x轴坐标，y轴坐标、触摸点信息等，此时就需要同步事件。同步事件的type类型如下：</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYN_REPORT 0</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYN_CONFIG 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYN_MT_REPORT 2</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYN_DROPPED 3</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYN_MAX 0xf</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYN_CNT (SYN_MAX+1)</span>\n</code></pre>\n<p><strong>所有的事件上报完成后都需要再上报一个同步事件，一般是SYN_REPORT，value为0。</strong></p>\n<h1 id=\"3、读取开发板上报事件\"><a href=\"#3、读取开发板上报事件\" class=\"headerlink\" title=\"3、读取开发板上报事件\"></a>3、读取开发板上报事件</h1><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/input.h></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// /dev/input/event2</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> gpio_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> file_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> input_event in_ev <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> pollfd pfd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//效验传参   ./exe /dev/input/event2</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> argc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"usage:%s &lt;gpio> &lt;value>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//打开事件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open export error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//循环阻塞时读取上报事件</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/* code */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> input_event<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>in_ev<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> input_event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">/* code */</span>\n            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type: %d code: %d value: %d\\n\"</span><span class=\"token punctuation\">,</span>in_ev<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> in_ev<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span> in_ev<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1 id=\"4、触摸屏上报事件分析\"><a href=\"#4、触摸屏上报事件分析\" class=\"headerlink\" title=\"4、触摸屏上报事件分析\"></a>4、触摸屏上报事件分析</h1><p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114212415740.png\" alt=\"image-20240114212415740\"></p>\n<p>按下触摸屏后触发绝对位移事件EV_ABS（type&#x3D;3）中的ABS_MT_TRACKING_ID（code&#x3D;57）事件，value为78，表示有一个新的触点被创建，value为-1时表示触点松开，触点的ID为78，53和54分别表示x坐标和y坐标。</p>\n<p>获取触摸屏信息  需要使用一个开放函数：ioctl（input&#x2F;output control）</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> request<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n fd 是文件描述符，表示要控制的设备。\n request 是控制命令，通常是一个宏，定义了要执行的特定操作。\n 可选的参数 ... 取决于特定的 ioctl 命令，可能包含输入参数、输出参数或者不需要参数。\n*/</span>\n<span class=\"token comment\" spellcheck=\"true\">//查询触摸屏触点信息，存放在info中</span>\n<span class=\"token keyword\">struct</span> input_absinfo info<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGABS</span><span class=\"token punctuation\">(</span>ABS_MT_SLOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/* 常用来处理陀螺仪数据\nstruct input_absinfo {\n    __s32 value;\n    __s32 minimum;\n    __s32 maximum;\n    __s32 fuzz;\n    __s32 flat;\n    __s32 resolution;\n};\n*/</span>\n</code></pre>\n<p>获取触摸点程序源码：</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/input.h></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// /dev/input/event2</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> gpio_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> file_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> input_absinfo info<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> pollfd pfd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> max_slots<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> argc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"usage:%s &lt;gpio> &lt;value>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open export error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGABS</span><span class=\"token punctuation\">(</span>ABS_MT_SLOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    max_slots <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>maximum <span class=\"token operator\">-</span> info<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max slots: %d\\n\"</span><span class=\"token punctuation\">,</span>max_slots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1 id=\"5、单点触摸测试\"><a href=\"#5、单点触摸测试\" class=\"headerlink\" title=\"5、单点触摸测试\"></a>5、单点触摸测试</h1><p>参考多点触摸实验</p>\n<h1 id=\"6、多点触摸测试\"><a href=\"#6、多点触摸测试\" class=\"headerlink\" title=\"6、多点触摸测试\"></a>6、多点触摸测试</h1><p>多点实验中，触摸点信息上报流程：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215126784.png\" alt=\"image-20240118215126784\"></p>\n<pre><code>第一个触摸点直接上报ABS_MT_TRACKING_ID，ID只需知道是否为0，-1，大于0即可，具体编号不需要关心\n出现第二个触摸点时，先上报ABS_MT_SLOT槽位信息，再上报坐标信息，最后上报ABS_MT_TRACKING_ID\n如果另一个触摸点发生移动时，先上传ABS_MT_SLOT，再上传坐标信息，相同触摸点移动不上报ABS_MT_SLOT\n</code></pre>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/input.h></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// 多点触摸实验</span>\n<span class=\"token comment\" spellcheck=\"true\">// /dev/input/event1</span>\n<span class=\"token comment\" spellcheck=\"true\">//每个触摸点信息，valid为1时表示触摸点状态更新</span>\n<span class=\"token keyword\">struct</span> ts_mt\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 表示触摸屏的唯一ID ABS_MT_TRACKING_ID</span>\n    <span class=\"token keyword\">int</span> valid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//缓存记录坐标，等待上报同步事件后再将坐标写在ts_mt结构体数组返回</span>\n<span class=\"token keyword\">struct</span> tp_xy\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* 读取一次同步事件的触摸点坐标\nfd: 时间句柄\nmax_slots： 最大触摸点数\nmt: ts_mt数组指针\n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ts_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> max_slots<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> ts_mt <span class=\"token operator\">*</span>mt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//上报事件</span>\n    <span class=\"token keyword\">struct</span> input_event in_ev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> slot <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> tp_xy xy<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//清空ts_mt数组指针内容</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> max_slots<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ts_mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 设置id为-2，不为0表示触摸点按下，-1表示触摸点松开</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max_slots<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> input_event<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>in_ev<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> input_event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>in_ev<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 判断绝对位移事件</span>\n            <span class=\"token keyword\">case</span> EV_ABS<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>in_ev<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 触摸点槽位 code=47</span>\n                    <span class=\"token keyword\">case</span> ABS_MT_SLOT<span class=\"token punctuation\">:</span>\n                        slot <span class=\"token operator\">=</span> in_ev<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// X轴坐标 code=53</span>\n                    <span class=\"token keyword\">case</span> ABS_MT_POSITION_X<span class=\"token punctuation\">:</span>\n                        xy<span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> in_ev<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                        mt<span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// y轴坐标 code=54</span>\n                    <span class=\"token keyword\">case</span> ABS_MT_POSITION_Y<span class=\"token punctuation\">:</span>\n                        xy<span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> in_ev<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                        mt<span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 触摸点ID code=57 等于0表示移动事件</span>\n                    <span class=\"token keyword\">case</span> ABS_MT_TRACKING_ID<span class=\"token punctuation\">:</span>\n                        mt<span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> in_ev<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                        mt<span class=\"token punctuation\">[</span>slot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 判断同步事件</span>\n            <span class=\"token keyword\">case</span> EV_SYN<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>SYN_REPORT<span class=\"token operator\">==</span>in_ev<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//将记录的坐标更新到mt中</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max_slots<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> xy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                        mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> xy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> gpio_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> file_path<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> input_absinfo info<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> ts_mt <span class=\"token operator\">*</span>mt <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> pollfd pfd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> max_slots<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> argc<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"usage:%s &lt;gpio> &lt;value>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open export error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGABS</span><span class=\"token punctuation\">(</span>ABS_MT_SLOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    max_slots <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>maximum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> info<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max slots: %d\\n\"</span><span class=\"token punctuation\">,</span>max_slots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建长度为max_slots的触摸点信息数组</span>\n    mt <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>max_slots<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ts_mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">></span><span class=\"token function\">ts_read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> max_slots<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max_slots<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//判断第i个触摸点的状态是否发生改变</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;=</span>mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slot&lt;%d>, 按下(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">==</span>mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slot&lt;%d>, 松开\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slot&lt;%d>, 移动(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n            <span class=\"token punctuation\">}</span>\n            \n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"1、输入类设备描述\"><a href=\"#1、输入类设备描述\" class=\"headerlink\" title=\"1、输入类设备描述\"></a>1、输入类设备描述</h1><p>设备文件路径：&#x2F;dev&#x2F;input&#x2F;event</p>\n<p>查看设备事件命令：cat &#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114204650594.png\" alt=\"image-20240114204650594\"></p>\n<h1 id=\"2、linux内核描述\"><a href=\"#2、linux内核描述\" class=\"headerlink\" title=\"2、linux内核描述\"></a>2、linux内核描述</h1><h3 id=\"输入设备描述事件\"><a href=\"#输入设备描述事件\" class=\"headerlink\" title=\"输入设备描述事件\"></a>输入设备描述事件</h3><p>查看事件描述符在”<strong>input-event-codes.h</strong>“文件中，已经在linux&#x2F;input.h中包含</p>\n<pre><code class=\"c\">struct input_event &#123;\n#if (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) &amp;&amp; !defined(__KERNEL__)\n    struct timeval time;\n#define input_event_sec time.tv_sec\n#define input_event_usec time.tv_usec\n#else\n    __kernel_ulong_t __sec;\n#if defined(__sparc__) &amp;&amp; defined(__arch64__)\n    unsigned int __usec;\n    unsigned int __pad;\n#else\n    __kernel_ulong_t __usec;\n#endif\n#define input_event_sec  __sec\n#define input_event_usec __usec\n#endif\n    __u16 type;\n    __u16 code;\n    __s32 value;\n&#125;;\n/*\n timeval 为事件上报时间\n type 为事件类型\n code 为具体事件\n value 为事件的值\n 例如键盘按键KEY0按下时，type表示触发按键，code表示KEY0，value表示按下还是松开\n*/\n</code></pre>\n<p><strong>数据同步：</strong></p>\n<p>同步事件<em><strong>EV_SYN</strong></em>用于实现同步操作、告知接收者本轮上报的数据已经完整，例如触摸屏幕一次操作需要上报x轴坐标，y轴坐标、触摸点信息等，此时就需要同步事件。同步事件的type类型如下：</p>\n<pre><code class=\"c\">#define SYN_REPORT 0\n#define SYN_CONFIG 1\n#define SYN_MT_REPORT 2\n#define SYN_DROPPED 3\n#define SYN_MAX 0xf\n#define SYN_CNT (SYN_MAX+1)\n</code></pre>\n<p><strong>所有的事件上报完成后都需要再上报一个同步事件，一般是SYN_REPORT，value为0。</strong></p>\n<h1 id=\"3、读取开发板上报事件\"><a href=\"#3、读取开发板上报事件\" class=\"headerlink\" title=\"3、读取开发板上报事件\"></a>3、读取开发板上报事件</h1><pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;poll.h&gt;\n#include &lt;linux/input.h&gt;\n// /dev/input/event2\nint main(int argc, char *argv[])&#123;\n    char gpio_path[100];\n    char file_path[100];\n    struct input_event in_ev = &#123;0&#125;;\n    struct pollfd pfd;\n    char val;\n    int fd;\n    //效验传参   ./exe /dev/input/event2\n    if (2 != argc)\n    &#123;\n        fprintf(stderr,&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\\n&quot;, argv[0]);\n        exit(-1);\n    &#125;\n    //打开事件\n    if (0 &gt; (fd = open(argv[1],O_RDONLY)))\n    &#123;\n        perror(&quot;open export error&quot;);\n        exit(-1);\n    &#125;\n    //循环阻塞时读取上报事件\n    for (;;)\n    &#123;\n        /* code */\n        if (sizeof(struct input_event) != read(fd, &amp;in_ev, sizeof(struct input_event)))\n        &#123;\n            /* code */\n            perror(&quot;read error!&quot;);\n            exit(-1);\n        &#125;\n        printf(&quot;type: %d code: %d value: %d\\n&quot;,in_ev.type, in_ev.code, in_ev.value);\n        \n    &#125;\n    exit(0);\n&#125;\n</code></pre>\n<h1 id=\"4、触摸屏上报事件分析\"><a href=\"#4、触摸屏上报事件分析\" class=\"headerlink\" title=\"4、触摸屏上报事件分析\"></a>4、触摸屏上报事件分析</h1><p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114212415740.png\" alt=\"image-20240114212415740\"></p>\n<p>按下触摸屏后触发绝对位移事件EV_ABS（type&#x3D;3）中的ABS_MT_TRACKING_ID（code&#x3D;57）事件，value为78，表示有一个新的触点被创建，value为-1时表示触点松开，触点的ID为78，53和54分别表示x坐标和y坐标。</p>\n<p>获取触摸屏信息  需要使用一个开放函数：ioctl（input&#x2F;output control）</p>\n<pre><code class=\"c\">int ioctl(int fd, unsigned long request, ...);\n/*\n fd 是文件描述符，表示要控制的设备。\n request 是控制命令，通常是一个宏，定义了要执行的特定操作。\n 可选的参数 ... 取决于特定的 ioctl 命令，可能包含输入参数、输出参数或者不需要参数。\n*/\n//查询触摸屏触点信息，存放在info中\nstruct input_absinfo info;\nif(0 &gt; ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;\n        perror(&quot;ioctl error&quot;);\n        exit(-1);\n    &#125;\n/* 常用来处理陀螺仪数据\nstruct input_absinfo &#123;\n    __s32 value;\n    __s32 minimum;\n    __s32 maximum;\n    __s32 fuzz;\n    __s32 flat;\n    __s32 resolution;\n&#125;;\n*/\n</code></pre>\n<p>获取触摸点程序源码：</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;poll.h&gt;\n#include &lt;linux/input.h&gt;\n// /dev/input/event2\nint main(int argc, char *argv[])&#123;\n    char gpio_path[100];\n    char file_path[100];\n    struct input_absinfo info;\n    struct pollfd pfd;\n    int max_slots;\n    int fd;\n    if (2 != argc)\n    &#123;\n        fprintf(stderr,&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\\n&quot;, argv[0]);\n        exit(-1);\n    &#125;\n    if (0 &gt; (fd = open(argv[1],O_RDONLY)))\n    &#123;\n        perror(&quot;open export error&quot;);\n        exit(-1);\n    &#125;\n    if(0 &gt; ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;\n        perror(&quot;ioctl error&quot;);\n        exit(-1);\n    &#125;\n    max_slots = info.maximum - info.minimum;\n    printf(&quot;max slots: %d\\n&quot;,max_slots);\n    exit(0);\n&#125;\n</code></pre>\n<h1 id=\"5、单点触摸测试\"><a href=\"#5、单点触摸测试\" class=\"headerlink\" title=\"5、单点触摸测试\"></a>5、单点触摸测试</h1><p>参考多点触摸实验</p>\n<h1 id=\"6、多点触摸测试\"><a href=\"#6、多点触摸测试\" class=\"headerlink\" title=\"6、多点触摸测试\"></a>6、多点触摸测试</h1><p>多点实验中，触摸点信息上报流程：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215126784.png\" alt=\"image-20240118215126784\"></p>\n<pre><code>第一个触摸点直接上报ABS_MT_TRACKING_ID，ID只需知道是否为0，-1，大于0即可，具体编号不需要关心\n出现第二个触摸点时，先上报ABS_MT_SLOT槽位信息，再上报坐标信息，最后上报ABS_MT_TRACKING_ID\n如果另一个触摸点发生移动时，先上传ABS_MT_SLOT，再上传坐标信息，相同触摸点移动不上报ABS_MT_SLOT\n</code></pre>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;poll.h&gt;\n#include &lt;linux/input.h&gt;\n// 多点触摸实验\n// /dev/input/event1\n//每个触摸点信息，valid为1时表示触摸点状态更新\nstruct ts_mt\n&#123;\n    int x;\n    int y;\n    int id; // 表示触摸屏的唯一ID ABS_MT_TRACKING_ID\n    int valid;\n&#125;;\n//缓存记录坐标，等待上报同步事件后再将坐标写在ts_mt结构体数组返回\nstruct tp_xy\n&#123;\n    int x;\n    int y;\n&#125;;\n/* 读取一次同步事件的触摸点坐标\nfd: 时间句柄\nmax_slots： 最大触摸点数\nmt: ts_mt数组指针\n*/\nstatic int ts_read(const int fd, const int max_slots, struct ts_mt *mt)\n&#123;\n    //上报事件\n    struct input_event in_ev;\n    static int slot = 0;\n    static struct tp_xy xy[12] = &#123;0&#125;;\n    int i;\n    //清空ts_mt数组指针内容\n    memset(mt, 0x0, max_slots*sizeof(struct ts_mt));\n    // 设置id为-2，不为0表示触摸点按下，-1表示触摸点松开\n    for (i = 0; i &lt; max_slots; i++)\n        mt[i].id = -2;\n\n    for (;;)\n    &#123;\n        if(sizeof(struct input_event) != read(fd, &amp;in_ev, sizeof(struct input_event)))&#123;\n            perror(&quot;read error&quot;);\n            return -1;\n        &#125;\n        switch (in_ev.type)\n        &#123;\n            // 判断绝对位移事件\n            case EV_ABS:\n                switch (in_ev.code)\n                &#123;\n                        // 触摸点槽位 code=47\n                    case ABS_MT_SLOT:\n                        slot = in_ev.value;\n                        break;\n                        // X轴坐标 code=53\n                    case ABS_MT_POSITION_X:\n                        xy[slot].x = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                        // y轴坐标 code=54\n                    case ABS_MT_POSITION_Y:\n                        xy[slot].y = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                        // 触摸点ID code=57 等于0表示移动事件\n                    case ABS_MT_TRACKING_ID:\n                        mt[slot].id = in_ev.value;\n                        mt[slot].valid = 1;\n                        break;\n                &#125;\n                break;\n            // 判断同步事件\n            case EV_SYN:\n                if(SYN_REPORT==in_ev.code)&#123;\n                    //将记录的坐标更新到mt中\n                    for (size_t i = 0; i &lt; max_slots; i++)\n                    &#123;\n                        mt[i].x = xy[i].x;\n                        mt[i].y = xy[i].y;\n                    &#125;\n                &#125;\n                return 0;\n        &#125;\n    &#125;\n&#125;\n\n\nint main(int argc, char *argv[])&#123;\n    char gpio_path[100];\n    char file_path[100];\n    struct input_absinfo info;\n    struct ts_mt *mt = NULL;\n    struct pollfd pfd;\n    int max_slots;\n    int fd;\n    if (2 != argc)\n    &#123;\n        fprintf(stderr,&quot;usage:%s &lt;gpio&gt; &lt;value&gt;\\n&quot;, argv[0]);\n        exit(-1);\n    &#125;\n\n    if (0 &gt; (fd = open(argv[1],O_RDONLY)))\n    &#123;\n        perror(&quot;open export error&quot;);\n        exit(-1);\n    &#125;\n\n    if(0 &gt; ioctl(fd, EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;\n        perror(&quot;ioctl error&quot;);\n        exit(-1);\n    &#125;\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(&quot;max slots: %d\\n&quot;,max_slots);\n    //创建长度为max_slots的触摸点信息数组\n    mt = calloc(max_slots, sizeof(struct ts_mt));\n    for (; ; )\n    &#123;\n        if(0&gt;ts_read(fd, max_slots, mt))\n            break;\n        for (size_t i = 0; i &lt; max_slots; i++)\n        &#123;\n            //判断第i个触摸点的状态是否发生改变\n            if (mt[i].valid)\n            &#123;\n                if (0&lt;=mt[i].id)\n                    printf(&quot;slot&lt;%d&gt;, 按下(%d, %d)\\n&quot;, i, mt[i].x, mt[i].y);\n                else if(-1==mt[i].id)\n                    printf(&quot;slot&lt;%d&gt;, 松开\\n&quot;, i);\n                else\n                    printf(&quot;slot&lt;%d&gt;, 移动(%d, %d)\\n&quot;, i, mt[i].x, mt[i].y);\n                \n            &#125;\n            \n        &#125;\n        \n    &#125;\n    close(fd);\n    free(mt);\n    exit(EXIT_FAILURE);\n    \n    exit(0);\n&#125;\n</code></pre>\n"},{"title":"Linux嵌入式4-tslib库函数","date":"2024-01-18T13:53:01.000Z","toc":true,"_content":"\n# 1、tslib简介\n\n![image-20240118215432029](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215432029.png)\n\ntslib是为触摸屏设备开发的linux应用层库函数，通过配置conf文件适配触摸屏信息，通过调用函数得到触摸屏的实时触摸点信息。tslib移植过程参考应用开发编程指南第18章。\n\n# 2、tslib库函数介绍\n\n配置、打开触摸屏设备函数：\n\n```c\n#include \"tslib.h\"\n/*\ndev_name: 设备节点\nnonblock： 0为阻塞方法打开触摸屏设备，非0表示非阻塞\n*/\nstruct tsdev *ts_open(const char *dev_name, int nonblock);\n/*\n参数与上面相同，区别是，dev_name可以设置为NULL，函数会在配置文件读取设备节点\n*/\nstruct tsdev *ts_setup(const char *dev_name, int nonblock)\n//关闭触摸屏设备\nint ts_close(struct tsdev *);\n//配置触摸屏设备\nint ts_config(struct tsdev *ts)\n//获取触摸屏事件句柄    \nts_fd(ts)\n```\n\n---\n\n读取触摸屏数据函数：\n\n```c\n/*\n\n*/\nint ts_read(struct tsdev *ts, struct ts_sample *samp, int nr)\n/*\n\n*/\nint ts_read_mt(struct tsdev *ts, struct ts_sample_mt **samp, int max_slots, int nr)\n```\n\n# 3、tslib多点触摸测试：\n\ntslib流程：\n\n1、配置触摸屏\n\n```c\nts = ts_setup(NULL,0);\n```\n\n2、读取触摸屏信息，计算最大触摸点数，申请触摸点信息数组\n\n```c\nif(0 > ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n\t//获取最大触摸点\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n\t//申请存储触摸点数组空间\n    samp = calloc(max_slots, sizeof(struct ts_sample_mt));\n```\n\n3、读取触摸屏数据\n\n```c\n//读触摸屏数据\nif(0>ts_read_mt(ts, &samp, max_slots, 1)){\n    perror(\"ts_read error\");\n    ts_close(ts);\n    exit(-1);\n}\n```\n\n4、解算触摸屏坐标\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n#include <tslib.h>\n// 多点触摸实验\n// /dev/input/event1\n\n\nint main(int argc, char *argv[]){\n    //tsdev是设备文件 tslib\n    struct tsdev *ts = NULL;\n    //sample是具体坐标信息\n    struct ts_sample_mt *samp = NULL;\n    struct input_absinfo info;\n    struct ts_mt *mt = NULL;\n    int max_slots;\n    \n    int pressure[12] = {0};\n    //配置触摸屏\n    ts = ts_setup(NULL,0);\n    if(NULL==ts){\n        perror(\"ts_setup error\");\n        exit(-1);\n    }\n\t//ts_fd获取触摸屏事件句柄，再获取触摸屏信息\n    if(0 > ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n\t//获取最大触摸点\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n\t//申请存储触摸点数组空间\n    samp = calloc(max_slots, sizeof(struct ts_sample_mt));\n    for (;;)\n    {\n        //读触摸屏数据\n        if(0>ts_read_mt(ts, &samp, max_slots, 1)){\n            perror(\"ts_read error\");\n            ts_close(ts);\n            exit(-1);\n        }\n        for (size_t i = 0; i < max_slots; i++)\n        {\n            //触摸点状态发生改变\n            if(samp[i].valid)\n            {\n                //判断压力是否大于0 是表示按下 否表示松开\n                if (samp[i].pressure)\n                {\n                    //上一次压力为0表示刚按下 否则表示移动\n                    if(pressure[samp[i].slot]==0){\n                        printf(\"%d按下：x=%d y=%d\\n\", samp[i].slot, samp[i].x, samp[i].y);\n                    }\n                    else{\n                        printf(\"%d移动：x=%d y=%d\\n\", samp[i].slot, samp[i].x, samp[i].y);\n                    }\n                }\n                else{\n                    printf(\"%d松开\\n\", samp[i].slot);\n                }\n            }\n            //更新历史压力\n            pressure[samp[i].slot] = samp[i].pressure;\n        }\n        \n        \n    }\n    \n    ts_close(ts);\n    free(samp);\n    exit(0);\n}\n```\n\n","source":"_posts/Linux嵌入式4-tslib库函数.md","raw":"---\ntitle: Linux嵌入式4-tslib库函数\ndate: 2024-01-18 21:53:01\ntags:\ncategories: Linux嵌入式学习\ntoc: true\n---\n\n# 1、tslib简介\n\n![image-20240118215432029](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215432029.png)\n\ntslib是为触摸屏设备开发的linux应用层库函数，通过配置conf文件适配触摸屏信息，通过调用函数得到触摸屏的实时触摸点信息。tslib移植过程参考应用开发编程指南第18章。\n\n# 2、tslib库函数介绍\n\n配置、打开触摸屏设备函数：\n\n```c\n#include \"tslib.h\"\n/*\ndev_name: 设备节点\nnonblock： 0为阻塞方法打开触摸屏设备，非0表示非阻塞\n*/\nstruct tsdev *ts_open(const char *dev_name, int nonblock);\n/*\n参数与上面相同，区别是，dev_name可以设置为NULL，函数会在配置文件读取设备节点\n*/\nstruct tsdev *ts_setup(const char *dev_name, int nonblock)\n//关闭触摸屏设备\nint ts_close(struct tsdev *);\n//配置触摸屏设备\nint ts_config(struct tsdev *ts)\n//获取触摸屏事件句柄    \nts_fd(ts)\n```\n\n---\n\n读取触摸屏数据函数：\n\n```c\n/*\n\n*/\nint ts_read(struct tsdev *ts, struct ts_sample *samp, int nr)\n/*\n\n*/\nint ts_read_mt(struct tsdev *ts, struct ts_sample_mt **samp, int max_slots, int nr)\n```\n\n# 3、tslib多点触摸测试：\n\ntslib流程：\n\n1、配置触摸屏\n\n```c\nts = ts_setup(NULL,0);\n```\n\n2、读取触摸屏信息，计算最大触摸点数，申请触摸点信息数组\n\n```c\nif(0 > ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n\t//获取最大触摸点\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n\t//申请存储触摸点数组空间\n    samp = calloc(max_slots, sizeof(struct ts_sample_mt));\n```\n\n3、读取触摸屏数据\n\n```c\n//读触摸屏数据\nif(0>ts_read_mt(ts, &samp, max_slots, 1)){\n    perror(\"ts_read error\");\n    ts_close(ts);\n    exit(-1);\n}\n```\n\n4、解算触摸屏坐标\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <poll.h>\n#include <linux/input.h>\n#include <tslib.h>\n// 多点触摸实验\n// /dev/input/event1\n\n\nint main(int argc, char *argv[]){\n    //tsdev是设备文件 tslib\n    struct tsdev *ts = NULL;\n    //sample是具体坐标信息\n    struct ts_sample_mt *samp = NULL;\n    struct input_absinfo info;\n    struct ts_mt *mt = NULL;\n    int max_slots;\n    \n    int pressure[12] = {0};\n    //配置触摸屏\n    ts = ts_setup(NULL,0);\n    if(NULL==ts){\n        perror(\"ts_setup error\");\n        exit(-1);\n    }\n\t//ts_fd获取触摸屏事件句柄，再获取触摸屏信息\n    if(0 > ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &info)){\n        perror(\"ioctl error\");\n        exit(-1);\n    }\n\t//获取最大触摸点\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(\"max slots: %d\\n\",max_slots);\n\t//申请存储触摸点数组空间\n    samp = calloc(max_slots, sizeof(struct ts_sample_mt));\n    for (;;)\n    {\n        //读触摸屏数据\n        if(0>ts_read_mt(ts, &samp, max_slots, 1)){\n            perror(\"ts_read error\");\n            ts_close(ts);\n            exit(-1);\n        }\n        for (size_t i = 0; i < max_slots; i++)\n        {\n            //触摸点状态发生改变\n            if(samp[i].valid)\n            {\n                //判断压力是否大于0 是表示按下 否表示松开\n                if (samp[i].pressure)\n                {\n                    //上一次压力为0表示刚按下 否则表示移动\n                    if(pressure[samp[i].slot]==0){\n                        printf(\"%d按下：x=%d y=%d\\n\", samp[i].slot, samp[i].x, samp[i].y);\n                    }\n                    else{\n                        printf(\"%d移动：x=%d y=%d\\n\", samp[i].slot, samp[i].x, samp[i].y);\n                    }\n                }\n                else{\n                    printf(\"%d松开\\n\", samp[i].slot);\n                }\n            }\n            //更新历史压力\n            pressure[samp[i].slot] = samp[i].pressure;\n        }\n        \n        \n    }\n    \n    ts_close(ts);\n    free(samp);\n    exit(0);\n}\n```\n\n","slug":"Linux嵌入式4-tslib库函数","published":1,"updated":"2024-07-05T16:06:17.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj7000n04vreqeqdro1","content":"<h1 id=\"1、tslib简介\"><a href=\"#1、tslib简介\" class=\"headerlink\" title=\"1、tslib简介\"></a>1、tslib简介</h1><p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215432029.png\" alt=\"image-20240118215432029\"></p>\n<p>tslib是为触摸屏设备开发的linux应用层库函数，通过配置conf文件适配触摸屏信息，通过调用函数得到触摸屏的实时触摸点信息。tslib移植过程参考应用开发编程指南第18章。</p>\n<h1 id=\"2、tslib库函数介绍\"><a href=\"#2、tslib库函数介绍\" class=\"headerlink\" title=\"2、tslib库函数介绍\"></a>2、tslib库函数介绍</h1><p>配置、打开触摸屏设备函数：</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tslib.h\"</span></span>\n<span class=\"token comment\" spellcheck=\"true\">/*\ndev_name: 设备节点\nnonblock： 0为阻塞方法打开触摸屏设备，非0表示非阻塞\n*/</span>\n<span class=\"token keyword\">struct</span> tsdev <span class=\"token operator\">*</span><span class=\"token function\">ts_open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dev_name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nonblock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n参数与上面相同，区别是，dev_name可以设置为NULL，函数会在配置文件读取设备节点\n*/</span>\n<span class=\"token keyword\">struct</span> tsdev <span class=\"token operator\">*</span><span class=\"token function\">ts_setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>dev_name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nonblock<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//关闭触摸屏设备</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ts_close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> tsdev <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//配置触摸屏设备</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ts_config</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> tsdev <span class=\"token operator\">*</span>ts<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//获取触摸屏事件句柄    </span>\n<span class=\"token function\">ts_fd</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span>\n</code></pre>\n<hr>\n<p>读取触摸屏数据函数：</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">/*\n\n*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ts_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> tsdev <span class=\"token operator\">*</span>ts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> ts_sample <span class=\"token operator\">*</span>samp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n\n*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">ts_read_mt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> tsdev <span class=\"token operator\">*</span>ts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> ts_sample_mt <span class=\"token operator\">*</span><span class=\"token operator\">*</span>samp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max_slots<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1 id=\"3、tslib多点触摸测试：\"><a href=\"#3、tslib多点触摸测试：\" class=\"headerlink\" title=\"3、tslib多点触摸测试：\"></a>3、tslib多点触摸测试：</h1><p>tslib流程：</p>\n<p>1、配置触摸屏</p>\n<pre class=\" language-c\"><code class=\"language-c\">ts <span class=\"token operator\">=</span> <span class=\"token function\">ts_setup</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>2、读取触摸屏信息，计算最大触摸点数，申请触摸点信息数组</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span><span class=\"token function\">ts_fd</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGABS</span><span class=\"token punctuation\">(</span>ABS_MT_SLOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取最大触摸点</span>\n    max_slots <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>maximum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> info<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max slots: %d\\n\"</span><span class=\"token punctuation\">,</span>max_slots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//申请存储触摸点数组空间</span>\n    samp <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>max_slots<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ts_sample_mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3、读取触摸屏数据</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//读触摸屏数据</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">></span><span class=\"token function\">ts_read_mt</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>samp<span class=\"token punctuation\">,</span> max_slots<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ts_read error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ts_close</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>4、解算触摸屏坐标</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;poll.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/input.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tslib.h></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// 多点触摸实验</span>\n<span class=\"token comment\" spellcheck=\"true\">// /dev/input/event1</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//tsdev是设备文件 tslib</span>\n    <span class=\"token keyword\">struct</span> tsdev <span class=\"token operator\">*</span>ts <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//sample是具体坐标信息</span>\n    <span class=\"token keyword\">struct</span> ts_sample_mt <span class=\"token operator\">*</span>samp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> input_absinfo info<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> ts_mt <span class=\"token operator\">*</span>mt <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> max_slots<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> pressure<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//配置触摸屏</span>\n    ts <span class=\"token operator\">=</span> <span class=\"token function\">ts_setup</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ts_setup error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//ts_fd获取触摸屏事件句柄，再获取触摸屏信息</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span><span class=\"token function\">ts_fd</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGABS</span><span class=\"token punctuation\">(</span>ABS_MT_SLOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ioctl error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取最大触摸点</span>\n    max_slots <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>maximum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> info<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max slots: %d\\n\"</span><span class=\"token punctuation\">,</span>max_slots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//申请存储触摸点数组空间</span>\n    samp <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>max_slots<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> ts_sample_mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//读触摸屏数据</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">></span><span class=\"token function\">ts_read_mt</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>samp<span class=\"token punctuation\">,</span> max_slots<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ts_read error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ts_close</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max_slots<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//触摸点状态发生改变</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//判断压力是否大于0 是表示按下 否表示松开</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pressure<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//上一次压力为0表示刚按下 否则表示移动</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pressure<span class=\"token punctuation\">[</span>samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slot<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d按下：x=%d y=%d\\n\"</span><span class=\"token punctuation\">,</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slot<span class=\"token punctuation\">,</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d移动：x=%d y=%d\\n\"</span><span class=\"token punctuation\">,</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slot<span class=\"token punctuation\">,</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d松开\\n\"</span><span class=\"token punctuation\">,</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//更新历史压力</span>\n            pressure<span class=\"token punctuation\">[</span>samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> samp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pressure<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">ts_close</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>samp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"1、tslib简介\"><a href=\"#1、tslib简介\" class=\"headerlink\" title=\"1、tslib简介\"></a>1、tslib简介</h1><p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215432029.png\" alt=\"image-20240118215432029\"></p>\n<p>tslib是为触摸屏设备开发的linux应用层库函数，通过配置conf文件适配触摸屏信息，通过调用函数得到触摸屏的实时触摸点信息。tslib移植过程参考应用开发编程指南第18章。</p>\n<h1 id=\"2、tslib库函数介绍\"><a href=\"#2、tslib库函数介绍\" class=\"headerlink\" title=\"2、tslib库函数介绍\"></a>2、tslib库函数介绍</h1><p>配置、打开触摸屏设备函数：</p>\n<pre><code class=\"c\">#include &quot;tslib.h&quot;\n/*\ndev_name: 设备节点\nnonblock： 0为阻塞方法打开触摸屏设备，非0表示非阻塞\n*/\nstruct tsdev *ts_open(const char *dev_name, int nonblock);\n/*\n参数与上面相同，区别是，dev_name可以设置为NULL，函数会在配置文件读取设备节点\n*/\nstruct tsdev *ts_setup(const char *dev_name, int nonblock)\n//关闭触摸屏设备\nint ts_close(struct tsdev *);\n//配置触摸屏设备\nint ts_config(struct tsdev *ts)\n//获取触摸屏事件句柄    \nts_fd(ts)\n</code></pre>\n<hr>\n<p>读取触摸屏数据函数：</p>\n<pre><code class=\"c\">/*\n\n*/\nint ts_read(struct tsdev *ts, struct ts_sample *samp, int nr)\n/*\n\n*/\nint ts_read_mt(struct tsdev *ts, struct ts_sample_mt **samp, int max_slots, int nr)\n</code></pre>\n<h1 id=\"3、tslib多点触摸测试：\"><a href=\"#3、tslib多点触摸测试：\" class=\"headerlink\" title=\"3、tslib多点触摸测试：\"></a>3、tslib多点触摸测试：</h1><p>tslib流程：</p>\n<p>1、配置触摸屏</p>\n<pre><code class=\"c\">ts = ts_setup(NULL,0);\n</code></pre>\n<p>2、读取触摸屏信息，计算最大触摸点数，申请触摸点信息数组</p>\n<pre><code class=\"c\">if(0 &gt; ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;\n        perror(&quot;ioctl error&quot;);\n        exit(-1);\n    &#125;\n    //获取最大触摸点\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(&quot;max slots: %d\\n&quot;,max_slots);\n    //申请存储触摸点数组空间\n    samp = calloc(max_slots, sizeof(struct ts_sample_mt));\n</code></pre>\n<p>3、读取触摸屏数据</p>\n<pre><code class=\"c\">//读触摸屏数据\nif(0&gt;ts_read_mt(ts, &amp;samp, max_slots, 1))&#123;\n    perror(&quot;ts_read error&quot;);\n    ts_close(ts);\n    exit(-1);\n&#125;\n</code></pre>\n<p>4、解算触摸屏坐标</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;poll.h&gt;\n#include &lt;linux/input.h&gt;\n#include &lt;tslib.h&gt;\n// 多点触摸实验\n// /dev/input/event1\n\n\nint main(int argc, char *argv[])&#123;\n    //tsdev是设备文件 tslib\n    struct tsdev *ts = NULL;\n    //sample是具体坐标信息\n    struct ts_sample_mt *samp = NULL;\n    struct input_absinfo info;\n    struct ts_mt *mt = NULL;\n    int max_slots;\n    \n    int pressure[12] = &#123;0&#125;;\n    //配置触摸屏\n    ts = ts_setup(NULL,0);\n    if(NULL==ts)&#123;\n        perror(&quot;ts_setup error&quot;);\n        exit(-1);\n    &#125;\n    //ts_fd获取触摸屏事件句柄，再获取触摸屏信息\n    if(0 &gt; ioctl(ts_fd(ts), EVIOCGABS(ABS_MT_SLOT), &amp;info))&#123;\n        perror(&quot;ioctl error&quot;);\n        exit(-1);\n    &#125;\n    //获取最大触摸点\n    max_slots = info.maximum + 1 - info.minimum;\n    printf(&quot;max slots: %d\\n&quot;,max_slots);\n    //申请存储触摸点数组空间\n    samp = calloc(max_slots, sizeof(struct ts_sample_mt));\n    for (;;)\n    &#123;\n        //读触摸屏数据\n        if(0&gt;ts_read_mt(ts, &amp;samp, max_slots, 1))&#123;\n            perror(&quot;ts_read error&quot;);\n            ts_close(ts);\n            exit(-1);\n        &#125;\n        for (size_t i = 0; i &lt; max_slots; i++)\n        &#123;\n            //触摸点状态发生改变\n            if(samp[i].valid)\n            &#123;\n                //判断压力是否大于0 是表示按下 否表示松开\n                if (samp[i].pressure)\n                &#123;\n                    //上一次压力为0表示刚按下 否则表示移动\n                    if(pressure[samp[i].slot]==0)&#123;\n                        printf(&quot;%d按下：x=%d y=%d\\n&quot;, samp[i].slot, samp[i].x, samp[i].y);\n                    &#125;\n                    else&#123;\n                        printf(&quot;%d移动：x=%d y=%d\\n&quot;, samp[i].slot, samp[i].x, samp[i].y);\n                    &#125;\n                &#125;\n                else&#123;\n                    printf(&quot;%d松开\\n&quot;, samp[i].slot);\n                &#125;\n            &#125;\n            //更新历史压力\n            pressure[samp[i].slot] = samp[i].pressure;\n        &#125;\n        \n        \n    &#125;\n    \n    ts_close(ts);\n    free(samp);\n    exit(0);\n&#125;\n</code></pre>\n"},{"title":"嵌入式Linux6-UART串口","date":"2024-02-06T15:09:33.000Z","toc":true,"_content":"\n# UART串口\n\n---\n\n## 1、UART串口配置结构体\n\n```c\nstruct termios\n  {\n    tcflag_t c_iflag;\t\t/* input mode flags */\n    tcflag_t c_oflag;\t\t/* output mode flags */\n    tcflag_t c_cflag;\t\t/* control mode flags */\n    tcflag_t c_lflag;\t\t/* local mode flags */\n    cc_t c_line;\t\t\t/* line discipline */\n    cc_t c_cc[NCCS];\t\t/* control characters */\n    speed_t c_ispeed;\t\t/* input speed */\n    speed_t c_ospeed;\t\t/* output speed */\n#define _HAVE_STRUCT_TERMIOS_C_ISPEED 1\n#define _HAVE_STRUCT_TERMIOS_C_OSPEED 1\n  };\n```\n\n串口属于一种终端设备，除此之外还包括常见的ssh等，它们都遵循终端统一的结构体termios，\n","source":"_posts/嵌入式Linux6-UART串口.md","raw":"---\ntitle: 嵌入式Linux6-UART串口\ndate: 2024-02-06 23:09:33\ntags:\ncategories: Linux嵌入式学习\ntoc: true\n---\n\n# UART串口\n\n---\n\n## 1、UART串口配置结构体\n\n```c\nstruct termios\n  {\n    tcflag_t c_iflag;\t\t/* input mode flags */\n    tcflag_t c_oflag;\t\t/* output mode flags */\n    tcflag_t c_cflag;\t\t/* control mode flags */\n    tcflag_t c_lflag;\t\t/* local mode flags */\n    cc_t c_line;\t\t\t/* line discipline */\n    cc_t c_cc[NCCS];\t\t/* control characters */\n    speed_t c_ispeed;\t\t/* input speed */\n    speed_t c_ospeed;\t\t/* output speed */\n#define _HAVE_STRUCT_TERMIOS_C_ISPEED 1\n#define _HAVE_STRUCT_TERMIOS_C_OSPEED 1\n  };\n```\n\n串口属于一种终端设备，除此之外还包括常见的ssh等，它们都遵循终端统一的结构体termios，\n","slug":"嵌入式Linux6-UART串口","published":1,"updated":"2024-07-05T16:06:02.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj8000q04vrcoro37fs","content":"<h1 id=\"UART串口\"><a href=\"#UART串口\" class=\"headerlink\" title=\"UART串口\"></a>UART串口</h1><hr>\n<h2 id=\"1、UART串口配置结构体\"><a href=\"#1、UART串口配置结构体\" class=\"headerlink\" title=\"1、UART串口配置结构体\"></a>1、UART串口配置结构体</h2><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> termios\n  <span class=\"token punctuation\">{</span>\n    tcflag_t c_iflag<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* input mode flags */</span>\n    tcflag_t c_oflag<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* output mode flags */</span>\n    tcflag_t c_cflag<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* control mode flags */</span>\n    tcflag_t c_lflag<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* local mode flags */</span>\n    cc_t c_line<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* line discipline */</span>\n    cc_t c_cc<span class=\"token punctuation\">[</span>NCCS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* control characters */</span>\n    speed_t c_ispeed<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* input speed */</span>\n    speed_t c_ospeed<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">/* output speed */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _HAVE_STRUCT_TERMIOS_C_ISPEED 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _HAVE_STRUCT_TERMIOS_C_OSPEED 1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>串口属于一种终端设备，除此之外还包括常见的ssh等，它们都遵循终端统一的结构体termios，</p>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"UART串口\"><a href=\"#UART串口\" class=\"headerlink\" title=\"UART串口\"></a>UART串口</h1><hr>\n<h2 id=\"1、UART串口配置结构体\"><a href=\"#1、UART串口配置结构体\" class=\"headerlink\" title=\"1、UART串口配置结构体\"></a>1、UART串口配置结构体</h2><pre><code class=\"c\">struct termios\n  &#123;\n    tcflag_t c_iflag;\t\t/* input mode flags */\n    tcflag_t c_oflag;\t\t/* output mode flags */\n    tcflag_t c_cflag;\t\t/* control mode flags */\n    tcflag_t c_lflag;\t\t/* local mode flags */\n    cc_t c_line;\t\t\t/* line discipline */\n    cc_t c_cc[NCCS];\t\t/* control characters */\n    speed_t c_ispeed;\t\t/* input speed */\n    speed_t c_ospeed;\t\t/* output speed */\n#define _HAVE_STRUCT_TERMIOS_C_ISPEED 1\n#define _HAVE_STRUCT_TERMIOS_C_OSPEED 1\n  &#125;;\n</code></pre>\n<p>串口属于一种终端设备，除此之外还包括常见的ssh等，它们都遵循终端统一的结构体termios，</p>\n"},{"title":"工作日志","date":"2024-07-05T13:57:10.000Z","toc":true,"_content":"\n### 3.19\n搭建环境\n同步器程序设计\n\n### 3.20\n同步器程序调试\n\n发送多路同步脉冲出，单脉冲，持续脉冲\n\n### 3.21\n同步器程序完成\n压力手掌分布接口布线\n鞋垫FPC接口设计\n\n### 3.22\n足底采集电路布线完成\n鞋垫接口测试\n\n### 3.25\nfpc连接接口设计完成\nADC采集程序调试\n\n右脚16pin在上\n\n### 3.26\n-电路设计ADC电容尽量靠近单片机，ADC芯片到单片机的输入输出高阻抗，中间走线尽可能短\n-adc走线需要注意下电流\n-退藕电容尽量靠近芯片引脚\n-AGND和GND需要分离，使用磁珠\n\n足底连接接口打板\n调试adc采集程序\n\n### 3.27\nadc采集程序移植完成\n学习STM32H7\n\n### 3.28\n学习STM32H7 ADC DMA DAC\n\n### 3.29\n学习STM32H7 IIC CAN\n\n### 4.1\n搭建ESP32环境\n熟悉足底压力程序\n\n### 4.2\n调试足底压力程序\n加入WIFI信号强度检测\n\n### 4.3\n调试足底压力adc采集逻辑\n\n### 4.7-8\n足底程序编写完成\n\n### 4.9-4.16\n测力台PCB设计完成\n重焊足底上板ADC芯片\n\nAD 3.3VA还没有解决 ADC加滤波\n\n### 4.17\n重焊足底上板ADC芯片，修好18片，一片不稳定（加热后第一次采集正常，之后全是0，可能出现FF），一片元件缺失\n测力台原理图更新，新增三色灯柱，急停开关，电机和传感器减少为16个\n\n### 4.18\nPCB设计完成打样\n三色灯柱、急停开关选型\n\n等待电路板的几天在学习步进电机驱动和LVGL\n\n### 4.28\n完成步进电机加速到匀速过程，采用T型加减速\nadc采集未触发IO中断\n\n### 4.29-30\nADC外部中断触发正常，spi读取正常，写入存在问题\nspi写入MCP3914寄存器存在问题，读取寄存器数据全部为FF，读取adc正常\n\n### 5.6\n调试spi，使用逻辑分析仪查看数据正常\n低速写入同样存在问题\n\n### 5.7\nspi写入仍然存在问题，怀疑芯片上锁，boost配置问题，检查后仍然写入失败\n调试过程板子烧了，单独供电3.3V，3A红外测温发现STM32单片机烧了\n更换了单片机，adc只有第一次数据正常，后面保持不变，DR引脚触发正常，怀疑adc芯片也烧坏了，无多余芯片，未更换，调试备用板\n\n### 5.8\nspi问题未解决，重新配置adc的时钟为1.05M\nadc采样频率为1050000/4/256=1025.390625Hz\n人体触摸力传感器出现频率为50Hz的噪声，采用陷波滤波器\n\n### 5.9\n测力台暂停\n标定台电机工作电磁干扰adc，更换电机\n\n### 5.10\n电机更换完成 \n学习DSP\n\n### 5.11\n通过matlab建立tcp服务器，将adc数据发送到matlab\n通过傅里叶变换，找到人体触摸传感器时的噪声频率，\n通过matlab的滤波器设计功能，加入陷波滤波器，导出参数，对adc进行滤波，效果显著\n\n### 5.13\n加入急停开关和三色灯柱接口\n测力台程序基本开发完成\n重构单独ADC采样程序，回到spi问题\n\n### 5.14\n重构程序，找到spi写入adc错误原因\nadc芯片RSTn引脚默认低电平，导致adc芯片未工作\n\n### 5.15-17\n移植gui guider程序到esp32中\n标定台mos烧了，修改电路，新增保险丝\n保险丝型号C6165156\n\n请假两天\n\n### 5.22\nesp32lvgl运行，触摸屏驱动采用定时查询\n机器人驱动器串口调试乱码\n\n### 5.23\n板子到了，驱动信号线和使能反了，飞线测试程序正常运行，烧错程序导致烧了一块板子\n\n### 5.24\n胶壳到了，给标定台压端子\n\n### 5.27\n标定台维修完成，测试电机工作时温度45°，长时间工作无温升\n\n### 5.28-6.14\nlvgl学习\nguiguider学习\n\n### 6.17-6.21\n腕力传感器协调\n出现的问题和总结：\n板对板连接器焊接保留沉金\n使用可调电源供电时，设备功率大约在1W，46V供电初始电流尽可能小，怀疑电流浪涌导致设备烧毁5台\n熟悉放大器，调零电阻\n\n### 6.22 加班\n腕力传感器标定\n软件设置adc量程错误，采样adc值超调，调整放大电阻还得调回去，等待软件修复\n\n### 6.24\n软件修复，换回放大电阻\n标定3台设备\n编写生产文档，和生产协调标定过程\n\n### 6.25\n和生产一起标定一台传感器\n文档上传\n医院项目电机商量，测试直线电机驱动器，使用官方调试线仍然通信失败，更换直线电机\n项目屏幕使用串口屏，购买屏幕测试\n\n/**********************************\n期间调试keil时，lvgl工程文件太多，编译实在太慢，更换V6编译器，使用lwip时出现的问题：\n\n使用V6编译器编译rtos项目时需要更换库路径，lwip需要更换cc.h文件下宏定义：\n//#if defined (__GNUC__) & !defined (__CC_ARM)\n#if defined (__GNUC__) && !defined (__CC_ARM) && !(defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))\n\nhttps://blog.csdn.net/qq_44642831/article/details/116303460\nlwip.c\n\nlwip移植成功，电脑无法ping通\n原因是编译时未勾选 use microlib（具体原因不清楚）\n***********************************/\n\n### 6.26-6.28\n屏幕驱动移植\nST7796\n屏幕一直无法点亮，使用逻辑分析仪查看SPI发送的数据正常，时序正常，使用的是野火电机开发板\n购买原厂底板准备测试\n\n### 7.1\n原厂底板测试屏幕正常，使用逻辑分析仪看底板SPI数据和我的程序对应的数据一模一样\n屏幕接回自己的板子仍然点不亮，\n无疑按下复位，屏幕点亮\n（没有找到原因，板子重启，重新下载程序无法直接点亮屏幕且led线程工作正常，必须手动按一下复位按键才能点亮屏幕，简直玄学！！！）\n触摸驱动移植成功GT911\n\n### 7.2\n跑台电机驱动协议分析\n使用逻辑分析仪监听跑台控制板向电机驱动发送的指令\n破解成功坡道角度控制，电机速度控制\n（最后找到商家，拿到了协议文档）\n\n### 7.3\nlvgl移植成功\n屏幕刷新率3s一帧，SPI的速度为21M\n无法满足要求，更换并口屏幕测试\n\n### 7.4\n使用H7测试并口屏\n\nLTDC驱动移植成功\n\n（遇到的问题：测试时屏幕显示又两层，只开启了一层导致显示被第二层覆盖，以为驱动移植存在问题）\n\nFFT变换同振幅多频率叠加时，频域图振幅错误\n\n","source":"_posts/工作日志.md","raw":"---\ntitle: 工作日志\ndate: 2024-07-05 21:57:10\ntags:\ncategories: 工作日志\ntoc: true\n---\n\n### 3.19\n搭建环境\n同步器程序设计\n\n### 3.20\n同步器程序调试\n\n发送多路同步脉冲出，单脉冲，持续脉冲\n\n### 3.21\n同步器程序完成\n压力手掌分布接口布线\n鞋垫FPC接口设计\n\n### 3.22\n足底采集电路布线完成\n鞋垫接口测试\n\n### 3.25\nfpc连接接口设计完成\nADC采集程序调试\n\n右脚16pin在上\n\n### 3.26\n-电路设计ADC电容尽量靠近单片机，ADC芯片到单片机的输入输出高阻抗，中间走线尽可能短\n-adc走线需要注意下电流\n-退藕电容尽量靠近芯片引脚\n-AGND和GND需要分离，使用磁珠\n\n足底连接接口打板\n调试adc采集程序\n\n### 3.27\nadc采集程序移植完成\n学习STM32H7\n\n### 3.28\n学习STM32H7 ADC DMA DAC\n\n### 3.29\n学习STM32H7 IIC CAN\n\n### 4.1\n搭建ESP32环境\n熟悉足底压力程序\n\n### 4.2\n调试足底压力程序\n加入WIFI信号强度检测\n\n### 4.3\n调试足底压力adc采集逻辑\n\n### 4.7-8\n足底程序编写完成\n\n### 4.9-4.16\n测力台PCB设计完成\n重焊足底上板ADC芯片\n\nAD 3.3VA还没有解决 ADC加滤波\n\n### 4.17\n重焊足底上板ADC芯片，修好18片，一片不稳定（加热后第一次采集正常，之后全是0，可能出现FF），一片元件缺失\n测力台原理图更新，新增三色灯柱，急停开关，电机和传感器减少为16个\n\n### 4.18\nPCB设计完成打样\n三色灯柱、急停开关选型\n\n等待电路板的几天在学习步进电机驱动和LVGL\n\n### 4.28\n完成步进电机加速到匀速过程，采用T型加减速\nadc采集未触发IO中断\n\n### 4.29-30\nADC外部中断触发正常，spi读取正常，写入存在问题\nspi写入MCP3914寄存器存在问题，读取寄存器数据全部为FF，读取adc正常\n\n### 5.6\n调试spi，使用逻辑分析仪查看数据正常\n低速写入同样存在问题\n\n### 5.7\nspi写入仍然存在问题，怀疑芯片上锁，boost配置问题，检查后仍然写入失败\n调试过程板子烧了，单独供电3.3V，3A红外测温发现STM32单片机烧了\n更换了单片机，adc只有第一次数据正常，后面保持不变，DR引脚触发正常，怀疑adc芯片也烧坏了，无多余芯片，未更换，调试备用板\n\n### 5.8\nspi问题未解决，重新配置adc的时钟为1.05M\nadc采样频率为1050000/4/256=1025.390625Hz\n人体触摸力传感器出现频率为50Hz的噪声，采用陷波滤波器\n\n### 5.9\n测力台暂停\n标定台电机工作电磁干扰adc，更换电机\n\n### 5.10\n电机更换完成 \n学习DSP\n\n### 5.11\n通过matlab建立tcp服务器，将adc数据发送到matlab\n通过傅里叶变换，找到人体触摸传感器时的噪声频率，\n通过matlab的滤波器设计功能，加入陷波滤波器，导出参数，对adc进行滤波，效果显著\n\n### 5.13\n加入急停开关和三色灯柱接口\n测力台程序基本开发完成\n重构单独ADC采样程序，回到spi问题\n\n### 5.14\n重构程序，找到spi写入adc错误原因\nadc芯片RSTn引脚默认低电平，导致adc芯片未工作\n\n### 5.15-17\n移植gui guider程序到esp32中\n标定台mos烧了，修改电路，新增保险丝\n保险丝型号C6165156\n\n请假两天\n\n### 5.22\nesp32lvgl运行，触摸屏驱动采用定时查询\n机器人驱动器串口调试乱码\n\n### 5.23\n板子到了，驱动信号线和使能反了，飞线测试程序正常运行，烧错程序导致烧了一块板子\n\n### 5.24\n胶壳到了，给标定台压端子\n\n### 5.27\n标定台维修完成，测试电机工作时温度45°，长时间工作无温升\n\n### 5.28-6.14\nlvgl学习\nguiguider学习\n\n### 6.17-6.21\n腕力传感器协调\n出现的问题和总结：\n板对板连接器焊接保留沉金\n使用可调电源供电时，设备功率大约在1W，46V供电初始电流尽可能小，怀疑电流浪涌导致设备烧毁5台\n熟悉放大器，调零电阻\n\n### 6.22 加班\n腕力传感器标定\n软件设置adc量程错误，采样adc值超调，调整放大电阻还得调回去，等待软件修复\n\n### 6.24\n软件修复，换回放大电阻\n标定3台设备\n编写生产文档，和生产协调标定过程\n\n### 6.25\n和生产一起标定一台传感器\n文档上传\n医院项目电机商量，测试直线电机驱动器，使用官方调试线仍然通信失败，更换直线电机\n项目屏幕使用串口屏，购买屏幕测试\n\n/**********************************\n期间调试keil时，lvgl工程文件太多，编译实在太慢，更换V6编译器，使用lwip时出现的问题：\n\n使用V6编译器编译rtos项目时需要更换库路径，lwip需要更换cc.h文件下宏定义：\n//#if defined (__GNUC__) & !defined (__CC_ARM)\n#if defined (__GNUC__) && !defined (__CC_ARM) && !(defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))\n\nhttps://blog.csdn.net/qq_44642831/article/details/116303460\nlwip.c\n\nlwip移植成功，电脑无法ping通\n原因是编译时未勾选 use microlib（具体原因不清楚）\n***********************************/\n\n### 6.26-6.28\n屏幕驱动移植\nST7796\n屏幕一直无法点亮，使用逻辑分析仪查看SPI发送的数据正常，时序正常，使用的是野火电机开发板\n购买原厂底板准备测试\n\n### 7.1\n原厂底板测试屏幕正常，使用逻辑分析仪看底板SPI数据和我的程序对应的数据一模一样\n屏幕接回自己的板子仍然点不亮，\n无疑按下复位，屏幕点亮\n（没有找到原因，板子重启，重新下载程序无法直接点亮屏幕且led线程工作正常，必须手动按一下复位按键才能点亮屏幕，简直玄学！！！）\n触摸驱动移植成功GT911\n\n### 7.2\n跑台电机驱动协议分析\n使用逻辑分析仪监听跑台控制板向电机驱动发送的指令\n破解成功坡道角度控制，电机速度控制\n（最后找到商家，拿到了协议文档）\n\n### 7.3\nlvgl移植成功\n屏幕刷新率3s一帧，SPI的速度为21M\n无法满足要求，更换并口屏幕测试\n\n### 7.4\n使用H7测试并口屏\n\nLTDC驱动移植成功\n\n（遇到的问题：测试时屏幕显示又两层，只开启了一层导致显示被第二层覆盖，以为驱动移植存在问题）\n\nFFT变换同振幅多频率叠加时，频域图振幅错误\n\n","slug":"工作日志","published":1,"updated":"2024-07-05T16:05:23.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj8000r04vr4etnfrd3","content":"<h3 id=\"3-19\"><a href=\"#3-19\" class=\"headerlink\" title=\"3.19\"></a>3.19</h3><p>搭建环境<br>同步器程序设计</p>\n<h3 id=\"3-20\"><a href=\"#3-20\" class=\"headerlink\" title=\"3.20\"></a>3.20</h3><p>同步器程序调试</p>\n<p>发送多路同步脉冲出，单脉冲，持续脉冲</p>\n<h3 id=\"3-21\"><a href=\"#3-21\" class=\"headerlink\" title=\"3.21\"></a>3.21</h3><p>同步器程序完成<br>压力手掌分布接口布线<br>鞋垫FPC接口设计</p>\n<h3 id=\"3-22\"><a href=\"#3-22\" class=\"headerlink\" title=\"3.22\"></a>3.22</h3><p>足底采集电路布线完成<br>鞋垫接口测试</p>\n<h3 id=\"3-25\"><a href=\"#3-25\" class=\"headerlink\" title=\"3.25\"></a>3.25</h3><p>fpc连接接口设计完成<br>ADC采集程序调试</p>\n<p>右脚16pin在上</p>\n<h3 id=\"3-26\"><a href=\"#3-26\" class=\"headerlink\" title=\"3.26\"></a>3.26</h3><p>-电路设计ADC电容尽量靠近单片机，ADC芯片到单片机的输入输出高阻抗，中间走线尽可能短<br>-adc走线需要注意下电流<br>-退藕电容尽量靠近芯片引脚<br>-AGND和GND需要分离，使用磁珠</p>\n<p>足底连接接口打板<br>调试adc采集程序</p>\n<h3 id=\"3-27\"><a href=\"#3-27\" class=\"headerlink\" title=\"3.27\"></a>3.27</h3><p>adc采集程序移植完成<br>学习STM32H7</p>\n<h3 id=\"3-28\"><a href=\"#3-28\" class=\"headerlink\" title=\"3.28\"></a>3.28</h3><p>学习STM32H7 ADC DMA DAC</p>\n<h3 id=\"3-29\"><a href=\"#3-29\" class=\"headerlink\" title=\"3.29\"></a>3.29</h3><p>学习STM32H7 IIC CAN</p>\n<h3 id=\"4-1\"><a href=\"#4-1\" class=\"headerlink\" title=\"4.1\"></a>4.1</h3><p>搭建ESP32环境<br>熟悉足底压力程序</p>\n<h3 id=\"4-2\"><a href=\"#4-2\" class=\"headerlink\" title=\"4.2\"></a>4.2</h3><p>调试足底压力程序<br>加入WIFI信号强度检测</p>\n<h3 id=\"4-3\"><a href=\"#4-3\" class=\"headerlink\" title=\"4.3\"></a>4.3</h3><p>调试足底压力adc采集逻辑</p>\n<h3 id=\"4-7-8\"><a href=\"#4-7-8\" class=\"headerlink\" title=\"4.7-8\"></a>4.7-8</h3><p>足底程序编写完成</p>\n<h3 id=\"4-9-4-16\"><a href=\"#4-9-4-16\" class=\"headerlink\" title=\"4.9-4.16\"></a>4.9-4.16</h3><p>测力台PCB设计完成<br>重焊足底上板ADC芯片</p>\n<p>AD 3.3VA还没有解决 ADC加滤波</p>\n<h3 id=\"4-17\"><a href=\"#4-17\" class=\"headerlink\" title=\"4.17\"></a>4.17</h3><p>重焊足底上板ADC芯片，修好18片，一片不稳定（加热后第一次采集正常，之后全是0，可能出现FF），一片元件缺失<br>测力台原理图更新，新增三色灯柱，急停开关，电机和传感器减少为16个</p>\n<h3 id=\"4-18\"><a href=\"#4-18\" class=\"headerlink\" title=\"4.18\"></a>4.18</h3><p>PCB设计完成打样<br>三色灯柱、急停开关选型</p>\n<p>等待电路板的几天在学习步进电机驱动和LVGL</p>\n<h3 id=\"4-28\"><a href=\"#4-28\" class=\"headerlink\" title=\"4.28\"></a>4.28</h3><p>完成步进电机加速到匀速过程，采用T型加减速<br>adc采集未触发IO中断</p>\n<h3 id=\"4-29-30\"><a href=\"#4-29-30\" class=\"headerlink\" title=\"4.29-30\"></a>4.29-30</h3><p>ADC外部中断触发正常，spi读取正常，写入存在问题<br>spi写入MCP3914寄存器存在问题，读取寄存器数据全部为FF，读取adc正常</p>\n<h3 id=\"5-6\"><a href=\"#5-6\" class=\"headerlink\" title=\"5.6\"></a>5.6</h3><p>调试spi，使用逻辑分析仪查看数据正常<br>低速写入同样存在问题</p>\n<h3 id=\"5-7\"><a href=\"#5-7\" class=\"headerlink\" title=\"5.7\"></a>5.7</h3><p>spi写入仍然存在问题，怀疑芯片上锁，boost配置问题，检查后仍然写入失败<br>调试过程板子烧了，单独供电3.3V，3A红外测温发现STM32单片机烧了<br>更换了单片机，adc只有第一次数据正常，后面保持不变，DR引脚触发正常，怀疑adc芯片也烧坏了，无多余芯片，未更换，调试备用板</p>\n<h3 id=\"5-8\"><a href=\"#5-8\" class=\"headerlink\" title=\"5.8\"></a>5.8</h3><p>spi问题未解决，重新配置adc的时钟为1.05M<br>adc采样频率为1050000&#x2F;4&#x2F;256&#x3D;1025.390625Hz<br>人体触摸力传感器出现频率为50Hz的噪声，采用陷波滤波器</p>\n<h3 id=\"5-9\"><a href=\"#5-9\" class=\"headerlink\" title=\"5.9\"></a>5.9</h3><p>测力台暂停<br>标定台电机工作电磁干扰adc，更换电机</p>\n<h3 id=\"5-10\"><a href=\"#5-10\" class=\"headerlink\" title=\"5.10\"></a>5.10</h3><p>电机更换完成<br>学习DSP</p>\n<h3 id=\"5-11\"><a href=\"#5-11\" class=\"headerlink\" title=\"5.11\"></a>5.11</h3><p>通过matlab建立tcp服务器，将adc数据发送到matlab<br>通过傅里叶变换，找到人体触摸传感器时的噪声频率，<br>通过matlab的滤波器设计功能，加入陷波滤波器，导出参数，对adc进行滤波，效果显著</p>\n<h3 id=\"5-13\"><a href=\"#5-13\" class=\"headerlink\" title=\"5.13\"></a>5.13</h3><p>加入急停开关和三色灯柱接口<br>测力台程序基本开发完成<br>重构单独ADC采样程序，回到spi问题</p>\n<h3 id=\"5-14\"><a href=\"#5-14\" class=\"headerlink\" title=\"5.14\"></a>5.14</h3><p>重构程序，找到spi写入adc错误原因<br>adc芯片RSTn引脚默认低电平，导致adc芯片未工作</p>\n<h3 id=\"5-15-17\"><a href=\"#5-15-17\" class=\"headerlink\" title=\"5.15-17\"></a>5.15-17</h3><p>移植gui guider程序到esp32中<br>标定台mos烧了，修改电路，新增保险丝<br>保险丝型号C6165156</p>\n<p>请假两天</p>\n<h3 id=\"5-22\"><a href=\"#5-22\" class=\"headerlink\" title=\"5.22\"></a>5.22</h3><p>esp32lvgl运行，触摸屏驱动采用定时查询<br>机器人驱动器串口调试乱码</p>\n<h3 id=\"5-23\"><a href=\"#5-23\" class=\"headerlink\" title=\"5.23\"></a>5.23</h3><p>板子到了，驱动信号线和使能反了，飞线测试程序正常运行，烧错程序导致烧了一块板子</p>\n<h3 id=\"5-24\"><a href=\"#5-24\" class=\"headerlink\" title=\"5.24\"></a>5.24</h3><p>胶壳到了，给标定台压端子</p>\n<h3 id=\"5-27\"><a href=\"#5-27\" class=\"headerlink\" title=\"5.27\"></a>5.27</h3><p>标定台维修完成，测试电机工作时温度45°，长时间工作无温升</p>\n<h3 id=\"5-28-6-14\"><a href=\"#5-28-6-14\" class=\"headerlink\" title=\"5.28-6.14\"></a>5.28-6.14</h3><p>lvgl学习<br>guiguider学习</p>\n<h3 id=\"6-17-6-21\"><a href=\"#6-17-6-21\" class=\"headerlink\" title=\"6.17-6.21\"></a>6.17-6.21</h3><p>腕力传感器协调<br>出现的问题和总结：<br>板对板连接器焊接保留沉金<br>使用可调电源供电时，设备功率大约在1W，46V供电初始电流尽可能小，怀疑电流浪涌导致设备烧毁5台<br>熟悉放大器，调零电阻</p>\n<h3 id=\"6-22-加班\"><a href=\"#6-22-加班\" class=\"headerlink\" title=\"6.22 加班\"></a>6.22 加班</h3><p>腕力传感器标定<br>软件设置adc量程错误，采样adc值超调，调整放大电阻还得调回去，等待软件修复</p>\n<h3 id=\"6-24\"><a href=\"#6-24\" class=\"headerlink\" title=\"6.24\"></a>6.24</h3><p>软件修复，换回放大电阻<br>标定3台设备<br>编写生产文档，和生产协调标定过程</p>\n<h3 id=\"6-25\"><a href=\"#6-25\" class=\"headerlink\" title=\"6.25\"></a>6.25</h3><p>和生产一起标定一台传感器<br>文档上传<br>医院项目电机商量，测试直线电机驱动器，使用官方调试线仍然通信失败，更换直线电机<br>项目屏幕使用串口屏，购买屏幕测试</p>\n<p>&#x2F;**********************************<br>期间调试keil时，lvgl工程文件太多，编译实在太慢，更换V6编译器，使用lwip时出现的问题：</p>\n<p>使用V6编译器编译rtos项目时需要更换库路径，lwip需要更换cc.h文件下宏定义：<br>&#x2F;&#x2F;#if defined (<strong>GNUC</strong>) &amp; !defined (__CC_ARM)<br>#if defined (<strong>GNUC</strong>) &amp;&amp; !defined (__CC_ARM) &amp;&amp; !(defined(__ARMCC_VERSION) &amp;&amp; (__ARMCC_VERSION &gt;&#x3D; 6010050))</p>\n<p><a href=\"https://blog.csdn.net/qq_44642831/article/details/116303460\">https://blog.csdn.net/qq_44642831/article/details/116303460</a><br>lwip.c</p>\n<p>lwip移植成功，电脑无法ping通<br>原因是编译时未勾选 use microlib（具体原因不清楚）<br>***********************************&#x2F;</p>\n<h3 id=\"6-26-6-28\"><a href=\"#6-26-6-28\" class=\"headerlink\" title=\"6.26-6.28\"></a>6.26-6.28</h3><p>屏幕驱动移植<br>ST7796<br>屏幕一直无法点亮，使用逻辑分析仪查看SPI发送的数据正常，时序正常，使用的是野火电机开发板<br>购买原厂底板准备测试</p>\n<h3 id=\"7-1\"><a href=\"#7-1\" class=\"headerlink\" title=\"7.1\"></a>7.1</h3><p>原厂底板测试屏幕正常，使用逻辑分析仪看底板SPI数据和我的程序对应的数据一模一样<br>屏幕接回自己的板子仍然点不亮，<br>无疑按下复位，屏幕点亮<br>（没有找到原因，板子重启，重新下载程序无法直接点亮屏幕且led线程工作正常，必须手动按一下复位按键才能点亮屏幕，简直玄学！！！）<br>触摸驱动移植成功GT911</p>\n<h3 id=\"7-2\"><a href=\"#7-2\" class=\"headerlink\" title=\"7.2\"></a>7.2</h3><p>跑台电机驱动协议分析<br>使用逻辑分析仪监听跑台控制板向电机驱动发送的指令<br>破解成功坡道角度控制，电机速度控制<br>（最后找到商家，拿到了协议文档）</p>\n<h3 id=\"7-3\"><a href=\"#7-3\" class=\"headerlink\" title=\"7.3\"></a>7.3</h3><p>lvgl移植成功<br>屏幕刷新率3s一帧，SPI的速度为21M<br>无法满足要求，更换并口屏幕测试</p>\n<h3 id=\"7-4\"><a href=\"#7-4\" class=\"headerlink\" title=\"7.4\"></a>7.4</h3><p>使用H7测试并口屏</p>\n<p>LTDC驱动移植成功</p>\n<p>（遇到的问题：测试时屏幕显示又两层，只开启了一层导致显示被第二层覆盖，以为驱动移植存在问题）</p>\n<p>FFT变换同振幅多频率叠加时，频域图振幅错误</p>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h3 id=\"3-19\"><a href=\"#3-19\" class=\"headerlink\" title=\"3.19\"></a>3.19</h3><p>搭建环境<br>同步器程序设计</p>\n<h3 id=\"3-20\"><a href=\"#3-20\" class=\"headerlink\" title=\"3.20\"></a>3.20</h3><p>同步器程序调试</p>\n<p>发送多路同步脉冲出，单脉冲，持续脉冲</p>\n<h3 id=\"3-21\"><a href=\"#3-21\" class=\"headerlink\" title=\"3.21\"></a>3.21</h3><p>同步器程序完成<br>压力手掌分布接口布线<br>鞋垫FPC接口设计</p>\n<h3 id=\"3-22\"><a href=\"#3-22\" class=\"headerlink\" title=\"3.22\"></a>3.22</h3><p>足底采集电路布线完成<br>鞋垫接口测试</p>\n<h3 id=\"3-25\"><a href=\"#3-25\" class=\"headerlink\" title=\"3.25\"></a>3.25</h3><p>fpc连接接口设计完成<br>ADC采集程序调试</p>\n<p>右脚16pin在上</p>\n<h3 id=\"3-26\"><a href=\"#3-26\" class=\"headerlink\" title=\"3.26\"></a>3.26</h3><p>-电路设计ADC电容尽量靠近单片机，ADC芯片到单片机的输入输出高阻抗，中间走线尽可能短<br>-adc走线需要注意下电流<br>-退藕电容尽量靠近芯片引脚<br>-AGND和GND需要分离，使用磁珠</p>\n<p>足底连接接口打板<br>调试adc采集程序</p>\n<h3 id=\"3-27\"><a href=\"#3-27\" class=\"headerlink\" title=\"3.27\"></a>3.27</h3><p>adc采集程序移植完成<br>学习STM32H7</p>\n<h3 id=\"3-28\"><a href=\"#3-28\" class=\"headerlink\" title=\"3.28\"></a>3.28</h3><p>学习STM32H7 ADC DMA DAC</p>\n<h3 id=\"3-29\"><a href=\"#3-29\" class=\"headerlink\" title=\"3.29\"></a>3.29</h3><p>学习STM32H7 IIC CAN</p>\n<h3 id=\"4-1\"><a href=\"#4-1\" class=\"headerlink\" title=\"4.1\"></a>4.1</h3><p>搭建ESP32环境<br>熟悉足底压力程序</p>\n<h3 id=\"4-2\"><a href=\"#4-2\" class=\"headerlink\" title=\"4.2\"></a>4.2</h3><p>调试足底压力程序<br>加入WIFI信号强度检测</p>\n<h3 id=\"4-3\"><a href=\"#4-3\" class=\"headerlink\" title=\"4.3\"></a>4.3</h3><p>调试足底压力adc采集逻辑</p>\n<h3 id=\"4-7-8\"><a href=\"#4-7-8\" class=\"headerlink\" title=\"4.7-8\"></a>4.7-8</h3><p>足底程序编写完成</p>\n<h3 id=\"4-9-4-16\"><a href=\"#4-9-4-16\" class=\"headerlink\" title=\"4.9-4.16\"></a>4.9-4.16</h3><p>测力台PCB设计完成<br>重焊足底上板ADC芯片</p>\n<p>AD 3.3VA还没有解决 ADC加滤波</p>\n<h3 id=\"4-17\"><a href=\"#4-17\" class=\"headerlink\" title=\"4.17\"></a>4.17</h3><p>重焊足底上板ADC芯片，修好18片，一片不稳定（加热后第一次采集正常，之后全是0，可能出现FF），一片元件缺失<br>测力台原理图更新，新增三色灯柱，急停开关，电机和传感器减少为16个</p>\n<h3 id=\"4-18\"><a href=\"#4-18\" class=\"headerlink\" title=\"4.18\"></a>4.18</h3><p>PCB设计完成打样<br>三色灯柱、急停开关选型</p>\n<p>等待电路板的几天在学习步进电机驱动和LVGL</p>\n<h3 id=\"4-28\"><a href=\"#4-28\" class=\"headerlink\" title=\"4.28\"></a>4.28</h3><p>完成步进电机加速到匀速过程，采用T型加减速<br>adc采集未触发IO中断</p>\n<h3 id=\"4-29-30\"><a href=\"#4-29-30\" class=\"headerlink\" title=\"4.29-30\"></a>4.29-30</h3><p>ADC外部中断触发正常，spi读取正常，写入存在问题<br>spi写入MCP3914寄存器存在问题，读取寄存器数据全部为FF，读取adc正常</p>\n<h3 id=\"5-6\"><a href=\"#5-6\" class=\"headerlink\" title=\"5.6\"></a>5.6</h3><p>调试spi，使用逻辑分析仪查看数据正常<br>低速写入同样存在问题</p>\n<h3 id=\"5-7\"><a href=\"#5-7\" class=\"headerlink\" title=\"5.7\"></a>5.7</h3><p>spi写入仍然存在问题，怀疑芯片上锁，boost配置问题，检查后仍然写入失败<br>调试过程板子烧了，单独供电3.3V，3A红外测温发现STM32单片机烧了<br>更换了单片机，adc只有第一次数据正常，后面保持不变，DR引脚触发正常，怀疑adc芯片也烧坏了，无多余芯片，未更换，调试备用板</p>\n<h3 id=\"5-8\"><a href=\"#5-8\" class=\"headerlink\" title=\"5.8\"></a>5.8</h3><p>spi问题未解决，重新配置adc的时钟为1.05M<br>adc采样频率为1050000&#x2F;4&#x2F;256&#x3D;1025.390625Hz<br>人体触摸力传感器出现频率为50Hz的噪声，采用陷波滤波器</p>\n<h3 id=\"5-9\"><a href=\"#5-9\" class=\"headerlink\" title=\"5.9\"></a>5.9</h3><p>测力台暂停<br>标定台电机工作电磁干扰adc，更换电机</p>\n<h3 id=\"5-10\"><a href=\"#5-10\" class=\"headerlink\" title=\"5.10\"></a>5.10</h3><p>电机更换完成<br>学习DSP</p>\n<h3 id=\"5-11\"><a href=\"#5-11\" class=\"headerlink\" title=\"5.11\"></a>5.11</h3><p>通过matlab建立tcp服务器，将adc数据发送到matlab<br>通过傅里叶变换，找到人体触摸传感器时的噪声频率，<br>通过matlab的滤波器设计功能，加入陷波滤波器，导出参数，对adc进行滤波，效果显著</p>\n<h3 id=\"5-13\"><a href=\"#5-13\" class=\"headerlink\" title=\"5.13\"></a>5.13</h3><p>加入急停开关和三色灯柱接口<br>测力台程序基本开发完成<br>重构单独ADC采样程序，回到spi问题</p>\n<h3 id=\"5-14\"><a href=\"#5-14\" class=\"headerlink\" title=\"5.14\"></a>5.14</h3><p>重构程序，找到spi写入adc错误原因<br>adc芯片RSTn引脚默认低电平，导致adc芯片未工作</p>\n<h3 id=\"5-15-17\"><a href=\"#5-15-17\" class=\"headerlink\" title=\"5.15-17\"></a>5.15-17</h3><p>移植gui guider程序到esp32中<br>标定台mos烧了，修改电路，新增保险丝<br>保险丝型号C6165156</p>\n<p>请假两天</p>\n<h3 id=\"5-22\"><a href=\"#5-22\" class=\"headerlink\" title=\"5.22\"></a>5.22</h3><p>esp32lvgl运行，触摸屏驱动采用定时查询<br>机器人驱动器串口调试乱码</p>\n<h3 id=\"5-23\"><a href=\"#5-23\" class=\"headerlink\" title=\"5.23\"></a>5.23</h3><p>板子到了，驱动信号线和使能反了，飞线测试程序正常运行，烧错程序导致烧了一块板子</p>\n<h3 id=\"5-24\"><a href=\"#5-24\" class=\"headerlink\" title=\"5.24\"></a>5.24</h3><p>胶壳到了，给标定台压端子</p>\n<h3 id=\"5-27\"><a href=\"#5-27\" class=\"headerlink\" title=\"5.27\"></a>5.27</h3><p>标定台维修完成，测试电机工作时温度45°，长时间工作无温升</p>\n<h3 id=\"5-28-6-14\"><a href=\"#5-28-6-14\" class=\"headerlink\" title=\"5.28-6.14\"></a>5.28-6.14</h3><p>lvgl学习<br>guiguider学习</p>\n<h3 id=\"6-17-6-21\"><a href=\"#6-17-6-21\" class=\"headerlink\" title=\"6.17-6.21\"></a>6.17-6.21</h3><p>腕力传感器协调<br>出现的问题和总结：<br>板对板连接器焊接保留沉金<br>使用可调电源供电时，设备功率大约在1W，46V供电初始电流尽可能小，怀疑电流浪涌导致设备烧毁5台<br>熟悉放大器，调零电阻</p>\n<h3 id=\"6-22-加班\"><a href=\"#6-22-加班\" class=\"headerlink\" title=\"6.22 加班\"></a>6.22 加班</h3><p>腕力传感器标定<br>软件设置adc量程错误，采样adc值超调，调整放大电阻还得调回去，等待软件修复</p>\n<h3 id=\"6-24\"><a href=\"#6-24\" class=\"headerlink\" title=\"6.24\"></a>6.24</h3><p>软件修复，换回放大电阻<br>标定3台设备<br>编写生产文档，和生产协调标定过程</p>\n<h3 id=\"6-25\"><a href=\"#6-25\" class=\"headerlink\" title=\"6.25\"></a>6.25</h3><p>和生产一起标定一台传感器<br>文档上传<br>医院项目电机商量，测试直线电机驱动器，使用官方调试线仍然通信失败，更换直线电机<br>项目屏幕使用串口屏，购买屏幕测试</p>\n<p>&#x2F;**********************************<br>期间调试keil时，lvgl工程文件太多，编译实在太慢，更换V6编译器，使用lwip时出现的问题：</p>\n<p>使用V6编译器编译rtos项目时需要更换库路径，lwip需要更换cc.h文件下宏定义：<br>&#x2F;&#x2F;#if defined (<strong>GNUC</strong>) &amp; !defined (__CC_ARM)<br>#if defined (<strong>GNUC</strong>) &amp;&amp; !defined (__CC_ARM) &amp;&amp; !(defined(__ARMCC_VERSION) &amp;&amp; (__ARMCC_VERSION &gt;&#x3D; 6010050))</p>\n<p><a href=\"https://blog.csdn.net/qq_44642831/article/details/116303460\">https://blog.csdn.net/qq_44642831/article/details/116303460</a><br>lwip.c</p>\n<p>lwip移植成功，电脑无法ping通<br>原因是编译时未勾选 use microlib（具体原因不清楚）<br>***********************************&#x2F;</p>\n<h3 id=\"6-26-6-28\"><a href=\"#6-26-6-28\" class=\"headerlink\" title=\"6.26-6.28\"></a>6.26-6.28</h3><p>屏幕驱动移植<br>ST7796<br>屏幕一直无法点亮，使用逻辑分析仪查看SPI发送的数据正常，时序正常，使用的是野火电机开发板<br>购买原厂底板准备测试</p>\n<h3 id=\"7-1\"><a href=\"#7-1\" class=\"headerlink\" title=\"7.1\"></a>7.1</h3><p>原厂底板测试屏幕正常，使用逻辑分析仪看底板SPI数据和我的程序对应的数据一模一样<br>屏幕接回自己的板子仍然点不亮，<br>无疑按下复位，屏幕点亮<br>（没有找到原因，板子重启，重新下载程序无法直接点亮屏幕且led线程工作正常，必须手动按一下复位按键才能点亮屏幕，简直玄学！！！）<br>触摸驱动移植成功GT911</p>\n<h3 id=\"7-2\"><a href=\"#7-2\" class=\"headerlink\" title=\"7.2\"></a>7.2</h3><p>跑台电机驱动协议分析<br>使用逻辑分析仪监听跑台控制板向电机驱动发送的指令<br>破解成功坡道角度控制，电机速度控制<br>（最后找到商家，拿到了协议文档）</p>\n<h3 id=\"7-3\"><a href=\"#7-3\" class=\"headerlink\" title=\"7.3\"></a>7.3</h3><p>lvgl移植成功<br>屏幕刷新率3s一帧，SPI的速度为21M<br>无法满足要求，更换并口屏幕测试</p>\n<h3 id=\"7-4\"><a href=\"#7-4\" class=\"headerlink\" title=\"7.4\"></a>7.4</h3><p>使用H7测试并口屏</p>\n<p>LTDC驱动移植成功</p>\n<p>（遇到的问题：测试时屏幕显示又两层，只开启了一层导致显示被第二层覆盖，以为驱动移植存在问题）</p>\n<p>FFT变换同振幅多频率叠加时，频域图振幅错误</p>\n"},{"title":"虫子移动问题","date":"2024-01-16T13:41:05.000Z","toc":true,"_content":"\n# 虫子移动问题\n\n## 1、问题描述：\n\n存在一个5行12列的表格，第一列有5只虫子，编号1，2，3，4，5；每只虫子的移动方向只能是向右、右上方、右下方三种方向；5只虫子进行移动操作后到达第二列，要求每一行都存在一只虫子，同样的要求，五只虫子要到达第12列，虫子每次移动操作对应着不同的权重矩阵相加，虫子从第1列到达第12列的过程存在很多种权重矩阵和，找出权重矩阵方差最小的路线。问题简化如下：\n\n![image-20240116215034998](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240116215034998.png)\n\n## 简化：\n\n存在一个5*12的表格，第一列为1~5，每个数可以进行-1，不变，+1的操作，进入到下一列，要求进入到下一列的五个数范围还在1~5，且不能重复，每次操作对应不同的权重矩阵，求到第12列时，权重矩阵方差最小的移动方案。\n\n## 2、求解思路：\n\n已知1~5个数字任意组合一共有5！（120）种方案，通过暴力破解验证得到每种组合按照题目要求移动一列都存在8种情况，这样可以知道一共有120*8种生成子集，可以通过查表法省去迭代的时间。先建立一个列表，一维空间为10000，查表下标计算为六进制，考虑一共有5个数，数字范围在1~5且不重复，**使用六进制可以间接的描述出表的下标，存在的缺陷就是造成空间浪费，实际只有120个下标用到**，二维空间为对应的8种情况序列。建表过程为：\n\n```python\nnumbers = [1, 2, 3, 4, 5]\n# 列出所有排列\npermutations = list(itertools.permutations(numbers))\n# 对每个排列进行操作，并计算结果\nresults = set()\nfor perm in permutations:\n    result = sum([perm[i] * (6**(4-i)) for i in range(5)])\n    results.add(result)\nfrom itertools import product\noperations = [-1, 0, 1]\ninitial_case = [1, 2, 3, 4, 5]\ninitial_operations = list(product(operations, repeat=len(initial_case)))\n# 暴力破解得到每种情况移动后的子情况\ndef getdata(initial_case ):\n    valid_initial_cases = []\n    for ops in initial_operations:\n        new_numbers = [n + op for n, op in zip(initial_case, ops)]\n        if len(set(new_numbers)) == len(new_numbers) and all(1 <= num <= 5 for num in new_numbers):\n            valid_initial_cases.append(new_numbers)\n    return valid_initial_cases\ntable = [0]*10000\nfor perm in permutations:\n    table[sum([perm[i] * (6**(4-i)) for i in range(5)])] = getdata(perm)\n```\n\n这样在每次移动时只需要通过查表法得到子情况集，不需要再进行迭代求解，节约一定时间。建立查表法生成树结构来描述所有情况，在叶子节点可以求解当前路径的权重矩阵方差，记录最小的权重矩阵的值和移动路径。\n\n## 3、运行结果：\n\n构建深度为12的树，且每个节点存在8个子节点，尽管使用查表法省去一定的时间，但是庞大的基数仍然时问题无法求解，最后优化下求解出深度为8时的最优路径：\n\n![76e2d06a407a2f804d2c0f779d49c3c](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/76e2d06a407a2f804d2c0f779d49c3c.png)\n\n耗时3分钟，往后每增加一层，时间增加8倍，**理论求解出12层的时间为8天，于是果断放弃！**\n\n## 4、程序源码：\n\n```python\nimport itertools\nimport pickle\nfrom copy import deepcopy\nimport time\nimport numpy as np\nimport itertools\n\nnumbers = [1, 2, 3, 4, 5]\n# 列出所有排列\npermutations = list(itertools.permutations(numbers))\n# 对每个排列进行操作，并计算结果\nresults = set()\nfor perm in permutations:\n    result = sum([perm[i] * (6**(4-i)) for i in range(5)])\n    results.add(result)\nfrom itertools import product\noperations = [-1, 0, 1]\ninitial_case = [1, 2, 3, 4, 5]\ninitial_operations = list(product(operations, repeat=len(initial_case)))\ndef getdata(initial_case ):\n    valid_initial_cases = []\n    for ops in initial_operations:\n        new_numbers = [n + op for n, op in zip(initial_case, ops)]\n        if len(set(new_numbers)) == len(new_numbers) and all(1 <= num <= 5 for num in new_numbers):\n            valid_initial_cases.append(new_numbers)\n    return valid_initial_cases\ntable = [0]*10000\nfor perm in permutations:\n    table[sum([perm[i] * (6**(4-i)) for i in range(5)])] = getdata(perm)\n\ninitial_case = [1,2,3,4,5]\n# print(table[sum([initial_case[i] * (6**(4-i)) for i in range(5)])])\nwith open(\"my_list.pkl\", \"wb\") as file:\n    pickle.dump(table, file)\n\nclass TreeNode:\n    def __init__(self, value):\n        self.value = deepcopy(value)\n        self.children = []\n# 创建树\nroot = TreeNode(1)\n# root.value.append(initial_case)\nroot.value = [initial_case]\n\ndef getNode(initial_case, Node):\n    for numbers in iter(table[sum([initial_case[i] * (6 ** (4 - i)) for i in range(5)])]):\n        Node.children.append(TreeNode(numbers))\n    return Node.children\n\nstart_time = time.time()\ndataa = np.load('../../../../../../Documents/WeChat Files/wxid_fm5zrvq5j2an22/FileStorage/File/2024-01/value.npy')\nminfangcha = 100000000\nprint(dataa.shape)\nsave_result = []\n\n# for nums in root.value:\nTree = getNode(root.value[0], root)\n#----------------第二维度\nfor children1 in Tree:\n    Tree1 = getNode(children1.value, children1)\n    #----------------第三维度\n    for children2 in Tree1:\n        Tree2 = getNode(children2.value, children2)\n        #----------------第四维度\n        for children3 in Tree2:\n            Tree3 = getNode(children3.value, children3)\n            #----------------第五维度\n            for children4 in Tree3:\n                Tree4 = getNode(children4.value, children4)\n                #----------------第六维度\n                for children5 in Tree4:\n                    Tree5 = getNode(children5.value, children5)\n                    #----------------第七维度\n                    for children6 in Tree5:\n                        Tree6 = getNode(children6.value, children6)\n                        for children7 in Tree6:\n                            result = []\n\n                            indices = [root.value[0].index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children1.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children2.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children3.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children4.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children5.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children6.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children7.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            result = list(map(list, zip(*result)))\n\n                            bianliang1 = dataa[result[0][0]][0] + dataa[result[0][1]][1] + dataa[result[0][2]][2] + \\\n                                        dataa[result[0][3]][3] + dataa[result[0][4]][4] + dataa[result[0][5]][5] + \\\n                                        dataa[result[0][6]][6] + dataa[result[0][7]][7]\n                            bianliang2 = dataa[result[1][0]][0] + dataa[result[1][1]][1] + dataa[result[1][2]][2] + \\\n                                        dataa[result[1][3]][3] + dataa[result[1][4]][4] + dataa[result[1][5]][5] + \\\n                                        dataa[result[1][6]][6] + dataa[result[1][7]][7]\n                            bianliang3 = dataa[result[2][0]][0] + dataa[result[2][1]][1] + dataa[result[2][2]][2] + \\\n                                        dataa[result[2][3]][3] + dataa[result[2][4]][4] + dataa[result[2][5]][5] + \\\n                                        dataa[result[2][6]][6] + dataa[result[2][7]][7]\n                            bianliang4 = dataa[result[3][0]][0] + dataa[result[3][1]][1] + dataa[result[3][2]][2] + \\\n                                        dataa[result[3][3]][3] + dataa[result[3][4]][4] + dataa[result[3][5]][5] + \\\n                                        dataa[result[3][6]][6] + dataa[result[3][7]][7]\n                            bianliang5 = dataa[result[4][0]][0] + dataa[result[4][1]][1] + dataa[result[4][2]][2] + \\\n                                        dataa[result[4][3]][3] + dataa[result[4][4]][4] + dataa[result[4][5]][5] + \\\n                                        dataa[result[4][6]][6] + dataa[result[4][7]][7]\n                            bianliang = (bianliang1 + bianliang2 + bianliang3 + bianliang4 + bianliang5) / 5\n                            fangcha = np.sum((bianliang - bianliang1)**2) + np.sum((bianliang - bianliang2)**2) + \\\n                                      np.sum((bianliang - bianliang3)**2) + np.sum((bianliang - bianliang4)**2) + \\\n                                      np.sum((bianliang - bianliang5)**2)\n                            if fangcha < minfangcha:\n                                minfangcha = fangcha\n                                save_result = result\n\n# 记录结束时间\nend_time = time.time()\n# 计算执行时间\nexecution_time = end_time - start_time\n# 打印执行时间\nprint(f\"程序执行时间: {execution_time} 秒\")\nprint(minfangcha)\nprint(save_result)\n# for nums in root.children:\n#     print(nums.value)\n```\n\n","source":"_posts/虫子移动问题.md","raw":"---\ntitle: 虫子移动问题\ndate: 2024-01-16 21:41:05\ntags:\ncategories: 算法\ntoc: true\n---\n\n# 虫子移动问题\n\n## 1、问题描述：\n\n存在一个5行12列的表格，第一列有5只虫子，编号1，2，3，4，5；每只虫子的移动方向只能是向右、右上方、右下方三种方向；5只虫子进行移动操作后到达第二列，要求每一行都存在一只虫子，同样的要求，五只虫子要到达第12列，虫子每次移动操作对应着不同的权重矩阵相加，虫子从第1列到达第12列的过程存在很多种权重矩阵和，找出权重矩阵方差最小的路线。问题简化如下：\n\n![image-20240116215034998](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240116215034998.png)\n\n## 简化：\n\n存在一个5*12的表格，第一列为1~5，每个数可以进行-1，不变，+1的操作，进入到下一列，要求进入到下一列的五个数范围还在1~5，且不能重复，每次操作对应不同的权重矩阵，求到第12列时，权重矩阵方差最小的移动方案。\n\n## 2、求解思路：\n\n已知1~5个数字任意组合一共有5！（120）种方案，通过暴力破解验证得到每种组合按照题目要求移动一列都存在8种情况，这样可以知道一共有120*8种生成子集，可以通过查表法省去迭代的时间。先建立一个列表，一维空间为10000，查表下标计算为六进制，考虑一共有5个数，数字范围在1~5且不重复，**使用六进制可以间接的描述出表的下标，存在的缺陷就是造成空间浪费，实际只有120个下标用到**，二维空间为对应的8种情况序列。建表过程为：\n\n```python\nnumbers = [1, 2, 3, 4, 5]\n# 列出所有排列\npermutations = list(itertools.permutations(numbers))\n# 对每个排列进行操作，并计算结果\nresults = set()\nfor perm in permutations:\n    result = sum([perm[i] * (6**(4-i)) for i in range(5)])\n    results.add(result)\nfrom itertools import product\noperations = [-1, 0, 1]\ninitial_case = [1, 2, 3, 4, 5]\ninitial_operations = list(product(operations, repeat=len(initial_case)))\n# 暴力破解得到每种情况移动后的子情况\ndef getdata(initial_case ):\n    valid_initial_cases = []\n    for ops in initial_operations:\n        new_numbers = [n + op for n, op in zip(initial_case, ops)]\n        if len(set(new_numbers)) == len(new_numbers) and all(1 <= num <= 5 for num in new_numbers):\n            valid_initial_cases.append(new_numbers)\n    return valid_initial_cases\ntable = [0]*10000\nfor perm in permutations:\n    table[sum([perm[i] * (6**(4-i)) for i in range(5)])] = getdata(perm)\n```\n\n这样在每次移动时只需要通过查表法得到子情况集，不需要再进行迭代求解，节约一定时间。建立查表法生成树结构来描述所有情况，在叶子节点可以求解当前路径的权重矩阵方差，记录最小的权重矩阵的值和移动路径。\n\n## 3、运行结果：\n\n构建深度为12的树，且每个节点存在8个子节点，尽管使用查表法省去一定的时间，但是庞大的基数仍然时问题无法求解，最后优化下求解出深度为8时的最优路径：\n\n![76e2d06a407a2f804d2c0f779d49c3c](http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/76e2d06a407a2f804d2c0f779d49c3c.png)\n\n耗时3分钟，往后每增加一层，时间增加8倍，**理论求解出12层的时间为8天，于是果断放弃！**\n\n## 4、程序源码：\n\n```python\nimport itertools\nimport pickle\nfrom copy import deepcopy\nimport time\nimport numpy as np\nimport itertools\n\nnumbers = [1, 2, 3, 4, 5]\n# 列出所有排列\npermutations = list(itertools.permutations(numbers))\n# 对每个排列进行操作，并计算结果\nresults = set()\nfor perm in permutations:\n    result = sum([perm[i] * (6**(4-i)) for i in range(5)])\n    results.add(result)\nfrom itertools import product\noperations = [-1, 0, 1]\ninitial_case = [1, 2, 3, 4, 5]\ninitial_operations = list(product(operations, repeat=len(initial_case)))\ndef getdata(initial_case ):\n    valid_initial_cases = []\n    for ops in initial_operations:\n        new_numbers = [n + op for n, op in zip(initial_case, ops)]\n        if len(set(new_numbers)) == len(new_numbers) and all(1 <= num <= 5 for num in new_numbers):\n            valid_initial_cases.append(new_numbers)\n    return valid_initial_cases\ntable = [0]*10000\nfor perm in permutations:\n    table[sum([perm[i] * (6**(4-i)) for i in range(5)])] = getdata(perm)\n\ninitial_case = [1,2,3,4,5]\n# print(table[sum([initial_case[i] * (6**(4-i)) for i in range(5)])])\nwith open(\"my_list.pkl\", \"wb\") as file:\n    pickle.dump(table, file)\n\nclass TreeNode:\n    def __init__(self, value):\n        self.value = deepcopy(value)\n        self.children = []\n# 创建树\nroot = TreeNode(1)\n# root.value.append(initial_case)\nroot.value = [initial_case]\n\ndef getNode(initial_case, Node):\n    for numbers in iter(table[sum([initial_case[i] * (6 ** (4 - i)) for i in range(5)])]):\n        Node.children.append(TreeNode(numbers))\n    return Node.children\n\nstart_time = time.time()\ndataa = np.load('../../../../../../Documents/WeChat Files/wxid_fm5zrvq5j2an22/FileStorage/File/2024-01/value.npy')\nminfangcha = 100000000\nprint(dataa.shape)\nsave_result = []\n\n# for nums in root.value:\nTree = getNode(root.value[0], root)\n#----------------第二维度\nfor children1 in Tree:\n    Tree1 = getNode(children1.value, children1)\n    #----------------第三维度\n    for children2 in Tree1:\n        Tree2 = getNode(children2.value, children2)\n        #----------------第四维度\n        for children3 in Tree2:\n            Tree3 = getNode(children3.value, children3)\n            #----------------第五维度\n            for children4 in Tree3:\n                Tree4 = getNode(children4.value, children4)\n                #----------------第六维度\n                for children5 in Tree4:\n                    Tree5 = getNode(children5.value, children5)\n                    #----------------第七维度\n                    for children6 in Tree5:\n                        Tree6 = getNode(children6.value, children6)\n                        for children7 in Tree6:\n                            result = []\n\n                            indices = [root.value[0].index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children1.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children2.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children3.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children4.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children5.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children6.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children7.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            result = list(map(list, zip(*result)))\n\n                            bianliang1 = dataa[result[0][0]][0] + dataa[result[0][1]][1] + dataa[result[0][2]][2] + \\\n                                        dataa[result[0][3]][3] + dataa[result[0][4]][4] + dataa[result[0][5]][5] + \\\n                                        dataa[result[0][6]][6] + dataa[result[0][7]][7]\n                            bianliang2 = dataa[result[1][0]][0] + dataa[result[1][1]][1] + dataa[result[1][2]][2] + \\\n                                        dataa[result[1][3]][3] + dataa[result[1][4]][4] + dataa[result[1][5]][5] + \\\n                                        dataa[result[1][6]][6] + dataa[result[1][7]][7]\n                            bianliang3 = dataa[result[2][0]][0] + dataa[result[2][1]][1] + dataa[result[2][2]][2] + \\\n                                        dataa[result[2][3]][3] + dataa[result[2][4]][4] + dataa[result[2][5]][5] + \\\n                                        dataa[result[2][6]][6] + dataa[result[2][7]][7]\n                            bianliang4 = dataa[result[3][0]][0] + dataa[result[3][1]][1] + dataa[result[3][2]][2] + \\\n                                        dataa[result[3][3]][3] + dataa[result[3][4]][4] + dataa[result[3][5]][5] + \\\n                                        dataa[result[3][6]][6] + dataa[result[3][7]][7]\n                            bianliang5 = dataa[result[4][0]][0] + dataa[result[4][1]][1] + dataa[result[4][2]][2] + \\\n                                        dataa[result[4][3]][3] + dataa[result[4][4]][4] + dataa[result[4][5]][5] + \\\n                                        dataa[result[4][6]][6] + dataa[result[4][7]][7]\n                            bianliang = (bianliang1 + bianliang2 + bianliang3 + bianliang4 + bianliang5) / 5\n                            fangcha = np.sum((bianliang - bianliang1)**2) + np.sum((bianliang - bianliang2)**2) + \\\n                                      np.sum((bianliang - bianliang3)**2) + np.sum((bianliang - bianliang4)**2) + \\\n                                      np.sum((bianliang - bianliang5)**2)\n                            if fangcha < minfangcha:\n                                minfangcha = fangcha\n                                save_result = result\n\n# 记录结束时间\nend_time = time.time()\n# 计算执行时间\nexecution_time = end_time - start_time\n# 打印执行时间\nprint(f\"程序执行时间: {execution_time} 秒\")\nprint(minfangcha)\nprint(save_result)\n# for nums in root.children:\n#     print(nums.value)\n```\n\n","slug":"虫子移动问题","published":1,"updated":"2024-07-05T16:05:53.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cly9xaoj9000u04vr4kmf5da4","content":"<h1 id=\"虫子移动问题\"><a href=\"#虫子移动问题\" class=\"headerlink\" title=\"虫子移动问题\"></a>虫子移动问题</h1><h2 id=\"1、问题描述：\"><a href=\"#1、问题描述：\" class=\"headerlink\" title=\"1、问题描述：\"></a>1、问题描述：</h2><p>存在一个5行12列的表格，第一列有5只虫子，编号1，2，3，4，5；每只虫子的移动方向只能是向右、右上方、右下方三种方向；5只虫子进行移动操作后到达第二列，要求每一行都存在一只虫子，同样的要求，五只虫子要到达第12列，虫子每次移动操作对应着不同的权重矩阵相加，虫子从第1列到达第12列的过程存在很多种权重矩阵和，找出权重矩阵方差最小的路线。问题简化如下：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240116215034998.png\" alt=\"image-20240116215034998\"></p>\n<h2 id=\"简化：\"><a href=\"#简化：\" class=\"headerlink\" title=\"简化：\"></a>简化：</h2><p>存在一个5*12的表格，第一列为1<del>5，每个数可以进行-1，不变，+1的操作，进入到下一列，要求进入到下一列的五个数范围还在1</del>5，且不能重复，每次操作对应不同的权重矩阵，求到第12列时，权重矩阵方差最小的移动方案。</p>\n<h2 id=\"2、求解思路：\"><a href=\"#2、求解思路：\" class=\"headerlink\" title=\"2、求解思路：\"></a>2、求解思路：</h2><p>已知1<del>5个数字任意组合一共有5！（120）种方案，通过暴力破解验证得到每种组合按照题目要求移动一列都存在8种情况，这样可以知道一共有120*8种生成子集，可以通过查表法省去迭代的时间。先建立一个列表，一维空间为10000，查表下标计算为六进制，考虑一共有5个数，数字范围在1</del>5且不重复，<strong>使用六进制可以间接的描述出表的下标，存在的缺陷就是造成空间浪费，实际只有120个下标用到</strong>，二维空间为对应的8种情况序列。建表过程为：</p>\n<pre class=\" language-python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 列出所有排列</span>\npermutations <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>itertools<span class=\"token punctuation\">.</span>permutations<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 对每个排列进行操作，并计算结果</span>\nresults <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> perm <span class=\"token keyword\">in</span> permutations<span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>perm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    results<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> product\noperations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ninitial_case <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ninitial_operations <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">(</span>operations<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>initial_case<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 暴力破解得到每种情况移动后的子情况</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">getdata</span><span class=\"token punctuation\">(</span>initial_case <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    valid_initial_cases <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> ops <span class=\"token keyword\">in</span> initial_operations<span class=\"token punctuation\">:</span>\n        new_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> op <span class=\"token keyword\">for</span> n<span class=\"token punctuation\">,</span> op <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>initial_case<span class=\"token punctuation\">,</span> ops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">(</span>new_numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> len<span class=\"token punctuation\">(</span>new_numbers<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> all<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> new_numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            valid_initial_cases<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>new_numbers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> valid_initial_cases\ntable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">10000</span>\n<span class=\"token keyword\">for</span> perm <span class=\"token keyword\">in</span> permutations<span class=\"token punctuation\">:</span>\n    table<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>perm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> getdata<span class=\"token punctuation\">(</span>perm<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这样在每次移动时只需要通过查表法得到子情况集，不需要再进行迭代求解，节约一定时间。建立查表法生成树结构来描述所有情况，在叶子节点可以求解当前路径的权重矩阵方差，记录最小的权重矩阵的值和移动路径。</p>\n<h2 id=\"3、运行结果：\"><a href=\"#3、运行结果：\" class=\"headerlink\" title=\"3、运行结果：\"></a>3、运行结果：</h2><p>构建深度为12的树，且每个节点存在8个子节点，尽管使用查表法省去一定的时间，但是庞大的基数仍然时问题无法求解，最后优化下求解出深度为8时的最优路径：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/76e2d06a407a2f804d2c0f779d49c3c.png\" alt=\"76e2d06a407a2f804d2c0f779d49c3c\"></p>\n<p>耗时3分钟，往后每增加一层，时间增加8倍，<strong>理论求解出12层的时间为8天，于是果断放弃！</strong></p>\n<h2 id=\"4、程序源码：\"><a href=\"#4、程序源码：\" class=\"headerlink\" title=\"4、程序源码：\"></a>4、程序源码：</h2><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools\n<span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">from</span> copy <span class=\"token keyword\">import</span> deepcopy\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> itertools\n\nnumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 列出所有排列</span>\npermutations <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>itertools<span class=\"token punctuation\">.</span>permutations<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 对每个排列进行操作，并计算结果</span>\nresults <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> perm <span class=\"token keyword\">in</span> permutations<span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>perm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    results<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> product\noperations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ninitial_case <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ninitial_operations <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">(</span>operations<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>initial_case<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">getdata</span><span class=\"token punctuation\">(</span>initial_case <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    valid_initial_cases <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> ops <span class=\"token keyword\">in</span> initial_operations<span class=\"token punctuation\">:</span>\n        new_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> op <span class=\"token keyword\">for</span> n<span class=\"token punctuation\">,</span> op <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>initial_case<span class=\"token punctuation\">,</span> ops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">(</span>new_numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> len<span class=\"token punctuation\">(</span>new_numbers<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> all<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> new_numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            valid_initial_cases<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>new_numbers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> valid_initial_cases\ntable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">10000</span>\n<span class=\"token keyword\">for</span> perm <span class=\"token keyword\">in</span> permutations<span class=\"token punctuation\">:</span>\n    table<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>perm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> getdata<span class=\"token punctuation\">(</span>perm<span class=\"token punctuation\">)</span>\n\ninitial_case <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># print(table[sum([initial_case[i] * (6**(4-i)) for i in range(5)])])</span>\n<span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">\"my_list.pkl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file<span class=\"token punctuation\">:</span>\n    pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> deepcopy<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 创建树</span>\nroot <span class=\"token operator\">=</span> TreeNode<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># root.value.append(initial_case)</span>\nroot<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>initial_case<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>initial_case<span class=\"token punctuation\">,</span> Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> numbers <span class=\"token keyword\">in</span> iter<span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>initial_case<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>TreeNode<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Node<span class=\"token punctuation\">.</span>children\n\nstart_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndataa <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">'../../../../../../Documents/WeChat Files/wxid_fm5zrvq5j2an22/FileStorage/File/2024-01/value.npy'</span><span class=\"token punctuation\">)</span>\nminfangcha <span class=\"token operator\">=</span> <span class=\"token number\">100000000</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dataa<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\nsave_result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># for nums in root.value:</span>\nTree <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#----------------第二维度</span>\n<span class=\"token keyword\">for</span> children1 <span class=\"token keyword\">in</span> Tree<span class=\"token punctuation\">:</span>\n    Tree1 <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>children1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> children1<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#----------------第三维度</span>\n    <span class=\"token keyword\">for</span> children2 <span class=\"token keyword\">in</span> Tree1<span class=\"token punctuation\">:</span>\n        Tree2 <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>children2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> children2<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#----------------第四维度</span>\n        <span class=\"token keyword\">for</span> children3 <span class=\"token keyword\">in</span> Tree2<span class=\"token punctuation\">:</span>\n            Tree3 <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>children3<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> children3<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">#----------------第五维度</span>\n            <span class=\"token keyword\">for</span> children4 <span class=\"token keyword\">in</span> Tree3<span class=\"token punctuation\">:</span>\n                Tree4 <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>children4<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> children4<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\" spellcheck=\"true\">#----------------第六维度</span>\n                <span class=\"token keyword\">for</span> children5 <span class=\"token keyword\">in</span> Tree4<span class=\"token punctuation\">:</span>\n                    Tree5 <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>children5<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> children5<span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\" spellcheck=\"true\">#----------------第七维度</span>\n                    <span class=\"token keyword\">for</span> children6 <span class=\"token keyword\">in</span> Tree5<span class=\"token punctuation\">:</span>\n                        Tree6 <span class=\"token operator\">=</span> getNode<span class=\"token punctuation\">(</span>children6<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> children6<span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">for</span> children7 <span class=\"token keyword\">in</span> Tree6<span class=\"token punctuation\">:</span>\n                            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children3<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children4<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children5<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children6<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>children7<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                            result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">)</span>\n                            result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> zip<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                            bianliang1 <span class=\"token operator\">=</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n                            bianliang2 <span class=\"token operator\">=</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n                            bianliang3 <span class=\"token operator\">=</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n                            bianliang4 <span class=\"token operator\">=</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n                            bianliang5 <span class=\"token operator\">=</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> \\\n                                        dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dataa<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n                            bianliang <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bianliang1 <span class=\"token operator\">+</span> bianliang2 <span class=\"token operator\">+</span> bianliang3 <span class=\"token operator\">+</span> bianliang4 <span class=\"token operator\">+</span> bianliang5<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span>\n                            fangcha <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bianliang <span class=\"token operator\">-</span> bianliang1<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bianliang <span class=\"token operator\">-</span> bianliang2<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n                                      np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bianliang <span class=\"token operator\">-</span> bianliang3<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bianliang <span class=\"token operator\">-</span> bianliang4<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \\\n                                      np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bianliang <span class=\"token operator\">-</span> bianliang5<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token keyword\">if</span> fangcha <span class=\"token operator\">&lt;</span> minfangcha<span class=\"token punctuation\">:</span>\n                                minfangcha <span class=\"token operator\">=</span> fangcha\n                                save_result <span class=\"token operator\">=</span> result\n\n<span class=\"token comment\" spellcheck=\"true\"># 记录结束时间</span>\nend_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 计算执行时间</span>\nexecution_time <span class=\"token operator\">=</span> end_time <span class=\"token operator\">-</span> start_time\n<span class=\"token comment\" spellcheck=\"true\"># 打印执行时间</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token string\">\"程序执行时间: {execution_time} 秒\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>minfangcha<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>save_result<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># for nums in root.children:</span>\n<span class=\"token comment\" spellcheck=\"true\">#     print(nums.value)</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"","name":"github","introduction":"ActorJing","url":"https://github.com/ActorJing","title":"github"}]}},"excerpt":"","more":"<h1 id=\"虫子移动问题\"><a href=\"#虫子移动问题\" class=\"headerlink\" title=\"虫子移动问题\"></a>虫子移动问题</h1><h2 id=\"1、问题描述：\"><a href=\"#1、问题描述：\" class=\"headerlink\" title=\"1、问题描述：\"></a>1、问题描述：</h2><p>存在一个5行12列的表格，第一列有5只虫子，编号1，2，3，4，5；每只虫子的移动方向只能是向右、右上方、右下方三种方向；5只虫子进行移动操作后到达第二列，要求每一行都存在一只虫子，同样的要求，五只虫子要到达第12列，虫子每次移动操作对应着不同的权重矩阵相加，虫子从第1列到达第12列的过程存在很多种权重矩阵和，找出权重矩阵方差最小的路线。问题简化如下：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240116215034998.png\" alt=\"image-20240116215034998\"></p>\n<h2 id=\"简化：\"><a href=\"#简化：\" class=\"headerlink\" title=\"简化：\"></a>简化：</h2><p>存在一个5*12的表格，第一列为1<del>5，每个数可以进行-1，不变，+1的操作，进入到下一列，要求进入到下一列的五个数范围还在1</del>5，且不能重复，每次操作对应不同的权重矩阵，求到第12列时，权重矩阵方差最小的移动方案。</p>\n<h2 id=\"2、求解思路：\"><a href=\"#2、求解思路：\" class=\"headerlink\" title=\"2、求解思路：\"></a>2、求解思路：</h2><p>已知1<del>5个数字任意组合一共有5！（120）种方案，通过暴力破解验证得到每种组合按照题目要求移动一列都存在8种情况，这样可以知道一共有120*8种生成子集，可以通过查表法省去迭代的时间。先建立一个列表，一维空间为10000，查表下标计算为六进制，考虑一共有5个数，数字范围在1</del>5且不重复，<strong>使用六进制可以间接的描述出表的下标，存在的缺陷就是造成空间浪费，实际只有120个下标用到</strong>，二维空间为对应的8种情况序列。建表过程为：</p>\n<pre><code class=\"python\">numbers = [1, 2, 3, 4, 5]\n# 列出所有排列\npermutations = list(itertools.permutations(numbers))\n# 对每个排列进行操作，并计算结果\nresults = set()\nfor perm in permutations:\n    result = sum([perm[i] * (6**(4-i)) for i in range(5)])\n    results.add(result)\nfrom itertools import product\noperations = [-1, 0, 1]\ninitial_case = [1, 2, 3, 4, 5]\ninitial_operations = list(product(operations, repeat=len(initial_case)))\n# 暴力破解得到每种情况移动后的子情况\ndef getdata(initial_case ):\n    valid_initial_cases = []\n    for ops in initial_operations:\n        new_numbers = [n + op for n, op in zip(initial_case, ops)]\n        if len(set(new_numbers)) == len(new_numbers) and all(1 &lt;= num &lt;= 5 for num in new_numbers):\n            valid_initial_cases.append(new_numbers)\n    return valid_initial_cases\ntable = [0]*10000\nfor perm in permutations:\n    table[sum([perm[i] * (6**(4-i)) for i in range(5)])] = getdata(perm)\n</code></pre>\n<p>这样在每次移动时只需要通过查表法得到子情况集，不需要再进行迭代求解，节约一定时间。建立查表法生成树结构来描述所有情况，在叶子节点可以求解当前路径的权重矩阵方差，记录最小的权重矩阵的值和移动路径。</p>\n<h2 id=\"3、运行结果：\"><a href=\"#3、运行结果：\" class=\"headerlink\" title=\"3、运行结果：\"></a>3、运行结果：</h2><p>构建深度为12的树，且每个节点存在8个子节点，尽管使用查表法省去一定的时间，但是庞大的基数仍然时问题无法求解，最后优化下求解出深度为8时的最优路径：</p>\n<p><img src=\"http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/76e2d06a407a2f804d2c0f779d49c3c.png\" alt=\"76e2d06a407a2f804d2c0f779d49c3c\"></p>\n<p>耗时3分钟，往后每增加一层，时间增加8倍，<strong>理论求解出12层的时间为8天，于是果断放弃！</strong></p>\n<h2 id=\"4、程序源码：\"><a href=\"#4、程序源码：\" class=\"headerlink\" title=\"4、程序源码：\"></a>4、程序源码：</h2><pre><code class=\"python\">import itertools\nimport pickle\nfrom copy import deepcopy\nimport time\nimport numpy as np\nimport itertools\n\nnumbers = [1, 2, 3, 4, 5]\n# 列出所有排列\npermutations = list(itertools.permutations(numbers))\n# 对每个排列进行操作，并计算结果\nresults = set()\nfor perm in permutations:\n    result = sum([perm[i] * (6**(4-i)) for i in range(5)])\n    results.add(result)\nfrom itertools import product\noperations = [-1, 0, 1]\ninitial_case = [1, 2, 3, 4, 5]\ninitial_operations = list(product(operations, repeat=len(initial_case)))\ndef getdata(initial_case ):\n    valid_initial_cases = []\n    for ops in initial_operations:\n        new_numbers = [n + op for n, op in zip(initial_case, ops)]\n        if len(set(new_numbers)) == len(new_numbers) and all(1 &lt;= num &lt;= 5 for num in new_numbers):\n            valid_initial_cases.append(new_numbers)\n    return valid_initial_cases\ntable = [0]*10000\nfor perm in permutations:\n    table[sum([perm[i] * (6**(4-i)) for i in range(5)])] = getdata(perm)\n\ninitial_case = [1,2,3,4,5]\n# print(table[sum([initial_case[i] * (6**(4-i)) for i in range(5)])])\nwith open(&quot;my_list.pkl&quot;, &quot;wb&quot;) as file:\n    pickle.dump(table, file)\n\nclass TreeNode:\n    def __init__(self, value):\n        self.value = deepcopy(value)\n        self.children = []\n# 创建树\nroot = TreeNode(1)\n# root.value.append(initial_case)\nroot.value = [initial_case]\n\ndef getNode(initial_case, Node):\n    for numbers in iter(table[sum([initial_case[i] * (6 ** (4 - i)) for i in range(5)])]):\n        Node.children.append(TreeNode(numbers))\n    return Node.children\n\nstart_time = time.time()\ndataa = np.load(&#39;../../../../../../Documents/WeChat Files/wxid_fm5zrvq5j2an22/FileStorage/File/2024-01/value.npy&#39;)\nminfangcha = 100000000\nprint(dataa.shape)\nsave_result = []\n\n# for nums in root.value:\nTree = getNode(root.value[0], root)\n#----------------第二维度\nfor children1 in Tree:\n    Tree1 = getNode(children1.value, children1)\n    #----------------第三维度\n    for children2 in Tree1:\n        Tree2 = getNode(children2.value, children2)\n        #----------------第四维度\n        for children3 in Tree2:\n            Tree3 = getNode(children3.value, children3)\n            #----------------第五维度\n            for children4 in Tree3:\n                Tree4 = getNode(children4.value, children4)\n                #----------------第六维度\n                for children5 in Tree4:\n                    Tree5 = getNode(children5.value, children5)\n                    #----------------第七维度\n                    for children6 in Tree5:\n                        Tree6 = getNode(children6.value, children6)\n                        for children7 in Tree6:\n                            result = []\n\n                            indices = [root.value[0].index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children1.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children2.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children3.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children4.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children5.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children6.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            indices = [children7.value.index(num) for num in range(1, 6)]\n                            result.append(indices)\n                            result = list(map(list, zip(*result)))\n\n                            bianliang1 = dataa[result[0][0]][0] + dataa[result[0][1]][1] + dataa[result[0][2]][2] + \\\n                                        dataa[result[0][3]][3] + dataa[result[0][4]][4] + dataa[result[0][5]][5] + \\\n                                        dataa[result[0][6]][6] + dataa[result[0][7]][7]\n                            bianliang2 = dataa[result[1][0]][0] + dataa[result[1][1]][1] + dataa[result[1][2]][2] + \\\n                                        dataa[result[1][3]][3] + dataa[result[1][4]][4] + dataa[result[1][5]][5] + \\\n                                        dataa[result[1][6]][6] + dataa[result[1][7]][7]\n                            bianliang3 = dataa[result[2][0]][0] + dataa[result[2][1]][1] + dataa[result[2][2]][2] + \\\n                                        dataa[result[2][3]][3] + dataa[result[2][4]][4] + dataa[result[2][5]][5] + \\\n                                        dataa[result[2][6]][6] + dataa[result[2][7]][7]\n                            bianliang4 = dataa[result[3][0]][0] + dataa[result[3][1]][1] + dataa[result[3][2]][2] + \\\n                                        dataa[result[3][3]][3] + dataa[result[3][4]][4] + dataa[result[3][5]][5] + \\\n                                        dataa[result[3][6]][6] + dataa[result[3][7]][7]\n                            bianliang5 = dataa[result[4][0]][0] + dataa[result[4][1]][1] + dataa[result[4][2]][2] + \\\n                                        dataa[result[4][3]][3] + dataa[result[4][4]][4] + dataa[result[4][5]][5] + \\\n                                        dataa[result[4][6]][6] + dataa[result[4][7]][7]\n                            bianliang = (bianliang1 + bianliang2 + bianliang3 + bianliang4 + bianliang5) / 5\n                            fangcha = np.sum((bianliang - bianliang1)**2) + np.sum((bianliang - bianliang2)**2) + \\\n                                      np.sum((bianliang - bianliang3)**2) + np.sum((bianliang - bianliang4)**2) + \\\n                                      np.sum((bianliang - bianliang5)**2)\n                            if fangcha &lt; minfangcha:\n                                minfangcha = fangcha\n                                save_result = result\n\n# 记录结束时间\nend_time = time.time()\n# 计算执行时间\nexecution_time = end_time - start_time\n# 打印执行时间\nprint(f&quot;程序执行时间: &#123;execution_time&#125; 秒&quot;)\nprint(minfangcha)\nprint(save_result)\n# for nums in root.children:\n#     print(nums.value)\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cly9xaoiw000104vr8xg50l45","category_id":"cly9xaoj0000404vr62lmg4rn","_id":"cly9xaoj5000g04vr8f6e59ox"},{"post_id":"cly9xaoj4000d04vrekvh5w4b","category_id":"cly9xaoj0000404vr62lmg4rn","_id":"cly9xaoj6000j04vrezfq5l70"},{"post_id":"cly9xaoiz000304vr3lggb8iq","category_id":"cly9xaoj0000404vr62lmg4rn","_id":"cly9xaoj7000m04vr2jum33pu"},{"post_id":"cly9xaoj1000604vr4dnq7z99","category_id":"cly9xaoj0000404vr62lmg4rn","_id":"cly9xaoj7000o04vr5lj00jjq"},{"post_id":"cly9xaoj1000804vr33ed34so","category_id":"cly9xaoj6000k04vr8aowaypc","_id":"cly9xaoj8000s04vratb460at"},{"post_id":"cly9xaoj8000q04vrcoro37fs","category_id":"cly9xaoj7000p04vr2f6jeorv","_id":"cly9xaoj9000v04vr3o0i7cap"},{"post_id":"cly9xaoj2000a04vrckik1fq4","category_id":"cly9xaoj7000p04vr2f6jeorv","_id":"cly9xaoj9000x04vrcuod2zc1"},{"post_id":"cly9xaoj4000e04vrg69vhf1m","category_id":"cly9xaoj6000k04vr8aowaypc","_id":"cly9xaoja000z04vr410qhhw2"},{"post_id":"cly9xaoj5000h04vr5ghg08q4","category_id":"cly9xaoj7000p04vr2f6jeorv","_id":"cly9xaoja001104vr12uc9qbw"},{"post_id":"cly9xaoj6000i04vr1xli4tqv","category_id":"cly9xaoj7000p04vr2f6jeorv","_id":"cly9xaoja001304vr517qakpn"},{"post_id":"cly9xaoj6000l04vreoy61dl3","category_id":"cly9xaoj7000p04vr2f6jeorv","_id":"cly9xaoja001504vr3dja0t27"},{"post_id":"cly9xaoj7000n04vreqeqdro1","category_id":"cly9xaoj7000p04vr2f6jeorv","_id":"cly9xaoja001604vrc57jhz1q"},{"post_id":"cly9xaoj8000r04vr4etnfrd3","category_id":"cly9xaoja001404vr3nu6hr99","_id":"cly9xaojc001804vrfwh27d4r"},{"post_id":"cly9xaoj9000u04vr4kmf5da4","category_id":"cly9xaojb001704vr5m4tc7f7","_id":"cly9xaojc001904vrcmhh097o"}],"PostTag":[],"Tag":[]}}