<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>工作日志</title>
      <link href="/2024/07/05/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
      <url>/2024/07/05/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h3 id="3-19"><a href="#3-19" class="headerlink" title="3.19"></a>3.19</h3><p>搭建环境<br>同步器程序设计</p><h3 id="3-20"><a href="#3-20" class="headerlink" title="3.20"></a>3.20</h3><p>同步器程序调试</p><p>发送多路同步脉冲出，单脉冲，持续脉冲</p><h3 id="3-21"><a href="#3-21" class="headerlink" title="3.21"></a>3.21</h3><p>同步器程序完成<br>压力手掌分布接口布线<br>鞋垫FPC接口设计</p><h3 id="3-22"><a href="#3-22" class="headerlink" title="3.22"></a>3.22</h3><p>足底采集电路布线完成<br>鞋垫接口测试</p><h3 id="3-25"><a href="#3-25" class="headerlink" title="3.25"></a>3.25</h3><p>fpc连接接口设计完成<br>ADC采集程序调试</p><p>右脚16pin在上</p><h3 id="3-26"><a href="#3-26" class="headerlink" title="3.26"></a>3.26</h3><p>-电路设计ADC电容尽量靠近单片机，ADC芯片到单片机的输入输出高阻抗，中间走线尽可能短<br>-adc走线需要注意下电流<br>-退藕电容尽量靠近芯片引脚<br>-AGND和GND需要分离，使用磁珠</p><p>足底连接接口打板<br>调试adc采集程序</p><h3 id="3-27"><a href="#3-27" class="headerlink" title="3.27"></a>3.27</h3><p>adc采集程序移植完成<br>学习STM32H7</p><h3 id="3-28"><a href="#3-28" class="headerlink" title="3.28"></a>3.28</h3><p>学习STM32H7 ADC DMA DAC</p><h3 id="3-29"><a href="#3-29" class="headerlink" title="3.29"></a>3.29</h3><p>学习STM32H7 IIC CAN</p><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><p>搭建ESP32环境<br>熟悉足底压力程序</p><h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><p>调试足底压力程序<br>加入WIFI信号强度检测</p><h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><p>调试足底压力adc采集逻辑</p><h3 id="4-7-8"><a href="#4-7-8" class="headerlink" title="4.7-8"></a>4.7-8</h3><p>足底程序编写完成</p><h3 id="4-9-4-16"><a href="#4-9-4-16" class="headerlink" title="4.9-4.16"></a>4.9-4.16</h3><p>测力台PCB设计完成<br>重焊足底上板ADC芯片</p><p>AD 3.3VA还没有解决 ADC加滤波</p><h3 id="4-17"><a href="#4-17" class="headerlink" title="4.17"></a>4.17</h3><p>重焊足底上板ADC芯片，修好18片，一片不稳定（加热后第一次采集正常，之后全是0，可能出现FF），一片元件缺失<br>测力台原理图更新，新增三色灯柱，急停开关，电机和传感器减少为16个</p><h3 id="4-18"><a href="#4-18" class="headerlink" title="4.18"></a>4.18</h3><p>PCB设计完成打样<br>三色灯柱、急停开关选型</p><p>等待电路板的几天在学习步进电机驱动和LVGL</p><h3 id="4-28"><a href="#4-28" class="headerlink" title="4.28"></a>4.28</h3><p>完成步进电机加速到匀速过程，采用T型加减速<br>adc采集未触发IO中断</p><h3 id="4-29-30"><a href="#4-29-30" class="headerlink" title="4.29-30"></a>4.29-30</h3><p>ADC外部中断触发正常，spi读取正常，写入存在问题<br>spi写入MCP3914寄存器存在问题，读取寄存器数据全部为FF，读取adc正常</p><h3 id="5-6"><a href="#5-6" class="headerlink" title="5.6"></a>5.6</h3><p>调试spi，使用逻辑分析仪查看数据正常<br>低速写入同样存在问题</p><h3 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h3><p>spi写入仍然存在问题，怀疑芯片上锁，boost配置问题，检查后仍然写入失败<br>调试过程板子烧了，单独供电3.3V，3A红外测温发现STM32单片机烧了<br>更换了单片机，adc只有第一次数据正常，后面保持不变，DR引脚触发正常，怀疑adc芯片也烧坏了，无多余芯片，未更换，调试备用板</p><h3 id="5-8"><a href="#5-8" class="headerlink" title="5.8"></a>5.8</h3><p>spi问题未解决，重新配置adc的时钟为1.05M<br>adc采样频率为1050000&#x2F;4&#x2F;256&#x3D;1025.390625Hz<br>人体触摸力传感器出现频率为50Hz的噪声，采用陷波滤波器</p><h3 id="5-9"><a href="#5-9" class="headerlink" title="5.9"></a>5.9</h3><p>测力台暂停<br>标定台电机工作电磁干扰adc，更换电机</p><h3 id="5-10"><a href="#5-10" class="headerlink" title="5.10"></a>5.10</h3><p>电机更换完成<br>学习DSP</p><h3 id="5-11"><a href="#5-11" class="headerlink" title="5.11"></a>5.11</h3><p>通过matlab建立tcp服务器，将adc数据发送到matlab<br>通过傅里叶变换，找到人体触摸传感器时的噪声频率，<br>通过matlab的滤波器设计功能，加入陷波滤波器，导出参数，对adc进行滤波，效果显著</p><h3 id="5-13"><a href="#5-13" class="headerlink" title="5.13"></a>5.13</h3><p>加入急停开关和三色灯柱接口<br>测力台程序基本开发完成<br>重构单独ADC采样程序，回到spi问题</p><h3 id="5-14"><a href="#5-14" class="headerlink" title="5.14"></a>5.14</h3><p>重构程序，找到spi写入adc错误原因<br>adc芯片RSTn引脚默认低电平，导致adc芯片未工作</p><h3 id="5-15-17"><a href="#5-15-17" class="headerlink" title="5.15-17"></a>5.15-17</h3><p>移植gui guider程序到esp32中<br>标定台mos烧了，修改电路，新增保险丝<br>保险丝型号C6165156</p><p>请假两天</p><h3 id="5-22"><a href="#5-22" class="headerlink" title="5.22"></a>5.22</h3><p>esp32lvgl运行，触摸屏驱动采用定时查询<br>机器人驱动器串口调试乱码</p><h3 id="5-23"><a href="#5-23" class="headerlink" title="5.23"></a>5.23</h3><p>板子到了，驱动信号线和使能反了，飞线测试程序正常运行，烧错程序导致烧了一块板子</p><h3 id="5-24"><a href="#5-24" class="headerlink" title="5.24"></a>5.24</h3><p>胶壳到了，给标定台压端子</p><h3 id="5-27"><a href="#5-27" class="headerlink" title="5.27"></a>5.27</h3><p>标定台维修完成，测试电机工作时温度45°，长时间工作无温升</p><h3 id="5-28-6-14"><a href="#5-28-6-14" class="headerlink" title="5.28-6.14"></a>5.28-6.14</h3><p>lvgl学习<br>guiguider学习</p><h3 id="6-17-6-21"><a href="#6-17-6-21" class="headerlink" title="6.17-6.21"></a>6.17-6.21</h3><p>腕力传感器协调<br>出现的问题和总结：<br>板对板连接器焊接保留沉金<br>使用可调电源供电时，设备功率大约在1W，46V供电初始电流尽可能小，怀疑电流浪涌导致设备烧毁5台<br>熟悉放大器，调零电阻</p><h3 id="6-22-加班"><a href="#6-22-加班" class="headerlink" title="6.22 加班"></a>6.22 加班</h3><p>腕力传感器标定<br>软件设置adc量程错误，采样adc值超调，调整放大电阻还得调回去，等待软件修复</p><h3 id="6-24"><a href="#6-24" class="headerlink" title="6.24"></a>6.24</h3><p>软件修复，换回放大电阻<br>标定3台设备<br>编写生产文档，和生产协调标定过程</p><h3 id="6-25"><a href="#6-25" class="headerlink" title="6.25"></a>6.25</h3><p>和生产一起标定一台传感器<br>文档上传<br>医院项目电机商量，测试直线电机驱动器，使用官方调试线仍然通信失败，更换直线电机<br>项目屏幕使用串口屏，购买屏幕测试</p><p>&#x2F;**********************************<br>期间调试keil时，lvgl工程文件太多，编译实在太慢，更换V6编译器，使用lwip时出现的问题：</p><p>使用V6编译器编译rtos项目时需要更换库路径，lwip需要更换cc.h文件下宏定义：<br>&#x2F;&#x2F;#if defined (<strong>GNUC</strong>) &amp; !defined (__CC_ARM)<br>#if defined (<strong>GNUC</strong>) &amp;&amp; !defined (__CC_ARM) &amp;&amp; !(defined(__ARMCC_VERSION) &amp;&amp; (__ARMCC_VERSION &gt;&#x3D; 6010050))</p><p><a href="https://blog.csdn.net/qq_44642831/article/details/116303460">https://blog.csdn.net/qq_44642831/article/details/116303460</a><br>lwip.c</p><p>lwip移植成功，电脑无法ping通<br>原因是编译时未勾选 use microlib（具体原因不清楚）<br>***********************************&#x2F;</p><h3 id="6-26-6-28"><a href="#6-26-6-28" class="headerlink" title="6.26-6.28"></a>6.26-6.28</h3><p>屏幕驱动移植<br>ST7796<br>屏幕一直无法点亮，使用逻辑分析仪查看SPI发送的数据正常，时序正常，使用的是野火电机开发板<br>购买原厂底板准备测试</p><h3 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h3><p>原厂底板测试屏幕正常，使用逻辑分析仪看底板SPI数据和我的程序对应的数据一模一样<br>屏幕接回自己的板子仍然点不亮，<br>无疑按下复位，屏幕点亮<br>（没有找到原因，板子重启，重新下载程序无法直接点亮屏幕且led线程工作正常，必须手动按一下复位按键才能点亮屏幕，简直玄学！！！）<br>触摸驱动移植成功GT911</p><h3 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h3><p>跑台电机驱动协议分析<br>使用逻辑分析仪监听跑台控制板向电机驱动发送的指令<br>破解成功坡道角度控制，电机速度控制<br>（最后找到商家，拿到了协议文档）</p><h3 id="7-3"><a href="#7-3" class="headerlink" title="7.3"></a>7.3</h3><p>lvgl移植成功<br>屏幕刷新率3s一帧，SPI的速度为21M<br>无法满足要求，更换并口屏幕测试</p><h3 id="7-4"><a href="#7-4" class="headerlink" title="7.4"></a>7.4</h3><p>使用H7测试并口屏</p><p>LTDC驱动移植成功</p><p>（遇到的问题：测试时屏幕显示又两层，只开启了一层导致显示被第二层覆盖，以为驱动移植存在问题）</p><p>FFT变换同振幅多频率叠加时，频域图振幅错误</p>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-2-15东至县城</title>
      <link href="/2024/02/15/2024-2-15%E4%B8%9C%E8%87%B3%E5%8E%BF%E5%9F%8E/"/>
      <url>/2024/02/15/2024-2-15%E4%B8%9C%E8%87%B3%E5%8E%BF%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5401.jpg" alt="DSC_5401"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5355.jpg" alt="DSC_5355"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5372.jpg" alt="DSC_5372"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5347.jpg" alt="DSC_5347"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5335.jpg" alt="DSC_5335"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_5345.jpg" alt="DSC_5345"></p>]]></content>
      
      
      <categories>
          
          <category> 摄影日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式Linux6-UART串口</title>
      <link href="/2024/02/06/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux6-UART%E4%B8%B2%E5%8F%A3/"/>
      <url>/2024/02/06/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux6-UART%E4%B8%B2%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="UART串口"><a href="#UART串口" class="headerlink" title="UART串口"></a>UART串口</h1><hr><h2 id="1、UART串口配置结构体"><a href="#1、UART串口配置结构体" class="headerlink" title="1、UART串口配置结构体"></a>1、UART串口配置结构体</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> termios  <span class="token punctuation">{</span>    tcflag_t c_iflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* input mode flags */</span>    tcflag_t c_oflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* output mode flags */</span>    tcflag_t c_cflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* control mode flags */</span>    tcflag_t c_lflag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* local mode flags */</span>    cc_t c_line<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* line discipline */</span>    cc_t c_cc<span class="token punctuation">[</span>NCCS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* control characters */</span>    speed_t c_ispeed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* input speed */</span>    speed_t c_ospeed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* output speed */</span><span class="token macro property">#<span class="token directive keyword">define</span> _HAVE_STRUCT_TERMIOS_C_ISPEED 1</span><span class="token macro property">#<span class="token directive keyword">define</span> _HAVE_STRUCT_TERMIOS_C_OSPEED 1</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>串口属于一种终端设备，除此之外还包括常见的ssh等，它们都遵循终端统一的结构体termios，</p>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式5-FrameBuffer应用编程</title>
      <link href="/2024/01/31/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F5-FrameBuffer%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/01/31/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F5-FrameBuffer%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="FrameBuffer应用编程"><a href="#FrameBuffer应用编程" class="headerlink" title="FrameBuffer应用编程"></a>FrameBuffer应用编程</h1><h2 id="1、内存映射"><a href="#1、内存映射" class="headerlink" title="1、内存映射"></a>1、内存映射</h2><p>用户程序操作文件的一般方式为调用系统库函数（open，read，write），库函数的流程为拷贝用户数据空间，到内核空间，获取文件句柄，返回用户空间，操作文件时，使用句柄到内核空间找到文件进行修改，每一次操作都是如此。用户空间和内核空间的机制导致数据传输速度不能最大，于是采用<strong>内存映射</strong>的方式。</p><p>用户程序可以直接访问内存，内存映射是在内存中申请空间对应物理文件，修改内存的数据会自动同步到物理文件，注意这个同步不是及时的，仍由内核调用，使用open这种库函数也不是及时同步，都是由内核调用同步，内存映射返回的是一个指针，可以直接访问和修改内容。</p><h2 id="2、LCD应用编程流程"><a href="#2、LCD应用编程流程" class="headerlink" title="2、LCD应用编程流程"></a>2、LCD应用编程流程</h2><ul><li>打开&#x2F;dev&#x2F;fdX设备文件</li><li>使用ioctl函数读取LCD参数信息</li><li>使用存储映射的方式将屏幕显示缓冲区映射到用户空间</li><li>直接读写显示缓冲区进行绘图和显示</li><li>完成显示后关闭存储映射，关闭设备文件</li></ul><h2 id="3、属性结构体介绍"><a href="#3、属性结构体介绍" class="headerlink" title="3、属性结构体介绍"></a>3、属性结构体介绍</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//显示设备的可变参数参数-一般表示显示屏显示大小，不变参数一般指硬件属性，比如缓冲区宽度</span><span class="token keyword">struct</span> fb_var_screeninfo <span class="token punctuation">{</span>    __u32 xres<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* visible resolution*/</span>    __u32 yres<span class="token punctuation">;</span>    __u32 xres_virtual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* virtual resolution*/</span>    __u32 yres_virtual<span class="token punctuation">;</span>    __u32 xoffset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* offset from virtual to visible */</span>    __u32 yoffset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* resolution*/</span>    __u32 bits_per_pixel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* guess what*/</span>    __u32 grayscale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 0 = color, 1 = grayscale,*/</span>                    <span class="token comment" spellcheck="true">/* >1 = FOURCC*/</span>    <span class="token keyword">struct</span> fb_bitfield red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* bitfield in fb mem if true color, */</span>    <span class="token keyword">struct</span> fb_bitfield green<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* else only length is significant */</span>    <span class="token keyword">struct</span> fb_bitfield blue<span class="token punctuation">;</span>    <span class="token keyword">struct</span> fb_bitfield transp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* transparency*/</span>    __u32 nonstd<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* != 0 Non standard pixel format */</span>    __u32 activate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_ACTIVATE_**/</span>    __u32 height<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* height of picture in mm    */</span>    __u32 width<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* width of picture in mm     */</span>    __u32 accel_flags<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* (OBSOLETE) see fb_info.flags */</span>    <span class="token comment" spellcheck="true">/* Timing: All values in pixclocks, except pixclock (of course) */</span>    __u32 pixclock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* pixel clock in ps (pico seconds) */</span>    __u32 left_margin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* time from sync to picture*/</span>    __u32 right_margin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* time from picture to sync*/</span>    __u32 upper_margin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* time from sync to picture*/</span>    __u32 lower_margin<span class="token punctuation">;</span>    __u32 hsync_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* length of horizontal sync*/</span>    __u32 vsync_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* length of vertical sync*/</span>    __u32 sync<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_SYNC_**/</span>    __u32 vmode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_VMODE_**/</span>    __u32 rotate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* angle we rotate counter clockwise */</span>    __u32 colorspace<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* colorspace for FOURCC-based modes */</span>    __u32 reserved<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Reserved for future compatibility */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示设备的固定参数</span><span class="token keyword">struct</span> fb_fix_screeninfo <span class="token punctuation">{</span>    <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* identification string eg "TT Builtin" */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> smem_start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Start of frame buffer mem */</span>                    <span class="token comment" spellcheck="true">/* (physical address) */</span>    __u32 smem_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Length of frame buffer mem */</span>    __u32 type<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_TYPE_**/</span>    __u32 type_aux<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Interleave for interleaved Planes */</span>    __u32 visual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_VISUAL_**/</span>     __u16 xpanstep<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* zero if no hardware panning  */</span>    __u16 ypanstep<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* zero if no hardware panning  */</span>    __u16 ywrapstep<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* zero if no hardware ywrap    */</span>    __u32 line_length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* length of a line in bytes    */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> mmio_start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Start of Memory Mapped I/O   */</span>                    <span class="token comment" spellcheck="true">/* (physical address) */</span>    __u32 mmio_len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Length of Memory Mapped I/O  */</span>    __u32 accel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Indicate to driver which*/</span>                    <span class="token comment" spellcheck="true">/*  specific chip/card we have*/</span>    __u16 capabilities<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* see FB_CAP_**/</span>    __u16 reserved<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Reserved for future compatibility */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取参数结构体</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_VSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fb_var<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_FSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fb_fix<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4、存储映射"><a href="#4、存储映射" class="headerlink" title="4、存储映射"></a>4、存储映射</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmap</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>__addr<span class="token punctuation">,</span> size_t __len<span class="token punctuation">,</span> <span class="token keyword">int</span> __prot<span class="token punctuation">,</span>           <span class="token keyword">int</span> __flags<span class="token punctuation">,</span> <span class="token keyword">int</span> __fd<span class="token punctuation">,</span> __off_t __offset<span class="token punctuation">)</span> __THROW<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//地址自动分配，传入NULL，在存储映射中遇到一个问题，显示屏的line_length和显示宽度width不一样，显示屏line_length由硬件缓冲区大小决定，申请内存时，空间大小应该为line_length*height，而不是width*height</span>screen_base <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> screen_size<span class="token punctuation">,</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭存储映射</span><span class="token function">munmap</span><span class="token punctuation">(</span>screen_base<span class="token punctuation">,</span> screen_size<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5、显示效果"><a href="#5、显示效果" class="headerlink" title="5、显示效果"></a>5、显示效果</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//颜色标准转换</span><span class="token macro property">#<span class="token directive keyword">define</span> argb8888_to_rgb565(color) ({ \    unsigned int temp = (color);\    ((temp &amp; 0xF80000UL) >> 8) | \    ((temp &amp; 0xFC00UL) >> 5) | \    ((temp &amp; 0xF8UL) >> 3); \})</span></code></pre><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/8118a23003076a7df800a48e2338f7d.jpg" alt="8118a23003076a7df800a48e2338f7d"></p><h2 id="6、程序源码"><a href="#6、程序源码" class="headerlink" title="6、程序源码"></a>6、程序源码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/fb.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> argb8888_to_rgb565(color) ({ \    unsigned int temp = (color);\    ((temp &amp; 0xF80000UL) >> 8) | \    ((temp &amp; 0xFC00UL) >> 5) | \    ((temp &amp; 0xF8UL) >> 3); \})</span><span class="token keyword">static</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>screen_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打点</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_draw_point</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>width<span class="token punctuation">)</span>        x <span class="token operator">=</span> width<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">>=</span>height<span class="token punctuation">)</span>        y <span class="token operator">=</span> height<span class="token number">-1</span><span class="token punctuation">;</span>    screen_base<span class="token punctuation">[</span>y<span class="token operator">*</span>width <span class="token operator">+</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> rgb565_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 画线</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>width<span class="token punctuation">)</span>        x <span class="token operator">=</span> width<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">>=</span>height<span class="token punctuation">)</span>        y <span class="token operator">=</span> height<span class="token number">-1</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> y<span class="token operator">*</span>width <span class="token operator">+</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">{</span>        end <span class="token operator">=</span> x <span class="token operator">+</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token operator">>=</span>width<span class="token punctuation">)</span>            end <span class="token operator">=</span> width<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> x<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> temp<span class="token operator">++</span><span class="token punctuation">)</span>            screen_base<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> rgb565_color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        end <span class="token operator">=</span> y <span class="token operator">+</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token operator">>=</span>height<span class="token punctuation">)</span>            end <span class="token operator">=</span> height<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> y<span class="token operator">&lt;</span>end<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">,</span> temp<span class="token operator">+</span><span class="token operator">=</span>width<span class="token punctuation">)</span>            screen_base<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> rgb565_color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 画矩形</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_draw_rectangle</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x_len <span class="token operator">=</span> end_x <span class="token operator">-</span> start_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y_len <span class="token operator">=</span> end_y <span class="token operator">-</span> start_y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> end_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> start_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>end_x<span class="token punctuation">,</span> start_y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//区域填充</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> start_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> end_y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> rgb565_color <span class="token operator">=</span> <span class="token function">argb8888_to_rgb565</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x_len <span class="token operator">=</span> end_x <span class="token operator">-</span> start_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> start_y<span class="token operator">&lt;=</span>end_y<span class="token punctuation">;</span> start_y<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>start_x<span class="token punctuation">,</span> start_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> x_len<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> fb_fix_screeninfo fix_info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> fb_var_screeninfo var_info<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> screen_size<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> argc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"usage:%s &lt;event>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_VSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>var_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FBIOGET_FSCREENINFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fix_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    screen_size <span class="token operator">=</span> fix_info<span class="token punctuation">.</span>line_length <span class="token operator">*</span> var_info<span class="token punctuation">.</span>yres<span class="token punctuation">;</span>    width <span class="token operator">=</span> var_info<span class="token punctuation">.</span>xres<span class="token punctuation">;</span>    height <span class="token operator">=</span> var_info<span class="token punctuation">.</span>yres<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"frame config x:%d, y:%d\n"</span><span class="token punctuation">,</span> var_info<span class="token punctuation">.</span>xres<span class="token punctuation">,</span> var_info<span class="token punctuation">.</span>yres<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"frame config size:%d\n"</span><span class="token punctuation">,</span> fix_info<span class="token punctuation">.</span>line_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    screen_base <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> screen_size<span class="token punctuation">,</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>MAP_FAILED <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>screen_base<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 画正方形方块 */</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.25</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方块的宽度为 1/4 屏幕高度</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清屏（屏幕显示黑色）</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token number">0xFF0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//红色方块</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span>width<span class="token operator">-</span>w<span class="token punctuation">,</span> width<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token number">0xFF00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绿色方块</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> height<span class="token operator">-</span>w<span class="token punctuation">,</span> height<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//蓝色方块</span>    <span class="token function">lcd_fill</span><span class="token punctuation">(</span>width<span class="token operator">-</span>w<span class="token punctuation">,</span> width<span class="token number">-1</span><span class="token punctuation">,</span> height<span class="token operator">-</span>w<span class="token punctuation">,</span> height<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0xFFFF00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//黄色方块</span>    <span class="token comment" spellcheck="true">/* 画线: 十字交叉线 */</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//白色线</span>    <span class="token function">lcd_draw_line</span><span class="token punctuation">(</span>width <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//白色线</span>    <span class="token comment" spellcheck="true">/* 画矩形 */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> s_x<span class="token punctuation">,</span> s_y<span class="token punctuation">,</span> e_x<span class="token punctuation">,</span> e_y<span class="token punctuation">;</span>    s_x <span class="token operator">=</span> <span class="token number">0.25</span> <span class="token operator">*</span> width<span class="token punctuation">;</span>    s_y <span class="token operator">=</span> w<span class="token punctuation">;</span>    e_x <span class="token operator">=</span> width <span class="token operator">-</span> s_x<span class="token punctuation">;</span>    e_y <span class="token operator">=</span> height <span class="token operator">-</span> s_y<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token punctuation">(</span>s_x <span class="token operator">&lt;=</span> e_x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s_y <span class="token operator">&lt;=</span> e_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    s_x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> s_y<span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> e_x<span class="token operator">-</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> e_y<span class="token operator">-</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token function">lcd_draw_rectangle</span><span class="token punctuation">(</span>s_x<span class="token punctuation">,</span> e_x<span class="token punctuation">,</span> s_y<span class="token punctuation">,</span> e_y<span class="token punctuation">,</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"frame draw over1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">munmap</span><span class="token punctuation">(</span>screen_base<span class="token punctuation">,</span> screen_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-1-25红星路互勉</title>
      <link href="/2024/01/29/2024-1-25%E7%BA%A2%E6%98%9F%E8%B7%AF%E4%BA%92%E5%8B%89/"/>
      <url>/2024/01/29/2024-1-25%E7%BA%A2%E6%98%9F%E8%B7%AF%E4%BA%92%E5%8B%89/</url>
      
        <content type="html"><![CDATA[<p>2024.1.25记录第一次互勉约拍，地点在红星路，路人阿姨说小姐姐坐在那像幅画一样</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152330.jpg" alt="微信图片_20240129152330"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152455.jpg" alt="微信图片_20240129152455"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152501.jpg" alt="微信图片_20240129152501"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152508.jpg" alt="微信图片_20240129152508"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152514.jpg" alt="微信图片_20240129152514"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152521.jpg" alt="微信图片_20240129152521"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152526.jpg" alt="微信图片_20240129152526"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240129152535.jpg" alt="微信图片_20240129152535"></p>]]></content>
      
      
      <categories>
          
          <category> 摄影日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024-1-21城隍庙</title>
      <link href="/2024/01/21/2024-1-21%E5%9F%8E%E9%9A%8D%E5%BA%99/"/>
      <url>/2024/01/21/2024-1-21%E5%9F%8E%E9%9A%8D%E5%BA%99/</url>
      
        <content type="html"><![CDATA[<h3 id="城隍庙左咪咪右修勾"><a href="#城隍庙左咪咪右修勾" class="headerlink" title="城隍庙左咪咪右修勾"></a>城隍庙左咪咪右修勾</h3><hr><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4726-1.jpg" alt="DSC_4726-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4735-1.jpg" alt="DSC_4735-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4678-1.jpg" alt="DSC_4678-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4730-1.jpg" alt="DSC_4730-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4669-1.jpg" alt="DSC_4669-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4696-1.jpg" alt="DSC_4696-1"></p>]]></content>
      
      
      <categories>
          
          <category> 摄影日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FOC硬件日记（正在更新）</title>
      <link href="/2024/01/20/FOC%E7%A1%AC%E4%BB%B6%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/01/20/FOC%E7%A1%AC%E4%BB%B6%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-20"><a href="#1-20" class="headerlink" title="1.20"></a>1.20</h1><p>硬件设计，参考STC的无感BLDC方案，但是主控更换为STM32，三相逆变器采用FD6288Q，使用mos桥方式支持大电流（考虑小电流drv8313方案，只支持2A电流，仍然需要加mos驱动，考虑成本选择FD6288Q）。考虑加入电流环，电流检测采用INA199A1DCKR。下图为三相逆变电路及电流检测：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120234842699.png" alt="image-20240120234842699"></p><p>存在验证的问题：</p><p>问题1：FD6288官方手册外围电路中需要增加自举电阻，参考开源方案并没有加入自举电阻，</p><p>问题2：电流检测放在半桥的下桥接地，理论上放在哪儿无影响</p><p>问题3：电流检测压差采用分压电阻得到1.65V，参考STM32F103C的FOC方案设计，C系列无VREF</p><hr><p>单片机选型使用STM32F103ZET6（理论上做6路FOC电机都没问题，大炮打蚊子），最初选型考虑STM32G和STM32F4系列，最终由于价格和学习基础理论，采用ZET6（主要因为手头有剩的）。单片机VREF采用3.3V，可能会出现精度问题，暂不考虑。电源设计如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240120235458613.png" alt="image-20240120235458613"></p><p>电路中5V仅作为FD6288Q芯片供电，为了电路简单，使用AMS1117（手头有剩的），MCU和其他电路的3.3V区分，分别使用两个RT9013稳压。完整电路还包括显示，串口，交互按键，暂未完成。</p><h1 id="1-22"><a href="#1-22" class="headerlink" title="1.22"></a>1.22</h1><p>参考柠檬FOC项目，又看到开源博主说FD6288的最低供电为12V，但是看芯片手册输入电压为4~24V，原STC无感电路设计采用5V，电机高速长时间运行时，ams1117处于温热状态，考虑更换为buck电路：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240122230156017.png" alt="image-20240122230156017"></p><p>FD6288Q仍然使用5V供电。</p><h1 id="1-24"><a href="#1-24" class="headerlink" title="1.24"></a>1.24</h1><p>完成原理图设计和PCB大致布局，完善USB串口，交互按键和LED指示灯。完整原理图如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210149669.png" alt="image-20240124210149669"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240124210213483.png" alt="image-20240124210213483"></p><p>电机接口考虑使用铜皮开窗，使用香蕉头和电机连接，或直接焊接。</p>]]></content>
      
      
      <categories>
          
          <category> FOC学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式4-tslib库函数</title>
      <link href="/2024/01/18/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F4-tslib%E5%BA%93%E5%87%BD%E6%95%B0/"/>
      <url>/2024/01/18/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F4-tslib%E5%BA%93%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1、tslib简介"><a href="#1、tslib简介" class="headerlink" title="1、tslib简介"></a>1、tslib简介</h1><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215432029.png" alt="image-20240118215432029"></p><p>tslib是为触摸屏设备开发的linux应用层库函数，通过配置conf文件适配触摸屏信息，通过调用函数得到触摸屏的实时触摸点信息。tslib移植过程参考应用开发编程指南第18章。</p><h1 id="2、tslib库函数介绍"><a href="#2、tslib库函数介绍" class="headerlink" title="2、tslib库函数介绍"></a>2、tslib库函数介绍</h1><p>配置、打开触摸屏设备函数：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"tslib.h"</span></span><span class="token comment" spellcheck="true">/*dev_name: 设备节点nonblock： 0为阻塞方法打开触摸屏设备，非0表示非阻塞*/</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span><span class="token function">ts_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">,</span> <span class="token keyword">int</span> nonblock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*参数与上面相同，区别是，dev_name可以设置为NULL，函数会在配置文件读取设备节点*/</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span><span class="token function">ts_setup</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">,</span> <span class="token keyword">int</span> nonblock<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//关闭触摸屏设备</span><span class="token keyword">int</span> <span class="token function">ts_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置触摸屏设备</span><span class="token keyword">int</span> <span class="token function">ts_config</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取触摸屏事件句柄    </span><span class="token function">ts_fd</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span></code></pre><hr><p>读取触摸屏数据函数：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">int</span> <span class="token function">ts_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts<span class="token punctuation">,</span> <span class="token keyword">struct</span> ts_sample <span class="token operator">*</span>samp<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">int</span> <span class="token function">ts_read_mt</span><span class="token punctuation">(</span><span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts<span class="token punctuation">,</span> <span class="token keyword">struct</span> ts_sample_mt <span class="token operator">*</span><span class="token operator">*</span>samp<span class="token punctuation">,</span> <span class="token keyword">int</span> max_slots<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span></code></pre><h1 id="3、tslib多点触摸测试："><a href="#3、tslib多点触摸测试：" class="headerlink" title="3、tslib多点触摸测试："></a>3、tslib多点触摸测试：</h1><p>tslib流程：</p><p>1、配置触摸屏</p><pre class=" language-c"><code class="language-c">ts <span class="token operator">=</span> <span class="token function">ts_setup</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、读取触摸屏信息，计算最大触摸点数，申请触摸点信息数组</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token function">ts_fd</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EVIOCGABS</span><span class="token punctuation">(</span>ABS_MT_SLOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取最大触摸点</span>    max_slots <span class="token operator">=</span> info<span class="token punctuation">.</span>maximum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> info<span class="token punctuation">.</span>minimum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max slots: %d\n"</span><span class="token punctuation">,</span>max_slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//申请存储触摸点数组空间</span>    samp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>max_slots<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ts_sample_mt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、读取触摸屏数据</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//读触摸屏数据</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">></span><span class="token function">ts_read_mt</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> <span class="token operator">&amp;</span>samp<span class="token punctuation">,</span> max_slots<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ts_read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ts_close</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、解算触摸屏坐标</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tslib.h></span></span><span class="token comment" spellcheck="true">// 多点触摸实验</span><span class="token comment" spellcheck="true">// /dev/input/event1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//tsdev是设备文件 tslib</span>    <span class="token keyword">struct</span> tsdev <span class="token operator">*</span>ts <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sample是具体坐标信息</span>    <span class="token keyword">struct</span> ts_sample_mt <span class="token operator">*</span>samp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> input_absinfo info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ts_mt <span class="token operator">*</span>mt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max_slots<span class="token punctuation">;</span>        <span class="token keyword">int</span> pressure<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置触摸屏</span>    ts <span class="token operator">=</span> <span class="token function">ts_setup</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>ts<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ts_setup error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//ts_fd获取触摸屏事件句柄，再获取触摸屏信息</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token function">ts_fd</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EVIOCGABS</span><span class="token punctuation">(</span>ABS_MT_SLOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取最大触摸点</span>    max_slots <span class="token operator">=</span> info<span class="token punctuation">.</span>maximum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> info<span class="token punctuation">.</span>minimum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max slots: %d\n"</span><span class="token punctuation">,</span>max_slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//申请存储触摸点数组空间</span>    samp <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>max_slots<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ts_sample_mt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读触摸屏数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">></span><span class="token function">ts_read_mt</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> <span class="token operator">&amp;</span>samp<span class="token punctuation">,</span> max_slots<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ts_read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ts_close</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//触摸点状态发生改变</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断压力是否大于0 是表示按下 否表示松开</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pressure<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//上一次压力为0表示刚按下 否则表示移动</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>pressure<span class="token punctuation">[</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d按下：x=%d y=%d\n"</span><span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d移动：x=%d y=%d\n"</span><span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d松开\n"</span><span class="token punctuation">,</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//更新历史压力</span>            pressure<span class="token punctuation">[</span>samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> samp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pressure<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>        <span class="token function">ts_close</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>samp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虫子移动问题</title>
      <link href="/2024/01/16/%E8%99%AB%E5%AD%90%E7%A7%BB%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2024/01/16/%E8%99%AB%E5%AD%90%E7%A7%BB%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="虫子移动问题"><a href="#虫子移动问题" class="headerlink" title="虫子移动问题"></a>虫子移动问题</h1><h2 id="1、问题描述："><a href="#1、问题描述：" class="headerlink" title="1、问题描述："></a>1、问题描述：</h2><p>存在一个5行12列的表格，第一列有5只虫子，编号1，2，3，4，5；每只虫子的移动方向只能是向右、右上方、右下方三种方向；5只虫子进行移动操作后到达第二列，要求每一行都存在一只虫子，同样的要求，五只虫子要到达第12列，虫子每次移动操作对应着不同的权重矩阵相加，虫子从第1列到达第12列的过程存在很多种权重矩阵和，找出权重矩阵方差最小的路线。问题简化如下：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240116215034998.png" alt="image-20240116215034998"></p><h2 id="简化："><a href="#简化：" class="headerlink" title="简化："></a>简化：</h2><p>存在一个5*12的表格，第一列为1<del>5，每个数可以进行-1，不变，+1的操作，进入到下一列，要求进入到下一列的五个数范围还在1</del>5，且不能重复，每次操作对应不同的权重矩阵，求到第12列时，权重矩阵方差最小的移动方案。</p><h2 id="2、求解思路："><a href="#2、求解思路：" class="headerlink" title="2、求解思路："></a>2、求解思路：</h2><p>已知1<del>5个数字任意组合一共有5！（120）种方案，通过暴力破解验证得到每种组合按照题目要求移动一列都存在8种情况，这样可以知道一共有120*8种生成子集，可以通过查表法省去迭代的时间。先建立一个列表，一维空间为10000，查表下标计算为六进制，考虑一共有5个数，数字范围在1</del>5且不重复，<strong>使用六进制可以间接的描述出表的下标，存在的缺陷就是造成空间浪费，实际只有120个下标用到</strong>，二维空间为对应的8种情况序列。建表过程为：</p><pre class=" language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 列出所有排列</span>permutations <span class="token operator">=</span> list<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对每个排列进行操作，并计算结果</span>results <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> perm <span class="token keyword">in</span> permutations<span class="token punctuation">:</span>    result <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>perm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    results<span class="token punctuation">.</span>add<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> productoperations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>initial_case <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>initial_operations <span class="token operator">=</span> list<span class="token punctuation">(</span>product<span class="token punctuation">(</span>operations<span class="token punctuation">,</span> repeat<span class="token operator">=</span>len<span class="token punctuation">(</span>initial_case<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 暴力破解得到每种情况移动后的子情况</span><span class="token keyword">def</span> <span class="token function">getdata</span><span class="token punctuation">(</span>initial_case <span class="token punctuation">)</span><span class="token punctuation">:</span>    valid_initial_cases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> ops <span class="token keyword">in</span> initial_operations<span class="token punctuation">:</span>        new_numbers <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token operator">+</span> op <span class="token keyword">for</span> n<span class="token punctuation">,</span> op <span class="token keyword">in</span> zip<span class="token punctuation">(</span>initial_case<span class="token punctuation">,</span> ops<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>new_numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_numbers<span class="token punctuation">)</span> <span class="token operator">and</span> all<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> num <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> new_numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>            valid_initial_cases<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_numbers<span class="token punctuation">)</span>    <span class="token keyword">return</span> valid_initial_casestable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10000</span><span class="token keyword">for</span> perm <span class="token keyword">in</span> permutations<span class="token punctuation">:</span>    table<span class="token punctuation">[</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>perm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> getdata<span class="token punctuation">(</span>perm<span class="token punctuation">)</span></code></pre><p>这样在每次移动时只需要通过查表法得到子情况集，不需要再进行迭代求解，节约一定时间。建立查表法生成树结构来描述所有情况，在叶子节点可以求解当前路径的权重矩阵方差，记录最小的权重矩阵的值和移动路径。</p><h2 id="3、运行结果："><a href="#3、运行结果：" class="headerlink" title="3、运行结果："></a>3、运行结果：</h2><p>构建深度为12的树，且每个节点存在8个子节点，尽管使用查表法省去一定的时间，但是庞大的基数仍然时问题无法求解，最后优化下求解出深度为8时的最优路径：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/76e2d06a407a2f804d2c0f779d49c3c.png" alt="76e2d06a407a2f804d2c0f779d49c3c"></p><p>耗时3分钟，往后每增加一层，时间增加8倍，<strong>理论求解出12层的时间为8天，于是果断放弃！</strong></p><h2 id="4、程序源码："><a href="#4、程序源码：" class="headerlink" title="4、程序源码："></a>4、程序源码：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> itertools<span class="token keyword">import</span> pickle<span class="token keyword">from</span> copy <span class="token keyword">import</span> deepcopy<span class="token keyword">import</span> time<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> itertoolsnumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 列出所有排列</span>permutations <span class="token operator">=</span> list<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对每个排列进行操作，并计算结果</span>results <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> perm <span class="token keyword">in</span> permutations<span class="token punctuation">:</span>    result <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>perm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    results<span class="token punctuation">.</span>add<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> productoperations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>initial_case <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>initial_operations <span class="token operator">=</span> list<span class="token punctuation">(</span>product<span class="token punctuation">(</span>operations<span class="token punctuation">,</span> repeat<span class="token operator">=</span>len<span class="token punctuation">(</span>initial_case<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getdata</span><span class="token punctuation">(</span>initial_case <span class="token punctuation">)</span><span class="token punctuation">:</span>    valid_initial_cases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> ops <span class="token keyword">in</span> initial_operations<span class="token punctuation">:</span>        new_numbers <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token operator">+</span> op <span class="token keyword">for</span> n<span class="token punctuation">,</span> op <span class="token keyword">in</span> zip<span class="token punctuation">(</span>initial_case<span class="token punctuation">,</span> ops<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>new_numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>new_numbers<span class="token punctuation">)</span> <span class="token operator">and</span> all<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> num <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> new_numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>            valid_initial_cases<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_numbers<span class="token punctuation">)</span>    <span class="token keyword">return</span> valid_initial_casestable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10000</span><span class="token keyword">for</span> perm <span class="token keyword">in</span> permutations<span class="token punctuation">:</span>    table<span class="token punctuation">[</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>perm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> getdata<span class="token punctuation">(</span>perm<span class="token punctuation">)</span>initial_case <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(table[sum([initial_case[i] * (6**(4-i)) for i in range(5)])])</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"my_list.pkl"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>table<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> deepcopy<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 创建树</span>root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># root.value.append(initial_case)</span>root<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span>initial_case<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getNode</span><span class="token punctuation">(</span>initial_case<span class="token punctuation">,</span> Node<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> numbers <span class="token keyword">in</span> iter<span class="token punctuation">(</span>table<span class="token punctuation">[</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>initial_case<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>TreeNode<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Node<span class="token punctuation">.</span>childrenstart_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>dataa <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'../../../../../../Documents/WeChat Files/wxid_fm5zrvq5j2an22/FileStorage/File/2024-01/value.npy'</span><span class="token punctuation">)</span>minfangcha <span class="token operator">=</span> <span class="token number">100000000</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataa<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>save_result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># for nums in root.value:</span>Tree <span class="token operator">=</span> getNode<span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------第二维度</span><span class="token keyword">for</span> children1 <span class="token keyword">in</span> Tree<span class="token punctuation">:</span>    Tree1 <span class="token operator">=</span> getNode<span class="token punctuation">(</span>children1<span class="token punctuation">.</span>value<span class="token punctuation">,</span> children1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#----------------第三维度</span>    <span class="token keyword">for</span> children2 <span class="token keyword">in</span> Tree1<span class="token punctuation">:</span>        Tree2 <span class="token operator">=</span> getNode<span class="token punctuation">(</span>children2<span class="token punctuation">.</span>value<span class="token punctuation">,</span> children2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#----------------第四维度</span>        <span class="token keyword">for</span> children3 <span class="token keyword">in</span> Tree2<span class="token punctuation">:</span>            Tree3 <span class="token operator">=</span> getNode<span class="token punctuation">(</span>children3<span class="token punctuation">.</span>value<span class="token punctuation">,</span> children3<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#----------------第五维度</span>            <span class="token keyword">for</span> children4 <span class="token keyword">in</span> Tree3<span class="token punctuation">:</span>                Tree4 <span class="token operator">=</span> getNode<span class="token punctuation">(</span>children4<span class="token punctuation">.</span>value<span class="token punctuation">,</span> children4<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#----------------第六维度</span>                <span class="token keyword">for</span> children5 <span class="token keyword">in</span> Tree4<span class="token punctuation">:</span>                    Tree5 <span class="token operator">=</span> getNode<span class="token punctuation">(</span>children5<span class="token punctuation">.</span>value<span class="token punctuation">,</span> children5<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#----------------第七维度</span>                    <span class="token keyword">for</span> children6 <span class="token keyword">in</span> Tree5<span class="token punctuation">:</span>                        Tree6 <span class="token operator">=</span> getNode<span class="token punctuation">(</span>children6<span class="token punctuation">.</span>value<span class="token punctuation">,</span> children6<span class="token punctuation">)</span>                        <span class="token keyword">for</span> children7 <span class="token keyword">in</span> Tree6<span class="token punctuation">:</span>                            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>children1<span class="token punctuation">.</span>value<span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>children2<span class="token punctuation">.</span>value<span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>children3<span class="token punctuation">.</span>value<span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>children4<span class="token punctuation">.</span>value<span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>children5<span class="token punctuation">.</span>value<span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>children6<span class="token punctuation">.</span>value<span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            indices <span class="token operator">=</span> <span class="token punctuation">[</span>children7<span class="token punctuation">.</span>value<span class="token punctuation">.</span>index<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>indices<span class="token punctuation">)</span>                            result <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>list<span class="token punctuation">,</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            bianliang1 <span class="token operator">=</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>                            bianliang2 <span class="token operator">=</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>                            bianliang3 <span class="token operator">=</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>                            bianliang4 <span class="token operator">=</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>                            bianliang5 <span class="token operator">=</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                                        dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataa<span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>                            bianliang <span class="token operator">=</span> <span class="token punctuation">(</span>bianliang1 <span class="token operator">+</span> bianliang2 <span class="token operator">+</span> bianliang3 <span class="token operator">+</span> bianliang4 <span class="token operator">+</span> bianliang5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span>                            fangcha <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>bianliang <span class="token operator">-</span> bianliang1<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>bianliang <span class="token operator">-</span> bianliang2<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> \                                      np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>bianliang <span class="token operator">-</span> bianliang3<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>bianliang <span class="token operator">-</span> bianliang4<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> \                                      np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>bianliang <span class="token operator">-</span> bianliang5<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                            <span class="token keyword">if</span> fangcha <span class="token operator">&lt;</span> minfangcha<span class="token punctuation">:</span>                                minfangcha <span class="token operator">=</span> fangcha                                save_result <span class="token operator">=</span> result<span class="token comment" spellcheck="true"># 记录结束时间</span>end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计算执行时间</span>execution_time <span class="token operator">=</span> end_time <span class="token operator">-</span> start_time<span class="token comment" spellcheck="true"># 打印执行时间</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"程序执行时间: {execution_time} 秒"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>minfangcha<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>save_result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for nums in root.children:</span><span class="token comment" spellcheck="true">#     print(nums.value)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式3-输入设备</title>
      <link href="/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F3-%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/"/>
      <url>/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F3-%E8%BE%93%E5%85%A5%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="1、输入类设备描述"><a href="#1、输入类设备描述" class="headerlink" title="1、输入类设备描述"></a>1、输入类设备描述</h1><p>设备文件路径：&#x2F;dev&#x2F;input&#x2F;event</p><p>查看设备事件命令：cat &#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114204650594.png" alt="image-20240114204650594"></p><h1 id="2、linux内核描述"><a href="#2、linux内核描述" class="headerlink" title="2、linux内核描述"></a>2、linux内核描述</h1><h3 id="输入设备描述事件"><a href="#输入设备描述事件" class="headerlink" title="输入设备描述事件"></a>输入设备描述事件</h3><p>查看事件描述符在”<strong>input-event-codes.h</strong>“文件中，已经在linux&#x2F;input.h中包含</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> input_event <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> (__BITS_PER_LONG != 32 || !defined(__USE_TIME_BITS64)) &amp;&amp; !defined(__KERNEL__)</span>    <span class="token keyword">struct</span> timeval time<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> input_event_sec time.tv_sec</span><span class="token macro property">#<span class="token directive keyword">define</span> input_event_usec time.tv_usec</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    __kernel_ulong_t __sec<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__sparc__) &amp;&amp; defined(__arch64__)</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __usec<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __pad<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    __kernel_ulong_t __usec<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">define</span> input_event_sec  __sec</span><span class="token macro property">#<span class="token directive keyword">define</span> input_event_usec __usec</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    __u16 type<span class="token punctuation">;</span>    __u16 code<span class="token punctuation">;</span>    __s32 value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* timeval 为事件上报时间 type 为事件类型 code 为具体事件 value 为事件的值 例如键盘按键KEY0按下时，type表示触发按键，code表示KEY0，value表示按下还是松开*/</span></code></pre><p><strong>数据同步：</strong></p><p>同步事件<em><strong>EV_SYN</strong></em>用于实现同步操作、告知接收者本轮上报的数据已经完整，例如触摸屏幕一次操作需要上报x轴坐标，y轴坐标、触摸点信息等，此时就需要同步事件。同步事件的type类型如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SYN_REPORT 0</span><span class="token macro property">#<span class="token directive keyword">define</span> SYN_CONFIG 1</span><span class="token macro property">#<span class="token directive keyword">define</span> SYN_MT_REPORT 2</span><span class="token macro property">#<span class="token directive keyword">define</span> SYN_DROPPED 3</span><span class="token macro property">#<span class="token directive keyword">define</span> SYN_MAX 0xf</span><span class="token macro property">#<span class="token directive keyword">define</span> SYN_CNT (SYN_MAX+1)</span></code></pre><p><strong>所有的事件上报完成后都需要再上报一个同步事件，一般是SYN_REPORT，value为0。</strong></p><h1 id="3、读取开发板上报事件"><a href="#3、读取开发板上报事件" class="headerlink" title="3、读取开发板上报事件"></a>3、读取开发板上报事件</h1><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h></span></span><span class="token comment" spellcheck="true">// /dev/input/event2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> gpio_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> file_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> input_event in_ev <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> pollfd pfd<span class="token punctuation">;</span>    <span class="token keyword">char</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//效验传参   ./exe /dev/input/event2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> argc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"usage:%s &lt;gpio> &lt;value>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打开事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open export error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//循环阻塞时读取上报事件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* code */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> input_event<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>in_ev<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> input_event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* code */</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"type: %d code: %d value: %d\n"</span><span class="token punctuation">,</span>in_ev<span class="token punctuation">.</span>type<span class="token punctuation">,</span> in_ev<span class="token punctuation">.</span>code<span class="token punctuation">,</span> in_ev<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="4、触摸屏上报事件分析"><a href="#4、触摸屏上报事件分析" class="headerlink" title="4、触摸屏上报事件分析"></a>4、触摸屏上报事件分析</h1><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114212415740.png" alt="image-20240114212415740"></p><p>按下触摸屏后触发绝对位移事件EV_ABS（type&#x3D;3）中的ABS_MT_TRACKING_ID（code&#x3D;57）事件，value为78，表示有一个新的触点被创建，value为-1时表示触点松开，触点的ID为78，53和54分别表示x坐标和y坐标。</p><p>获取触摸屏信息  需要使用一个开放函数：ioctl（input&#x2F;output control）</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* fd 是文件描述符，表示要控制的设备。 request 是控制命令，通常是一个宏，定义了要执行的特定操作。 可选的参数 ... 取决于特定的 ioctl 命令，可能包含输入参数、输出参数或者不需要参数。*/</span><span class="token comment" spellcheck="true">//查询触摸屏触点信息，存放在info中</span><span class="token keyword">struct</span> input_absinfo info<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token function">EVIOCGABS</span><span class="token punctuation">(</span>ABS_MT_SLOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 常用来处理陀螺仪数据struct input_absinfo {    __s32 value;    __s32 minimum;    __s32 maximum;    __s32 fuzz;    __s32 flat;    __s32 resolution;};*/</span></code></pre><p>获取触摸点程序源码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h></span></span><span class="token comment" spellcheck="true">// /dev/input/event2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> gpio_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> file_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> input_absinfo info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> pollfd pfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> max_slots<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> argc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"usage:%s &lt;gpio> &lt;value>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open export error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token function">EVIOCGABS</span><span class="token punctuation">(</span>ABS_MT_SLOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    max_slots <span class="token operator">=</span> info<span class="token punctuation">.</span>maximum <span class="token operator">-</span> info<span class="token punctuation">.</span>minimum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max slots: %d\n"</span><span class="token punctuation">,</span>max_slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="5、单点触摸测试"><a href="#5、单点触摸测试" class="headerlink" title="5、单点触摸测试"></a>5、单点触摸测试</h1><p>参考多点触摸实验</p><h1 id="6、多点触摸测试"><a href="#6、多点触摸测试" class="headerlink" title="6、多点触摸测试"></a>6、多点触摸测试</h1><p>多点实验中，触摸点信息上报流程：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240118215126784.png" alt="image-20240118215126784"></p><pre><code>第一个触摸点直接上报ABS_MT_TRACKING_ID，ID只需知道是否为0，-1，大于0即可，具体编号不需要关心出现第二个触摸点时，先上报ABS_MT_SLOT槽位信息，再上报坐标信息，最后上报ABS_MT_TRACKING_ID如果另一个触摸点发生移动时，先上传ABS_MT_SLOT，再上传坐标信息，相同触摸点移动不上报ABS_MT_SLOT</code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/input.h></span></span><span class="token comment" spellcheck="true">// 多点触摸实验</span><span class="token comment" spellcheck="true">// /dev/input/event1</span><span class="token comment" spellcheck="true">//每个触摸点信息，valid为1时表示触摸点状态更新</span><span class="token keyword">struct</span> ts_mt<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示触摸屏的唯一ID ABS_MT_TRACKING_ID</span>    <span class="token keyword">int</span> valid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓存记录坐标，等待上报同步事件后再将坐标写在ts_mt结构体数组返回</span><span class="token keyword">struct</span> tp_xy<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 读取一次同步事件的触摸点坐标fd: 时间句柄max_slots： 最大触摸点数mt: ts_mt数组指针*/</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ts_read</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> max_slots<span class="token punctuation">,</span> <span class="token keyword">struct</span> ts_mt <span class="token operator">*</span>mt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//上报事件</span>    <span class="token keyword">struct</span> input_event in_ev<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> slot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> tp_xy xy<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清空ts_mt数组指针内容</span>    <span class="token function">memset</span><span class="token punctuation">(</span>mt<span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> max_slots<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ts_mt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置id为-2，不为0表示触摸点按下，-1表示触摸点松开</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> input_event<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>in_ev<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> input_event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>in_ev<span class="token punctuation">.</span>type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断绝对位移事件</span>            <span class="token keyword">case</span> EV_ABS<span class="token punctuation">:</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>in_ev<span class="token punctuation">.</span>code<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 触摸点槽位 code=47</span>                    <span class="token keyword">case</span> ABS_MT_SLOT<span class="token punctuation">:</span>                        slot <span class="token operator">=</span> in_ev<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// X轴坐标 code=53</span>                    <span class="token keyword">case</span> ABS_MT_POSITION_X<span class="token punctuation">:</span>                        xy<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> in_ev<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                        mt<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// y轴坐标 code=54</span>                    <span class="token keyword">case</span> ABS_MT_POSITION_Y<span class="token punctuation">:</span>                        xy<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> in_ev<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                        mt<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 触摸点ID code=57 等于0表示移动事件</span>                    <span class="token keyword">case</span> ABS_MT_TRACKING_ID<span class="token punctuation">:</span>                        mt<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> in_ev<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                        mt<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断同步事件</span>            <span class="token keyword">case</span> EV_SYN<span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>SYN_REPORT<span class="token operator">==</span>in_ev<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//将记录的坐标更新到mt中</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> xy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>                        mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> xy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> gpio_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> file_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> input_absinfo info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ts_mt <span class="token operator">*</span>mt <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> pollfd pfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> max_slots<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> argc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"usage:%s &lt;gpio> &lt;value>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open export error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token function">EVIOCGABS</span><span class="token punctuation">(</span>ABS_MT_SLOT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ioctl error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    max_slots <span class="token operator">=</span> info<span class="token punctuation">.</span>maximum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> info<span class="token punctuation">.</span>minimum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max slots: %d\n"</span><span class="token punctuation">,</span>max_slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建长度为max_slots的触摸点信息数组</span>    mt <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>max_slots<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ts_mt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">></span><span class="token function">ts_read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> max_slots<span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断第i个触摸点的状态是否发生改变</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;=</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"slot&lt;%d>, 按下(%d, %d)\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"slot&lt;%d>, 松开\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"slot&lt;%d>, 移动(%d, %d)\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式2-GPIO编程</title>
      <link href="/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F2-GPIO%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F2-GPIO%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="头文件说明"><a href="#头文件说明" class="headerlink" title="头文件说明"></a>头文件说明</h3><pre class=" language-c"><code class="language-c"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">></span>：该头文件定义了一些基本的系统数据类型，如size_t、time_t等。<span class="token operator">&lt;</span>sys<span class="token operator">/</span>stat<span class="token punctuation">.</span>h<span class="token operator">></span>：该头文件定义了一些关于文件状态的函数和宏，如<span class="token function">stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、S_IRUSR等。<span class="token operator">&lt;</span>fcntl<span class="token punctuation">.</span>h<span class="token operator">></span>：该头文件定义了一些文件控制操作的函数和常量，如<span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、O_RDONLY等。<span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">></span>：该头文件定义了一些系统调用函数，如<span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>等。</code></pre><h3 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*mode 是要检查的权限模式。常用的权限模式有以下几种：F_OK：用于检查文件或目录是否存在。R_OK：用于检查文件或目录是否可读。W_OK：用于检查文件或目录是否可写。X_OK：用于检查文件或目录是否可执行。存在返回0，不存在返回-1*/</span>       len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*write函数向文件写入数据，写入argv[1]字符串，后面接写入的字节数，成功返回写入的字节数*/</span></code></pre><h2 id="一、GPIO应用编程"><a href="#一、GPIO应用编程" class="headerlink" title="一、GPIO应用编程"></a>一、GPIO应用编程</h2><h3 id="1、基础属性："><a href="#1、基础属性：" class="headerlink" title="1、基础属性："></a>1、基础属性：</h3><p>gpio设备目录在&#x2F;sys&#x2F;class&#x2F;gpio中：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142048558.png" alt="image-20231015142048558"></p><p>gpiochip0<del>128分别对应i.max6ull的五组gpio1</del>5，export用来导出指定编号的gpio，加入需要导出GPIO4_IO20，首先需要确定GPIO的编号，GPIO4对应gpiochip96，编号为94+20&#x3D;114</p><p>执行导出命令为echo 94 &gt; export</p><p>以导出GPIO0_IO1为例：执行echo 1 &gt; export，会生成一个gpio1的文件夹，里面描述了gpio1的相关信息：</p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231015142724436.png" alt="image-20231015142724436"></p><pre class=" language-c"><code class="language-c">dirction<span class="token punctuation">:</span> IO的方向可以设置为out 和 inactive_low<span class="token punctuation">:</span> 电平逻辑状态，默认为<span class="token number">0</span>，此时<span class="token number">1</span>为高电平 <span class="token number">0</span>为低电平value： 电平状态edge<span class="token punctuation">:</span> 中断触发：none rising falling both分别表示无触发、上升沿、下降沿、边沿触发</code></pre><h3 id="2、gpio-config函数"><a href="#2、gpio-config函数" class="headerlink" title="2、gpio_config函数"></a>2、gpio_config函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*    path：gpioX路径/sys/class/gpio/gpio1    attr：需要修改的属性 direction    value：修改的具体值out*/</span><span class="token keyword">int</span> <span class="token function">gpio_config</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">char</span> file_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拼接字符串</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open gpio error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 向文件写入指定长度的数据</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> val<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"write info error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"write success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main函数：</span><span class="token comment" spellcheck="true">// 判断输入的gpioX是否存在，不存在需要通过写export文件导出IO</span><span class="token function">sprintf</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"/sys/class/gpio/gpio%s"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">access</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/sys/class/gpio/export"</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open export error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gpio_config</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"direction"</span><span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"write direction error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gpio_config</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"active_low"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"write active_low error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gpio_config</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"write value error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、poll-函数"><a href="#3、poll-函数" class="headerlink" title="3、poll()函数"></a>3、poll()函数</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 使用poll()函数实现非阻塞式中断触发</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> gpio_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> file_path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建pollfd结构体，描述文件就绪状态</span>    <span class="token keyword">struct</span> pollfd pfd<span class="token punctuation">;</span>    <span class="token keyword">char</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!=</span> argc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"usage:%s &lt;gpio> &lt;value>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"/sys/class/gpio/gpio%s"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">access</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> fd<span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/sys/class/gpio/export"</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open export error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"write error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gpio_config</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"direction"</span><span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"write direction error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gpio_config</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"active_low"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"write active_low error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置为边沿触发</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">gpio_config</span><span class="token punctuation">(</span>gpio_path<span class="token punctuation">,</span><span class="token string">"edge"</span><span class="token punctuation">,</span> <span class="token string">"both"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"write edge error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 打开IO状态value文件，文件描述符保存在pfd.fd</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span> gpio_path<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open pfd.fd error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        pfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLPRI<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只关心高优先级数据可读 中断 只有高优先级才会触发文件转换为就绪态</span>    <span class="token function">read</span><span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读取一次清除状态</span>    <span class="token comment" spellcheck="true">//轮询读取</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 监听pfd文件状态，内部有一个文件描述符 超时时间-1</span>        ret <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"poll error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ret<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"poll time out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 事件触发</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>revents <span class="token operator">&amp;</span> POLLPRI<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 因为之前读取过文件，需要移动指针到0</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">lseek</span><span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"lseek error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 读取文件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> <span class="token function">read</span><span class="token punctuation">(</span>pfd<span class="token punctuation">.</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read pfd.fd error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"get interupt &lt;value=%c>\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux嵌入式1-启动开发环境</title>
      <link href="/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/01/14/Linux%E5%B5%8C%E5%85%A5%E5%BC%8F1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="应用开发环境搭建："><a href="#应用开发环境搭建：" class="headerlink" title="应用开发环境搭建："></a>应用开发环境搭建：</h1><p>开发板移植uboot：完成网络移植</p><p>服务器安装nfs和tftp</p><p>windows、服务器、开发板需要处在同一网段，使用虚拟需要添加网卡开启桥接模式，<em><strong>关闭防火墙</strong></em></p><p>挂载zImage和dtb之前先使用nfs和tftp测试</p><p>完成配置后 uboot在emmc中，zImage和dtb使用tftp挂载，根文件系统使用nfs挂载</p><p>最后验证交叉编译工具</p><p>安装nfs过程出现的问题，挂载失败，检查是服务器nfs版本为4，uboot只支持2（原文链接：<a href="https://blog.csdn.net/qq_42212668/article/details/125250873%EF%BC%89">https://blog.csdn.net/qq_42212668/article/details/125250873）</a></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20231007210103881.png" alt="image-20231007210103881"></p><h2 id="配置过程中的常用命令："><a href="#配置过程中的常用命令：" class="headerlink" title="配置过程中的常用命令："></a>配置过程中的常用命令：</h2><pre class=" language-shell"><code class="language-shell">setenv ipaddr 192.168.1.50setenv ethaddr b8:ae:1d:01:00:00setenv gatewayip 192.168.1.1setenv netmask 255.255.255.0setenv serverip 192.168.1.253saveenvnfs启动文件系统：setenv bootargs 'console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.1.107:/home/wujing/linux/nfs/alientrootfs,proto=tcp rw ip=192.168.1.50:192.168.1.107:192.168.1.1:255.255.255.0::eth0:off'tftp挂载setenv bootcmd 'tftp 80800000 zImage; tftp 83000000 imx6ull-14x14-emmc-4.3-800x480-c.dtb; bootz 80800000 - 83000000'</code></pre><h1 id="应用开发环境启动："><a href="#应用开发环境启动：" class="headerlink" title="应用开发环境启动："></a>应用开发环境启动：</h1><p>启动Ubuntu，mobaX连接开发板，检查Ubuntu的IP地址和开发板uboot中设置的tftp服务器地址是否一致，不一致使用以下命令修改：</p><pre class=" language-shell"><code class="language-shell">setenv serverip 192.168.1.253</code></pre><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/image-20240114122139754.png" alt="image-20240114122139754"></p><p><strong>检查虚拟机网络设置，VMnet1为net模式，用来虚拟机上网，VMnet0为桥接模式，用来连接开发板挂载。</strong></p><p>检查无误后在uboot中输入boot启动</p><p>nfs挂载根文件系统目录 ：&#x2F;home&#x2F;wujing&#x2F;linux&#x2F;nfs&#x2F;alientrootfs</p><p>应用程序源码存放目录：&#x2F;home&#x2F;wujing&#x2F;Desktop&#x2F;alitenk-test</p><p>常用命令：</p><pre class=" language-uboot"><code class="language-uboot">printenv #查看环境变量boot #启动linux</code></pre><p>使能Ubuntu环境变量</p><pre class=" language-shell"><code class="language-shell">source /opt/fsl-imx-x11/4.1.15-2.1.0/environment-setup-cortexa7hf-neon-poky-linux-gnueabi</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux嵌入式学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024.1.6姥山岛</title>
      <link href="/2024/01/13/2024-1-6%E5%A7%A5%E5%B1%B1%E5%B2%9B/"/>
      <url>/2024/01/13/2024-1-6%E5%A7%A5%E5%B1%B1%E5%B2%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4170-1.jpg" alt="DSC_4170-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4492-1.jpg" alt="DSC_4492-1"></p><p><img src="http://wochaoaidahaide.oss-cn-beijing.aliyuncs.com/img/DSC_4067-1.jpg" alt="DSC_4067-1"></p>]]></content>
      
      
      <categories>
          
          <category> 摄影日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FOC学习笔记</title>
      <link href="/2024/01/13/FOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/13/FOC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="无刷电机驱动原理"><a href="#无刷电机驱动原理" class="headerlink" title="无刷电机驱动原理"></a>无刷电机驱动原理</h1><p>FOC矢量控制</p><h1 id="Park变换"><a href="#Park变换" class="headerlink" title="Park变换"></a>Park变换</h1>]]></content>
      
      
      <categories>
          
          <category> FOC学习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
